[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "group \u0027seedu.atas\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    mainClassName \u003d \"seedu.atas.Atas\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.atas.Atas\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    archiveBaseName \u003d \"atas\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    archiveVersion \u003d \"2.0.0\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 5,
      "-": 38,
      "e0309556": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Keith | [Github](https://github.com/Keith-JK) | [Portfolio](https://ay1920s2-cs2113t-m16-1.github.io/tp/team/Keith-JK.html)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Joel Chang | [Github](https://github.com/joelczk) | [Portfolio](https://ay1920s2-cs2113t-m16-1.github.io/tp/team/joelczk.html)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jeremy Lai | [Github](https://github.com/lwxymere) | [Portfolio](https://ay1920s2-cs2113t-m16-1.github.io/tp/team/lwxymere.html)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ji Cheng | [Github](https://github.com/jichngan) | [Portfolio](https://ay1920s2-cs2113t-m16-1.github.io/tp/team/jichngan.html)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Qi Ren | [Github](https://github.com/e0309556) | [Portfolio](https://ay1920s2-cs2113t-m16-1.github.io/tp/team/e0309556.html)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "# ATAS (Amazing Task and Assignment System) Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": "By: `Team M16-1` Since: `Jan 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- [Setting up](#1-setting-up)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Prerequisites](#11-prerequisites)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Setting up the project](#12-setting-up-the-project)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Verifying the Setup](#13-verifying-the-setup)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- [Design](#2-design)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Architecture](#21-architecture)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [UI Component](#22-ui-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Logic Component](#23-logic-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Model Component](#24-model-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Storage Component](#25-storage-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\t- [Atas Component](#26-atas-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- [Implementation](#3-implementation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Delete Task Feature](#31-delete-task-feature)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Design Considerations](#311-design-considerations)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Search task feature](#32-search-task-feature)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Current Implementation](#321-current-implementation)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Design Considerations:](#322-design-considerations)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Clear Task feature](#33-clear-task-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Current Implementation](#331-current-implementation)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Design Considerations](#332-design-considerations)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Repeat event feature](#34-repeat-event-feature)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Current Implementation](#341-current-implementation)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [`Event` and `RepeatEvent` Differences and Impact](#342-event-and-repeatevent-differences-and-their-impact)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [How date and time is updated](#343-how-date-and-time-is-updated-in-repeateventupdateevent)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Design Considerations](#344-design-considerations)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Future Enhancement](#344-future-enhancements)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Edit Task Feature](#35-edit-task-feature)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Implementation](#351-implementation)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Design Considerations](#352-design-considerations)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [View Calendar feature](#36-view-calendar-feature)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Implementation](#361-implementation)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Design Considerations](#362-design-considerations)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "\t\t- [Future Enhancements](#363-future-enhancements)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Storage](#37-storage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Implementation](#371-implementation)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t\t- [Saving the current state of **ATAS** with `Storage#save()`:](#372-saving-the-current-state-of-atas-with-storagesave)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t\t- [Loading previously saved `TaskList` data into **ATAS** with `Storage#load()`:](#373-loading-previously-saved-tasklist-data-into-atas-with-storageload)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t\t- [Design Considerations](#374-design-considerations)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- [Testing](#4-testing)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Using IntelliJ JUnit Tests](#41-using-intellij-junit-tests)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\t- [Using Input-Output Tests](#42-using-input-output-tests)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "- [DevOps](#5-devops)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Build Automation](#51-build-automation)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Continuous Integration](#52-continuous-integration)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Coverage Reporting](#53-coverage-reporting)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Making a Release](#54-making-a-release)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "- [Appendices](#6-appendices)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Product Scope](#61-appendix-a-product-scope)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [User Stories](#62-appendix-b-user-stories)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Use Cases](#63-appendix-c-use-cases)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Non-Functional Requirements](#64-appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    - [Documentation](#65-appendix-e-documentation)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    - [Instructions for Manual Testing](#66-appendix-f-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## 1. Setting up"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "This section will guide you on how to set up this project on your own computer."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 1.1. Prerequisites"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  JDK 11 or above"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  IntelliJ IDE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**: Knowing [`LocalDateTime`](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html) API from Java "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e would help in understanding how Date and Time is used in our implementation and [Tests](#4-testing)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 1.2. Setting up the project"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  Fork this repository, and clone the fork to your computer"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  Open the IntelliJ IDE. If you are not in the welcome screen, click `File` \u0026gt; `Close Project` to close the existing project."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "3.  Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    1.  Click `Configure` \u0026gt; `Project Defaults` \u0026gt; `Project Structure`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    2.  Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "4.  Click on `Import Project`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "5.  Locate and select the `build.gradle` file, then click `OK`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "6.  Click `Open as Project`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "7.  Click `OK` to use the default settings provided"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 1.3. Verifying the Setup"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "1.  In an IntelliJ terminal, run `gradlew build`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "2.  Move to the folder `build` \u0026gt; `libs` and run: `java -jar atas-2.0.0.jar`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    1.  To use **ATAS**, type a valid command into the terminal and press the enter key to run the command.  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        e.g. Typing `help` and pressing the enter key will show the available commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    2.  Some example commands you can try to get familiar with **ATAS**:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        -   `help`: Lists the commands that **ATAS** supports."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        -   `assignment n/Assignment One m/CS2113T d/01/02/20 1600 c/Important Assignment`: Adds an assignment called **Assignment One** for the module **CS2113T**. This assignment is due on **1st February 2020 4pm** and the comments for this assignment is that it is an **Important Assignment**."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        -   `exit`: Exits **ATAS**."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "This section will give a high-level overview of how various components in **ATAS** function and interact with each other."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![overall architecture](images/overall_architecture.PNG)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "The architecture diagram above illustrates the high-level design of the **ATAS** application.  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `Atas` component contains all the other components in the application.  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `Ui`: Reads user input, and shows the results of commands to the user"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `Logic`: Handles execution of user input commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `Model`: Stores the runtime data of the application"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `Storage`: Reads and stores data from a file stored on the user’s computer"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The following sections will explain each component in greater detail."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.2. UI Component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  The `Ui` component reads user input which represents a command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  The `Ui` component shows the result of the command to the user."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.3. Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The Logic component comprises the `Parser`, `Command`, and `CommandResult` classes:  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  `Parser` will interpret the user command and return the corresponding `Command` object.  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  `Command#execute()` is called to run the command, returning a `CommandResult` object.  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "3.  The `CommandResult` object will contain the output to be shown to the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.4. Model Component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The Model component contains the `Task` and `TaskList` classes, which store the user’s schedule."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![TaskList and Tasks](images/TaskList_Task_class_diagram.PNG)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.5. Storage Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joelczk"
        },
        "content": "![Storage Class Diagram](images/storage.PNG)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  A `Storage` object is created by the `Atas` class to handle the loading and saving of `Task` data."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  The `load()` method is used to read saved data from a local file into the current session of **ATAS**."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joelczk"
        },
        "content": "3.  The `save()` method writes the current state of **ATAS** into the local save file using the `Task#encodeTask()` method."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.6. Atas Component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `Atas` component integrates all the aforementioned components to run the overall application logic.  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The sequence diagram below shows how various components, broken down into the various classes, interact when the user enters a `help` command  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![Component interactions for help command](images/atas_help_command_sequence_diagram_v3.PNG)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  The `Ui` class is used to read user input.  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  The `Parser` class is used to parse the user input string, returning a `Command` object.  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "3.  The `Command#execute()` method is run, returning a `CommandResult` object.  "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joelczk"
        },
        "content": "4.  The `Ui` class is used to show the `CommandResult` message to the user.  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joelczk"
        },
        "content": "5.  The `Storage` object is used to save the new state of the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309556"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joelczk"
        },
        "content": "This section will detail how some noteworthy features are implemented."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e Note: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e You will need to create tasks to use the features mentioned below.  "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e Create an `assignment`: `assignment n/[NAME] m/[MODULE] d/[DATE] [TIME] c/[COMMENTS]`  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e Create an `event`     : `event n/[NAME] l/[LOCATION] d/[DATE] [START_TIME] - [END_TIME] c/[COMMENTS]`  "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e Dates follow the `DD/MM/YY` format, and times follow the `HHmm` format.  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e For more information, please refer to the user guide."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.1. Delete Task Feature"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Current Implementation:  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `DeleteCommand` extends the `Command` class and initializes the `delete index` in its constructor. The `delete index` specifies the index of task that the user wants to delete."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Given below is an example usage and how the `DeleteCommand` mechanism behaves at each step:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user launches the app and retrieves the tasks which are saved under a local file using `Storage`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user enters `delete 1` into the command line. Method `Parser#parseCommand()` will be called to parse the command provided. It will obtain information to get `delete index`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e **Warning:**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e If `IndexOutOfBoundsException` or `NumberFormatException` is caught, a new instance of `IncorrectCommand` class will be called to print the respective error messages"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A new instance of `DeleteCommand` with `delete index` initialized will be created. The `DeleteCommand#execute()` will be called."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `DeleteCommand#execute()` method will do 2 things:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   If there are no tasks in the existing task list, it will create a new instance of `CommandResult` that prints out an error message indicating an empty task list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   If there are tasks in the existing task list, the `DeleteCommand` class will call the `TaskList#deleteTask()` method to delete the task, based on the index. At the end of the execution, "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joelczk"
        },
        "content": "the `DeleteCommand` class will create a new instance of `CommandResult` class that prints out the success message for task deletion."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The following sequence diagram summarizes how delete command operation works:  "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joelczk"
        },
        "content": "![delete task](images/delete.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.1.1. Design Considerations"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Calling `remove()` method in `deleteTask()` command of `TaskList` method instead of calling `remove()` method within the `execute()` method of the `DeleteCommand` class"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Pros: Easier implementation for other classes that requires the same use. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Cons: Additional functional call to `TaskList#deleteTask` is needed to delete a task from the task list, which may increase time complexity of delete operation."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale: We decided to implement it in such a way because we feel that the increase is time complexity is not "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    going to have a big impact on our code as this app is developed to be used as a CLI. Furthermore, such "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    implementation also allows us to keep all the related commands to the list of tasks within a class which keeps our "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    code cleaner."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.2. Search task feature"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.2.1 Current Implementation"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The search task feature is currently implemented in `SearchCommand` class that inherits from the `Command` class."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `SearchCommand` initializes the `taskType`, `searchParam` and `date` in its constructor."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `taskType` refers to the type of task the user wants to search through."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `searchParam` refers to the search query that the user wants to find."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `date` refers to the date of the task that the user wants to find. It is set as a default value of NULL if it is a *search* command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `SearchCommand` class contains `CURRENT_COMMAND_WORD` to store the command word used by the user(i.e. `search` or `searchd`)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `SearchCommand` class also contains `CURRENT_COMMAND_USAGE` to store the error messages for the respective commands."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Given below is an example usage of the `Search` command:  "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user launches the app and retrieves the tasks that are saved under a local file using `Storage`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user enters the input into the command line. Method `Parser#parseCommand()` will be called to parse the command "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joelczk"
        },
        "content": "provided to obtain the `taskType`, `searchParam` and `date` ."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A new instance of `SearchCommand` with the `taskType`, `searchParam` and `date` will be created."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `SearchCommand` contains an ArrayList `storeIndex` to store the original index of the task containing the search query."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Depending on the input that the user puts in, the `CURRENT_COMMAND_WORD` in the `SearchCommand` class will be updated to the *command word* of the user and the "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joelczk"
        },
        "content": "`CURRENT_COMMAND_USAGE` in the `SearchCommand` class will be updated accordingly."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   If there are no tasks in the existing task list, it will initialize a new `CommandResult` class that prints out an error message, indicating an empty task list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Otherwise, If the `taskType` is an *assignment* or *event* , `SearchCommand#getSearchQueryAssignments()` or `SearchCommand#getSearchQueryEvents()`will be called respectively."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        -   In the method,  `Parser#getEventsHashMap()` and `Parser#getAssignmentsHashMap()` will be called respectively, to obtain the original task list and the corresponding index."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        -   `getEventOrAssignmentResults` will be called to obtain the results of the search query."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   `SearchCommand#loopArrayNoDateEventsAssignments` or `SearchCommand#loopArrayWithDateEventsAssignments` will be called to loop through the *Linked HashMap~ to find the tasks"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            matching the search query and date(if applicable) and add the original index to the `storeIndex` and return an ArrayList containing the results."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Lastly, If `taskType` is *all*, `SearchCommand#etSearchQueryAllTasks` will be called."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        -   In the method, an *ArrayList* will be used to store the updated task list from `Parser#getTaskArray()`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        -   We will iterate through the *ArrayList* to find the tasks matching the search query and date(if applicable) and add the original index"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        to the `storeIndex` and return an ArrayList containing the results."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The ArrayList containing the results from Step 3 will be parsed into `SearchCommand#SearchList` to format the results into a String suitable "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joelczk"
        },
        "content": "for printing out to the users."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 5**  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The String results from Step 5 will be parsed into `SearchCommand#resultsList` to print out the results."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   If there are no matching search query, a new instance of `CommandResult` class will be created to print out the error message, indicating no matching search query,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Otherwise, a new `CommandResult` class will be created to print out the search results."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The following sequence diagram summarizes how the *search* and *searchd* command works :"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joelczk"
        },
        "content": "![Search operations](images/search.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.2.2. Design Considerations:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Using Linked HashMap to store key-value pairs for *events* and *assignments*"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        To maintain an ordering among the events and assignments that we iterate through so that there is no need to sort through the list again to restore the original ordering"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternatives Considered:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Use a HashMap to store the key-value pairs"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Pros: HashMap does not maintain a doubly-linked list running though all entries so there is less overhead as compared to a Linked HashMap, leading to better performance in terms of memory usage"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Cons: HashMap does not maintain an iteration order so more sorting has to be done to restore the original order, which will incur additional time complexities"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Creating 2 separate classes for `SearchCommand` and `SearchdCommand`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        To create 2 separate commands so that users can filter their search query more easily."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternatives Considered:  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Use a `Search` class that implements both functions of `SearchCommand` and `SearchdCommand`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Pros: Reduced coupling. Improved code structure."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Cons: More difficult to implement"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        2.  Create another `SearchdCommand` within the `Parser` class that does the same operations as the `SearchdCommand`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Pros: Easier to implement."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Cons: Makes the code for `Parser` unnecessarily long. Makes the code less OOP."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.3. Clear Task feature"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.3.1. Current Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `ClearCommand` inherits from the `Command` class and initializes the `clearParam` to check which clear function has to be executed"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example 1: Given below is an example usage of the `clear all` command:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user launches the app and retrieves the tasks which are saved under a local file using `Storage`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user enters `clear all` into the command line. Method `Parser#parseCommand()` will be called to parse the command provided."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A new instance of `ClearCommand` with `clearParam` initialized will be created. The `execute()` method of `DeleteCommand` will then be called."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `execute()` method will then call the `ClearCommand#clearAll()`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   If there are no tasks in the existing task list, it will create a new instance of `CommandResult` class that prints out an error message indicating an empty task list"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   If there are tasks in the existing task list, it will call the `TaskList#clearList()` method to clear the existing taskList"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example 2: Given below is an example usage of `clear done` command:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user launches the app and retrieves the tasks which are saved under a local file using `Storage`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user enters `clear done` into the command line. Method `Parser#parseCommand()` will be called to parse the command provided."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A new instance of `ClearCommand` with `clearParam` initialized will be created. The `DeleteCommand#execute()` will then be called."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `execute()` method will then call the `ClearCommand#clearDone()` :"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   If there are no tasks in the existing task list, it will initialize a new instance of `CommandResult` that prints out an error message indicating an empty task list"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   If there are no completed tasks in the existing task list, it will initialize a new instance of `CommandResult` that prints out an error message indicating that there "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "joelczk"
        },
        "content": "are no completed tasks"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Otherwise, it will call the `clearDone()` method that will call the `TaskList#deleteAllDone()` method to delete all the completed tasks, excluding repeat events."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The following sequence diagram summarizes how the `ClearCommand` operation works:  "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joelczk"
        },
        "content": "![clear command](images/clear command.png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.3.2. Design Considerations"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Creating another `clear done` command instead of just 1 `clear` command"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Considering that our target audience are students, we feel that it might be inconvenient for the students to delete each completed one by one, just to reduce the number of tasks that is being displayed during `list` command."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternative Considered:  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Delete the task once it has been marked as completed"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Pros: Easier to implement and improved code readability"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Cons: User may want to refer back to completed tasks for reference in the future and may not want to delete the completed task"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        2.  Instead of deleting the completed tasks, we can choose to only list commands that have been completed"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Pros: Easier to implement and improved code readability"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Cons: `ArrayList` will be filled up with unnecessary tasks that could have been removed. This might affect the time complexity of future addition or searching operations on the `ArrayList`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.4. Repeat event feature"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0309556"
        },
        "content": "This feature allow users to repeat their events at a specified frequency forever, removing the need to insert the"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0309556"
        },
        "content": "same event multiple times with different dates."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.1. Current Implementation"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `RepeatCommand` class extends the `Command` class and either allows the stated event to repeat or to stop repeating. To allow an event to repeat, it will replace the current `Event` object with a `RepeatEvent` object (`RepeatEvent` inherits from `Event`). Likewise, to stop repeating, it replaces the current `RepeatEvent` with a `Event` object. A detailed explanation and the difference between the 2 classes will be elaborated later."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Given below is an example usage of the `repeat id/2 p/1w` command given by a user."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0309556"
        },
        "content": "`Parser#parseCommand()` will be called to parse the command provided. Through this method, we will be able to"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0309556"
        },
        "content": " obtain information to get integers `eventID`, `numOfPeriod` and string `typeOfPeriod`.  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- `eventID` identifies the task that the user wishes to repeat.  "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- `numOfPeriod` and `typeOfPeriod` specifies how often the user wants to repeat the event."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note:**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Available `typeOfPeriod`: Day `d`, Week `w`, Month `m`, Year `y` \u003cbr/\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0309556"
        },
        "content": "After parsing, a new instance of RepeatCommand with `eventID`, `numOfPeriod` and `typeOfPeriod` initialized will be created. `RepeatCommand#execute()` will then be called."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `execute()` method will check 3 things after it calls `getTask()` method from `TaskList` class to get the user input task."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   It will check if the `eventID` provided refers to a valid `Event` task."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   It will then check if `numOfPeriod` equals to 0. In which case, it will be setting the event to not repeat by calling `RepeatCommand#unsetRepeat()`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    -   `unsetRepeat()` method will check if the given task is indeed a `RepeatEvent` object and then create a new `Event` object using"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     the variables from `RepeatEvent` and replace it in the `TaskList` with no changes to any variables in `Event` object."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   If it is not 0, it will set the event to repeating by calling `RepeatCommand#setRepeat()`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    -   `setRepeat()` method will use 2 of the variables (`numOfPeriod`, `typeOfPeriod`) to create a new `RepeatEvent` object, update its"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        date to the next upcoming date if the current date is in the past by calling `RepeatEvent#updateDate()` and replace the"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        current `Event` object at the `eventID` in`TaskList`. "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0309556"
        },
        "content": "After the `execute()` method completes, a new `CommandResult` class with a string containing the result of the execution. This string will "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0309556"
        },
        "content": "be printed by calling `Ui#showToUser()` Then the event will be saved into local file by calling `Atas#trySaveTaskList()`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "e0309556"
        },
        "content": "The following sequence diagram summarizes how repeat command operation works, from the parser creating an `RepeatCommand` till when"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0309556"
        },
        "content": " `execute()` method called by `Atas` is returned:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "joelczk"
        },
        "content": "![Repeat Command Sequence Diagram](images/RepeatCommand_UML.png)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.2. `Event` and `RepeatEvent` Differences and their Impact"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   There are 5 main variables that differentiate a `RepeatEvent` object from an `Event` object, and keep track of Date and Time for an"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "e0309556"
        },
        "content": " event to repeat accurately."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    1.  `int numOfPeriod`: Set to the user input value that states the frequency which `typeOfPeriod` will repeat at."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    2.  `String typeOfPeriod`: Set to `d` (days), `w` (weeks), `m` (months) or `y` (years) to indicate how often it will repeat."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    3.  `LocalDateTime originalDateAndTime`: Set to be the event’s current Date and Time and will not change so that we can keep track of "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        the original Date and Time for other usages later."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    4.  `int periodCounter`: Set to 0 at the start, but increases periodically. It will keep track of how many times `numOfPeriods` with "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        type `typeOfPeriod` has passed.  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        For example, if `numofPeriod` is `2`, `typeOfPeriod` is `d` and 6 days has passed since `originalDateAndTime`, then "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        `periodCounter` will be 3."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    5. `LocalDateTime nextDateAndTime`: Not initialized initially, but gets updated every time `updateDate()` is called. This is used to"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     keep track of the event\u0027s next date and time so that it could be utilized in other areas, such as `list upcoming events` for corner"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     cases. For example, a repeating event that occurs today but we have past its time (thus will not appear in `list upcoming events` as"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "e0309556"
        },
        "content": "      the event has past and its date will not be updated yet since it is still today) but should appear as it will repeat into the future."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   With this implementation in mind, every time the app is launched, after `load()` method in `Storage` class is called, the app will"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    call a method `updateEventDate()` which will iterate through every task in the list and calls `RepeatEvent#updateDate()` if the task is"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    of class `RepeatEvent` and its date is in the past. The method will update the dates of the tasks using `originalDateAndTime` and also "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    `periodCounter` to accurately update the starting date and time of the `RepeatEvent` so that it reflects the closest possible future"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    date if today is not possible. (More information on how date and time is updated is given below)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    \u003e **NOTE**: Using `originalDateAndTime` instead of the recorded dead and time of the task helps to circumvent a potential bug concerning"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     the last few dates of a month. For example, given 31st Jan 2020, adding 1 month to it using the LocalDateTime Java API,"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     we will get 29th Feb 2020. Then adding another month, we will get 29th March 2020 instead of 31st March 2020."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    \u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    \u003e However by using `originalDateAndTime`, we must also keep track of how much time has past to accurately and quickly obtain the correct"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    next date and time. Hence we also utilize `periodCounter` to count how many `numOfPeriods` with type `typeOfPeriod` has passed."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   To users, apart from minor differences such as the icon and listing of `RepeatEvent` shows how often it is being repeated, there will be"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "e0309556"
        },
        "content": " no other noticeable difference between an `Event` and a `RepeatEvent`. The implementation of `RepeatEvent` is transparent to the users and "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "e0309556"
        },
        "content": "they can only add or edit `Event` or `Assignment` and would appear as if there are only 2 type of tasks."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.3 How date and time is updated in `RepeatEvent#updateEvent()`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "e0309556"
        },
        "content": "There are 2 ways an event\u0027s date and time is updated. "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0309556"
        },
        "content": "1. When a `RepeatCommand` is created to convert an `Event` object to `RepeatEvent` object in `setRepeat()` method under Step 3 of"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "e0309556"
        },
        "content": " `RepeatCommand`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "e0309556"
        },
        "content": "2. When a user starts up ATAS with `RepeatEvent` object in its `TaskList`, `Atas#updateEventDate()` will be called. It will then"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "e0309556"
        },
        "content": " call `updateEvent()` for each `RepeatEvent` objects and its date will be updated if it is in the past."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "e0309556"
        },
        "content": " "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-  `updateEvent()` solely compares dates. "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- It will loop until `startDate` (which is the `RepeatEvent` object\u0027s stated `startDateAndTime.toLocalDate()`) is equal to or"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  greater than the current date. With each loop, it will simply add `numOfPeriod` of days, months or years using the methods"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   provided in `LocalDateTime` API of Java to `startDate`. `periodCounter` will also increase by one per iteration. "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- At the end of the loop, we add `numOfPeriod` * `periodCounter` of days, months or years to `originalDateAndTime` to get our"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "e0309556"
        },
        "content": " `startDateAndTime`. Similarly, we add the same amount to the `endDateAndTime`. \u003cbr/\u003e "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  Then we add 1 more `numOfPeriod` of days, months or years to `startDateAndTime` to get our `nextDateAndTime`."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.4. Design Considerations"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   Allowing only tasks that are `Event` to be repeated. As stated in our UG, an event is a task that you plan to do at a particular date"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    and time.  "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        We feel that given the context of university students, it makes little sense for most assignments to repeat. However, it "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        makes sense for events to repeat since many events actually occur on a regular basis."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternative Considered:  "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Allowing all tasks to be repeatable."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Pros: Allow more flexibility for the user to set which tasks they want to repeat, regardless of task type."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Cons: Memory wastage as additional variables are set for repeating tasks. In the case of minimal assignments being repeated, the space is wasted."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   Allowing an `Event` to repeat for any period by using `numOfPeriod` and `typeOfPeriod`."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        It provides great flexibility in allowing an event to repeat for any desired amount of time. For example, some classes occur every 2 weeks. Some events may happen every 10 days or any x period."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternative Considered:  "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Removing `numOfPeriod` and fixing it to just 4 types of recurrence."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Pros: It would simplify usability and implementation since there will only be 4 options to choose from."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            -   Cons: It would reduce the usability for the 2 examples provided above as users would not be able to make events repeat every 2 weeks or 10 days, forcing them to have to manually type in the same event for as many times as it will occur if they wish to still keep track of that event."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Keeping `RepeatEvent` as a single entity within the list and not repeatedly adding new tasks with progressive dates when `RepeatCommand` is used."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        It allows the repeated events to be easily removed or un-repeated as a there will only be a single `RepeatEvent` present in the list."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        However, this means that past instances of that event will not be kept and we feel that it is acceptable as the past events are not "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        nearly as important as future events for a time management app."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternative considered:  "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Repeatedly add new events with changes in dates for a fixed amount when repeat command is used."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            -   Pros: It will be simpler to implement and test if repeating events can be treated like any other events as coupling will be"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "e0309556"
        },
        "content": "             lower compared to current implementation."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            -   Cons: Deleting a repeating event would be difficult as there would be multiple entries to delete. It will also flood "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            the user’s list and increase the size of the local file that stores the `TaskList`."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.4 Future Enhancements"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "e0309556"
        },
        "content": "A list of possible future enhancements and implementations are provided below as ways to further enhance the user\u0027s experience with ATAS."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Allow users to add `RepeatEvent` directly instead of getting an event to repeat."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    - Possible Implementation: "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        1. Create new `RepeatEventCommand` class similar to `AssignmentCommand` and `EventCommand`. Then edit `Parser` class"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "e0309556"
        },
        "content": "           to allow user to create an `RepeatEvent` from command line itself. \u003cbr/\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "e0309556"
        },
        "content": "           \u003e **Note**: It is possible to reuse `EventCommand` and `RepeatCommand` current implementations for the new class but will "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "e0309556"
        },
        "content": "           increase coupling as it reuses code from the 2 classes."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "e0309556"
        },
        "content": "      "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Allow users to keep track of past instances of repeated events for users to be able to reflect on how much time was spent on past"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "e0309556"
        },
        "content": " instances of the repeated event."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    - Possible Implementation:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        1. Store past events in current/another local file that could be retrieved later on by the calendar or the app."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Allow users to find repeated events on `searchd` commands."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    - Possible Implementation: "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        1. Keep an array of future dates so that that array could be utilized by `searchd` commands if the task is an instance of"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "e0309556"
        },
        "content": "         `RepeatEvent`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "joelczk"
        },
        "content": "         "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "joelczk"
        },
        "content": "         "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.5. Edit Task Feature"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.5.1. Implementation"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `EditCommand` class extends the `Command` class by providing functions to edit specific tasks in the list of **ATAS**."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Given below is an example usage scenario of the `edit` command."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The user types in `edit 1`. The `parseCommand()` method of the `Parser` class is called to obtain `edit` which is the type of command the user is entering."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Warning**:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e An `IncorrectCommand` class will be returned and an `UNKNOWN_COMMAND_ERROR` string from the `Messages` class will be passed into the constructor of that class if the command supplied was invalid."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `parseCommand()` method subsequently calls the `prepareEditCommand()` method inside the same `Parser` class. This method splits the `fullCommand` string parameters into 2 tokens. The integer `1` will be obtained as the **Index** of the task specified in the list. This method returns a new instance of the `EditCommand` class, passing the integer `1` as the parameter."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Warning**:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e An `IncorrectCommand` class will be returned and a `NUM_FORMAT_ERROR` string from the `Messages` class will be passed into the constructor of that class if the number supplied was not an **integer**. \u003cbr/\u003e "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e An `IncorrectCommand` class will be returned and a `INCORRECT_ARGUMENT_ERROR` string from the `Messages` class will be passed into the constructor of that class if there are no task index supplied by the user.  "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A new instance of the `EditCommand` class is returned to the main method of **ATAS** with parameter `1` as described above. The `execute()` method of the `EditCommand` class is now called."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `execute()` method in the `EditCommand` class first gets an input from the user on the details of the edited task."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Tip**:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Assignment Command Format: `assignment n/[NAME] m/[MODULE] d/DD/MM/YY HHmm c/[COMMENTS]` \u003cbr/\u003e "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e Event Command Format: `event n/[NAME] l/[LOCATION] d/DD/MM/YY HHmm - HHmm c/[COMMENTS]`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 5**  "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "joelczk"
        },
        "content": "If the user supplies an `assignment` command, the `editAssignment()` method will be invoked. This method extracts the `assignmentName`, `moduleName`, `dateTime` and `comments` string to return a new instance of the `Assignment` class.  "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "joelczk"
        },
        "content": "If the user supplies an `event` command, the `editEvent()` method will be invoked. This method extracts the `eventName`, `location`, `startDateTime`, `endDateTime` and `comments` string to return a new instance of the `Event` class."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Afterwards, the task will be checked to see whether it is a `RepeatEvent` task type. If it is not, it will proceed to **Step 6**."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jichngan"
        },
        "content": "If it is a `RepeatEvent` task, the edited task as well as the task to be edited is passed to a `editRepeatEvent` method to edit the repeated task. "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jichngan"
        },
        "content": "In the `editRepeatEvent` method, the `numOfPeriod`, `typeOfPeriod`, `originalDateAndTime` and `periodCounter` will be extracted to be passed into creating a new `RepeatEvent` task. "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 6**  "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "joelczk"
        },
        "content": "This newly instanced class (either `Assignment` or `Event`) will be passed into the method `editTask()` of the `TaskList` class. The `editTask()` method of the `TaskList` class uses Java’s `ArrayList` `set()` method to replace the task."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 7**  "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Finally, a `CommandResult` class is returned with `EDIT_SUCCESS_MESSAGE` passed as the parameter to the constructor of that class."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The following sequence diagram summarises what happens when the `EditCommand` class is executed."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jichngan"
        },
        "content": "![EditCommand\\_SequenceDiagram.png](images/EditCommand_MainSequence.png)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jichngan"
        },
        "content": "The following sequence diagram shows the checking of `RepeatEvent` task type."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jichngan"
        },
        "content": "![EditCommand\\_Ref.png](images/EditCommand_Ref.png)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.5.2. Design Considerations"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Placing invocation of new `Assignment` and `Event` class in `EditCommand` class"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        The `execute()` method of `EditCommand` class has to use the `Ui` class parsed as one of the parameters to get input from user on new details of the task. The new input captured will be then passed to the `editAssignment()` or `editEvent()` method in the `EditCommand` class."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternatives Considered:  "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        The `editAssignment()` and `editEvent()` methods can be placed in the `Parser` class and called in the `prepareEditCommand` method of that class."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Using Java’s `ArrayList#set()` method"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        When a task is selected to be edited, it is logical for the index of the task to not change as the task is being edited. Therefore, the `set()` method of `ArrayList` is used to replace the edited task with the old task."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternatives Considered:  "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Use the available `add` and `delete` methods, the new task is added into the list and the old task is deleted. However, this is not chosen as it is not intuitive for the user’s task index to shift after editing the task."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.6. View Calendar feature"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "joelczk"
        },
        "content": "![Sample output of Calendar Command](images/calendar2.png)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.6.1. Implementation"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `CalendarCommand` class extends the `Command` class with methods to implement the necessary pre-processing to display an overview of tasks in the given date. The following sequence diagram outlines an example execution of `CalendarCommand` when it is called and the interaction it has with the relevant components."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "joelczk"
        },
        "content": "![Interaction of CalendarCommand and the various major components](images/calendar-diagram.png)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "In particular, the diagram below shows the explicit execution flow that `buildMonthCalendar()` method of the `CalendarCommand` takes."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "![Explicit execution flow of CalendarCommand](images/addMonthlyCalendar.png)"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Given below is an example usage of the `calendar` command. The step by step execution is shown in the sequence diagram above."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "The users enters the command `calendar d/05/20`. This is captured by the `Ui` component and is subsequently parsed by the `Parser` component that the main component calls."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `Parser` will construct a `CalendarCommand` object with the `LocalDate` provided by the user input."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e **Note**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e An `IncorrectCommand` object will be constructed with its specific error message instead according to the error encountered. This can be in the form of no arguments provided or parser fails to parse the date provided."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `execute()` method in the `CalendarCommand` is then called by the `Atas` class."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The method manages all pre-processing to get the details needed to formulate the calendar. Details include details of tasks that fall within the given month, and the details of the month itself. **The pre-processing work is listed in sequential order below:**  "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Calibrates an instance of `Calendar` of the `Java.util` class with the provided `LocalDate` and obtain all necessary information about the `Calendar` month."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Obtains all `Task` details that falls within the range of the month. This is performed through calling the `getTasksByRange()` method of the `TaskList` class."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Duplicates all `RepeatEvent` that is returned from the method above to obtain an `ArrayList` of all `Task` objects that exist within the month."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Appends the `Calendar` title and legend to the resultant string that contains the calendar view."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   This is done through separate method calls to `addCalendarTitle()` and `addCalendarLegend()` respectively."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Appends the main body of the `Calendar` according to the `ArrayList` of `Task` obtained earlier through a method call to `addCalendarBody()`."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Constructs a `CommandResult` object with the resultant string that contains the calendar view and returns this object."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e **Note**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "\u003e Since an `Event` can be set to repeat, but is stored within the `TaskList` as a single `Task` object, duplicating a repeat `Event` allows us to obtain the full list of `Tasks` that might occur within the month as separate Task. The decision is further explained in the [design considerations](#362-design-considerations) subsection."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `CommandResult` object is subsequently passed to `Ui` component which obtains and prints the `Calendar` view by calling `showToUser()` method of the `Ui` component."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.6.2. Design Considerations"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Duplicating `Task` objects instead of keeping the `RepeatEvent` as a single entity like how it is stored in the `TaskList`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        By duplicating the `RepeatEvent`, it allows better abstraction by removing the need to constantly differentiate between a normal `Task` and a repeating `Task` during the construction of the final Calendar View. The current implementation allows the `addCalendarBody()` method to obtain all possible `Task` objects, with each `RepeatEvent` being stored as a separate `Task` within the `ArrayList` of `Task` objects. Each `Task` can be removed from the `ArrayList` after it has been printed which makes the task simpler. "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternatives considered:  "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Allowing `TaskList` to accept `Task` with duplicated details. However, this will in turn further complicate design when performing other features that deal with a singular `Task` such as `delete`, `search`, `done`. (See [Section 3.4.3, RepeatEvent design considerations](#343-design-considerations))"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Truncation of `Task` details instead of extending column size"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        This keeps the calendar compact such that the command line application can be viewed as a smaller window as opposed to the taking up the entire screen. Since row size is also extendable, extending column size independently from row size will destroy the integrity of a traditional calendar box view."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Also, there are other features that can be used in conjunction with the `Calendar` to allow users to obtain more information of the `Task` such as `SearchCommand` and `ListCommand`."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternative Considered:  "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Wrapping of `Task` details to display its full details. This is not feasible as this further increases the need for number of rows. As mentioned, we would like to keep the integrity and view of a traditional calendar and this does the opposite of that."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Limiting the number of `Task` objects that can be displayed for a particular calendar date"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale:  "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Limiting the number of task might misrepresent the list of `Task` a user has for any particular date if there are more tasks than available slots on the calendar date. To solve the issue of misrepresentation, we decided to replace the last `Task` slot of each `Calendar` date with an indicator to indicate there are tasks not shown if there are indeed tasks left out due to the constraints that is the lack of `Calendar` rows."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternative Considered:  "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Expanding number of `Calendar` rows. This will require the need to increase the number of `Calendar` columns to preserve the integrity of a traditional calendar view. However, this also is infeasible as our goal is to keep the calendar compact such that it does not need to fill the screen."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "#### 3.6.3. Future Enhancements"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "- Future enhancement to the Calendar feature of **ATAS** is inclusive but not limited to the following:"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    - Allowing users the ability to dictate their dimensions of the calendar view so that they are able to customise the size to their preference. Current implementation involves hardcoded dimensions that might not meet every users\u0027 requirements. "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 3.7. Storage"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "#### 3.7.1. Implementation"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The `Storage` class uses the `encode()` and `decode()` method of each Task subclass to save and load Task data in a file on the user’s computer.  "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Every time a `Command` is executed, the `Storage#save()` method is run to update the save file."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.7.2. Saving the current state of **ATAS** with `Storage#save()`:  "
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "joelczk"
        },
        "content": "For each `Task` in the `TaskList`, `Task#encode()` is called, and the result is appended to a save string. Each encoded `Task` is separated by a newline."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "joelczk"
        },
        "content": "The save string is written into the specified save file, which will be created if it does not already exist."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.7.3. Loading previously saved `TaskList` data into **ATAS** with `Storage#load()`:  "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 1**  "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Read each line from the save file one by one. Each line corresponds to an encoded `Task`."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 2**  "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "joelczk"
        },
        "content": "For each line, determine its `Task` type, and call the static `decode()` method from the corresponding class."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 3**  "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Add each decoded `Task` into a `TaskList`."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Step 4**  "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "joelczk"
        },
        "content": "When all lines in the save file have been decoded, return the `TaskList`."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.7.4. Design Considerations"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Saving the `TaskList` after every `Command` executed  "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Rationale  "
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        There will be reduced coupling as `Storage#save()` is always called regardless of what `Command` is executed. However, unnecessary saves will be made as not all `Command` executions modify the `TaskList`."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Alternatives Considered  "
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        `Storage#save()` could be called only after `Command` executions that modify the `TaskList`, so that no unnecessary saves are made. However, this method increases coupling as either `Storage` will have to know what `Command` was executed, or `Storage#save()` has to be called in `Command#execute()`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Conclusion  "
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        As the `TaskList` is expected to be small for most users, the drop in performance due to unnecessary saves is negligible. The first method is chosen to make the code easier to maintain."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "e0309556"
        },
        "content": "## 4. Testing"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Testing is required to ensure that the code written is accurate, bug free (at least in the tests designed) and do not cause any existing"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "e0309556"
        },
        "content": " feature to fail. For ATAS, there are 2 ways to run automated testing."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "e0309556"
        },
        "content": " "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 4.1. Using IntelliJ JUnit Tests"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   To run all test, right-click on `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   To run all test using Gradle: Open a console and run the command `gradlew clean test`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    \u003e **Note**: For more tips on how to use gradle commands, look at "
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    [Gradle Tutorial](https://github.com/AY1920S2-CS2113T-M16-1/tp/blob/master/tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   For individual test, navigate to folder `src/test/java`. From there, you can right-click any of the test **package**, **class** or a"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    single test and choose `Run \u0027TEST\u0027` to run the corresponding test."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 4.2. Using Input-Output Tests"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   Open a console, navigate to the `text-ui-test` folder and run the `runtest.bat` (Windows) or `runtest.sh` (Mac / Linux) script. \u003cbr/\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    This will run ATAS with the commands written in `input.txt` and compare its output with the text file `EXPECTED.txt`. "
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "## 5. DevOps"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 5.1 Build Automation"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "We use Gradle for tasks related to build automation, such as running tests, and checking code for style compliance.  "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "To run all build-related tasks: "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "1. Open a terminal in the project\u0027s root directory"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "2. Run the command:"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Windows: `gradlew build`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Mac/Linux: `./gradlew build`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "3. A message stating `BUILD SUCCESSFUL` will be shown in the terminal if all tasks were run successfully."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "4. Otherwise, use the error report provided to resolve the issue before trying again."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 5.2 Continuous Integration"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "We use Github Actions for continuous integration. No setup will be required for users who fork from the main **ATAS** repository."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Whenever you create a pull request to the main repository for **ATAS**, various checks will automatically be executed on your pull request."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* If any checks fail, click on it to view the cause of the error, and fix it in your branch before pushing it again."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Ensure that all checks pass before merging your pull request."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 5.3 Coverage Reporting"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "We use the IntelliJ IDEA\u0027s coverage analysis tool for coverage reporting."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "A tutorial on how to install and use this tool can be found [here](https://www.youtube.com/watch?v\u003dyNYzZvyA2ik)."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 5.4 Making a Release"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "To make a new release:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "1. Update the shadowJar `archiveVersion` in the build.gradle file"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "2. Generate the JAR file using Gradle by opening a terminal in the project\u0027s root directory, and run the command:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Windows: `gradlew clean shadowJar`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Mac/Linux: `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "3. Find the JAR file in the `build/libs` directory."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "4. Tag the repository with the new version number (e.g. `v2.1`)."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "5. Create a new release using Github and upload the JAR file found in step 3."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "## 6. Appendices"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 6.1. Appendix A: Product Scope"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Target user profile:  "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "-   university students who require the use of computer device often and is reasonably comfortable with the command line interface"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "-   desire to efficiently organise, manage, view and record their day to day events and tasks through an application "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "-   has a need to manage large scale of university assignments and / or university / personal events that might occur on a regular basis"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   prefers desktop applications over other types of applications"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   prefers using a command line interface over a graphical user interface"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "-   able to type fast and prefers typing over mouse input"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "-   prefer one shot commands over multi-step commands"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "**Value proposition:** manage tasks faster and with greater efficiency than a typical GUI based task manager application"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 6.2. Appendix B: User Stories"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"20%\" /\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"20%\" /\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"20%\" /\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"20%\" /\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"20%\" /\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eS/N\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eVersion\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eAs a …\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eI can…\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSo that I …\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e01\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eAdd assignments, including assignment details\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan keep track of assignment details\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e02\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eAdd events, including event details\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan keep track of event details\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e03\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eHave a daily view of tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan see what is important for today only\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e04\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eHave a weekly view of tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan better plan my time to meet deadlines\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e05\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eList all the tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan have an overview of tasks and mark individual tasks as done or delete specific tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e06\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eView all incomplete assignments\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan know the progress of my work\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e07\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eView all upcoming events\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan see which period of time I will be busy and plan my time accordingly\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e08\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eMark an assignment as completed\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan easily view which assignments I have yet to complete\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e09\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDelete tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDo not clog up the calendar\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eClear all tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan clear all tasks with a single command\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e11\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV1.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eClear all completed tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan remove all completed tasks from the app in a single command\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e12\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eEdit details of assignment\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDo not have to delete and create a new assignment instead\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e13\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eEdit details of event\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDo not have to delete and create a new event instead\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e14\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eLong-term User\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eHave my data persist between sessions\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDo not need to close the application when I am not using it\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e15\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eFrequent User\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSee the tasks I have for the day when the app starts up\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan quickly check my schedule for the day\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e16\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser with many tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSearch for an event by name\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDo not have to scroll through a long list to find its details\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e17\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser with many tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSearch for an assignment by name or module\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDo not have to scroll through a long list to find its details\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e18\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser with fixed schedule\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSet my events as repeated events\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eDo not have to manually create many events with the same details\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e19\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eBusy user\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSet an ending time for my events\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan see clearly when I am free in my schedule\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e20\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eV2.0\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSet my tasks in calendar view\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCan have an easy-to-read, sorted overview of my upcoming tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 6.3. Appendix C: Use Cases"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 6.4. Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  App should work on Windows, Linux, Unix, OS-X operating systems if Java `11` has been installed."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  User with above average typing speed for English text (not coding) should be able to utilize the app to manage tasks more efficiently compared to using a mouse."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "3.  App should run without any noticeable loss in performance when about 100 tasks are present in the user\u0027s list."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "4.  The user interface should be intuitive enough for users who are not IT-savvy but understands the basics of a task managing application."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "5.  Data inputted in a session should be persistent and carry forward to the next session of use. "
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "6.  Saved data files should be portable across different instance of application on different devices, meaning one can resume a saved session on another device if he so chooses to. Moving from one OS to another does not create any issues either."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "7.  Application should not crash, application should always recover from error gracefully with an error message. "
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "8.  Response in the form of command line output should be intuitive, quick and respond specifically to the user\u0027s intent or instructions"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "9.  Documentation in the form of User Guide and Developer Guide should be clear, concise and understandable to their respective target audience. "
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "11. Source code are to remain open source such that anyone can make editions to create their own rendition of the application. "
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "12. Saved data files should not be tampered with by the user unless they understand the methods to make changes. Application should recover from unreadable tampered data files by overwriting the entire file with new session data while old session data is lost.  "
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "13. Application should be scalable to handle increased functionality at any instance. "
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 6.5 Appendix E: Documentation"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "joelczk"
        },
        "content": "#### 6.5.1 Introduction"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "joelczk"
        },
        "content": "We use MarkDown for writing documentation."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e **Note**: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e We choose Markdown over asciidoc, although asciidoc provides more flexibility in formatting because Markdown is easier "
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003eto master for new developers, and also because it is easier to be deployed on GitHub Pages\u003cbr/\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "joelczk"
        },
        "content": "#### 6.5.2 Editing documentation"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "joelczk"
        },
        "content": "See [here](https://www.markdownguide.org/getting-started/) to learn the basic syntax for Markdown."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "joelczk"
        },
        "content": "To preview your changes to your Markdown documents, you could download the Markdown plugin for IntelliJ, that allows "
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "joelczk"
        },
        "content": "you to preview your changes real-time. Alternatively, you could push the changes to `GitHub` and view the changes from "
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "joelczk"
        },
        "content": "your commits. "
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "joelczk"
        },
        "content": "#### 6.5.3 Editing diagrams"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "joelczk"
        },
        "content": "See [here](https://www.lucidchart.com/blog/getting-started-in-lucidchart) to learn how to use LucidCharts to draw your "
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "joelczk"
        },
        "content": "own diagrams."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "joelczk"
        },
        "content": "#### 6.5.4. Publishing Documentation"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  Push the new documents to your own repository on github"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  Make a pull request to [here](https://github.com/AY1920S2-CS2113T-M16-1/tp/pulls) to request for changes to be made to the "
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "joelczk"
        },
        "content": "documentation. (Click [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request))"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "joelczk"
        },
        "content": "to learn how to make a pull request."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "joelczk"
        },
        "content": "3. The moderators will review your change and make a decision if they want to use your changes"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 5. Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "joelczk"
        },
        "content": "1.  Click [here](https://ay1920s2-cs2113t-m16-1.github.io/tp/) to find the desired guides that you wish to convert to PDF format."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  For Google Chrome users:"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Go the `settings` icon and click on `print`"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    ![Print Image](images/print.jpg)"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   In the print screen, choose the option `save as pdf` and click `save`"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    ![Save as PDF](images/savepdf.jpg)"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    "
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "joelczk"
        },
        "content": "3.  For Windows users:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   Go the `settings` icon and click on `print`"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    ![Print Image](images/windowsprint.jpg)"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   In the print screen, choose the option `Microsoft Print to PDF` and click `print`"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    ![Save as PDF](images/windowspdf.jpg)"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jichngan"
        },
        "content": "### 6.6 Appendix F: Instructions for Manual Testing "
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.1 Launch and Shutdown "
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Launch **ATAS**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jichngan"
        },
        "content": "* Download the latest release of **ATAS** [here](https://github.com/AY1920S2-CS2113T-M16-1/tp/releases)"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "jichngan"
        },
        "content": "* Using Terminal, navigate to folder containing **ATAS**"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "jichngan"
        },
        "content": "* Maximise the screen size of terminal"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case**: `java -jar atas-2.0.0.jar`"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: **ATAS** startup screen is displayed"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Exit **ATAS** "
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case**: `exit`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: **ATAS** program terminates"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.2 Adding `assignment` task type"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisites**: Issue `list` command, there are no tasks in the list"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `assignment n/assignment one m/cs2113 d/01/05/20 1200 c/No comments`"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: A success message of adding the `assignment` task will be shown. Entering a `list` command will show 1 "
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "jichngan"
        },
        "content": "task in the list. "
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `assignment n/assignment one m/cs2113 d/01/05/20 1200 c/No comments` after running the `assignment` command as stated above"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating that task already exist will be shown. Issuing a `list` command will only"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "jichngan"
        },
        "content": "show 1 `assignment` task in the list."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 3**: `assignment n/assignment two`"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating that a wrong format of `assignment` command is issued. `list` command will "
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "jichngan"
        },
        "content": "not show `assignment two` on the list. "
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**: `assignment n/assignment three m/cs2113 d/01/05/20 12:00 c/No comment`"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating a wrong format of `assignment` command is issued. This is due to `:` in the"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jichngan"
        },
        "content": "time entered. "
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 5**: `assignment n/assignment four m/cs2113 d/40/40/20 1200 c/No comment`"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating a wrong format of date or invalid date is issued. `list` command will not"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jichngan"
        },
        "content": "show `assignment four` on the list. "
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisites**: Prepare **today\u0027s** date in `DD/MM/YY` format to enter into `d/`"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 6**: "
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. `assignment n/assignment three m/cs2113 d/DD/MM/YY 1200 c/No comment` "
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. `exit`"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jichngan"
        },
        "content": "3. `java -jar atas-2.0.0.jar`"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: `assignment three` will be displayed when **ATAS** is started."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.3 Adding `event` task type"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `event n/meeting one l/com2 d/01/05/20 1200 - 1400 c/No comment`"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: A success message of adding the `event` task will be shown. Entering a `list` command will show the "
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jichngan"
        },
        "content": "`meeting one` on the list. "
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `event n/meeting one l/com2 d/01/05/20 1200 - 1400 c/No comment` after running the `event` command as stated above"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating that task already exist will be shown. Issuing a `list` command will not show"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jichngan"
        },
        "content": "another `meeting one` on the list. "
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 3**: `event n/meeting two`"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating that a wrong format of `event` command is issued. `list` command will "
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jichngan"
        },
        "content": "not show `meeting two` on the list."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**: `event n/meeting three l/com2 d/01/05/20 12:00-1300 c/none`"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating a wrong format of `event` command is issued. This is due to `:` in the"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "jichngan"
        },
        "content": "time entered."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 5**: `event n/meeting three l/com2 d/40/40/20 1200-1300 c/none`"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating a wrong format of date or invalid date is issued. `list` command will not"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jichngan"
        },
        "content": "show `meeting three` on the list."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 6**: `event n/meeting four l/com2 d/01/05/20 1300-1200 c/none`"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating that the end time should come after the start time. `list` command will not"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jichngan"
        },
        "content": "show `meeting four` on the list. "
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisites**: Prepare **today\u0027s** date in `DD/MM/YY` format to enter into `d/`"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 7**: "
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. `event n/meeting four l/com2 d/DD/MM/YY 1200-1300 c/None` "
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. `exit`"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "jichngan"
        },
        "content": "3. `java -jar atas-2.0.0.jar`"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: `meeting four` will be displayed when **ATAS** is started."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.4 Setting an `event` task to `repeat`"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: "
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List of tasks contain both `assignment` and `event` tasks "
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. In this test case, `event` task is listed in index `1` in the list"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jichngan"
        },
        "content": "3. In this test case, `assignment` task is listed in index `2` in the list"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Index of tasks may vary depending on order of adding task. \u003cbr/\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e [A] represents an `assignment` task type. \u003cbr/\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e [E] represents an `event` task type."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `repeat id/1 p/3d`"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message indicating that `event` message will repeat every `3 days`. Issuing a `list` command will"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "jichngan"
        },
        "content": "show that event changed to a `repeat event` task type with `[R]` to indicate repeat and `[3d]` to indicate `3 days`."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `repeat id/1 p/0`"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message indicating that `repeat event` will no longer repeat. Issuing a `list` command will "
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jichngan"
        },
        "content": "show that `repeat event` is changed to `event` task type. "
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 3**: `repeat id/1 p/3a`"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating wrong format of `repeat` command is entered. "
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**: `repeat id/2 p/3d`"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating that chosen task index is an `assignment` task. `repeat` command only works"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jichngan"
        },
        "content": "for `event` task types. "
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: List of task is not more than 10"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 5**: `repeat id/20 p/3d`"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating the valid range of task index to enter will be displayed. "
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.5 Listing Tasks"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: List is empty"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `list`"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `list incomplete assignments`"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 3**: `list upcoming events`"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**: `list today`"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 5**: `list week`"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: A message indicating that no tasks were found on the list. "
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: "
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List should contain several `assignment`, `event` and `repeat event` task types"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. List should contain several `assignment`, `event` and `repeat event` task types occurring on the current date "
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jichngan"
        },
        "content": "3. List should contain several `event` and `repeat event` task types that are occurring in the next week"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jichngan"
        },
        "content": "4. List should contain several `assignment` task type that are incomplete"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 6**: `list`"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: All tasks that are entered into **ATAS** will be shown in the order in which they are entered. "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e This command lists all tasks on the list"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 7**: `list today`"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: All tasks that are occurring on current date will be displayed."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 8**: `list week`"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: All tasks that are occurring within the current date and one week from current date will be displayed."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 9**: `list upcoming events`"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: All `event` and `repeat event` task types that are occurring from the current date and time will be displayed."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 10**: `list incomplete assignments`"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: All `assignment` task types that are incomplete will be displayed."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.6 Editing Tasks "
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: "
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List should contain several `assignment`, `event` and `repeat event` task types"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. In this test case, it is assumed that task list has no more than 100 tasks"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "jichngan"
        },
        "content": "3. It is assumed that index `1` contains an `assignment` task type"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jichngan"
        },
        "content": "4. It is assumed that index `2` contains an `event` task type"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jichngan"
        },
        "content": "5. It is assumed that index `3` contains a `repeat event` task type"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: "
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. `edit 1`"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. `assignment n/edited assignment one m/cs2113 d/01/05/20 1200 c/No comments` "
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message indicating that `assignment` task is successfully edited is displayed. `list` command"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jichngan"
        },
        "content": "shows the newly edited `assignment` task."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**:"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. `edit 2`"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. `event n/edited meeting l/com2 d/01/05/20 1200 - 1400 c/No comment`"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message indicating that `event` task is successfully edited is displayed. `list` command shows"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jichngan"
        },
        "content": "the newly edited `event` task. "
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Any error in entering `assignment` and `event` types will result in same error as adding `assignment` or `event` task type."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 3**: "
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. `edit 3`"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. `event n/edited repeat meeting l/com2 d/01/05/20 1200 - 1400 c/No comment`"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message indicating that `repeat event` task is successfully edited is displayed. `list` command shows"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jichngan"
        },
        "content": "the newly edited `repeat event` task. Task will retain `[R]` to indicate that it is still a `repeat event` task."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**: `edit 200`"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating the range of valid task numbers. "
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.7 Marking Task as Done"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: "
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List should contain several `assignment`, `event` and `repeat event` task types"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. In this test case, it is assumed that task list has no more than 100 tasks"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `done 1`"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: A success message indicating the name of task that is marked done will be displayed. Issuing a `list` "
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "jichngan"
        },
        "content": "command shows that the task marked done will be indicated with `[/]`."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `done 200`"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating the range of valid task numbers. "
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.8 Deleting Task"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: "
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List should contain several `assignment`, `event` and `repeat event` task types"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. In this test case, it is assumed that task list has no more than 100 tasks"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `delete 1`"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: A success message indicating the name of task that is deleted will be displayed. Issuing a `list` "
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jichngan"
        },
        "content": "command shows that the task is deleted. "
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `delete 200`"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating the range of valid task numbers."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.9 Clearing Task"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: "
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List should contain several `assignment`, `event` and `repeat event` task types"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. In this test case, it is assumed that task list has no more than 100 tasks"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jichngan"
        },
        "content": "3. List should contain several `assignment`, `event` and `repeat event` task types that are marked as done"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `clear done`"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: A success message indicating that all done tasks are cleared will be displayed. Issuing a `list` command"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jichngan"
        },
        "content": "shows that there are no done tasks in the list. All tasks should have a `[x]` indicator. "
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: "
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. Issued after above command"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. `clear done`"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating that there are no done tasks at the moment is displayed. "
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 3**: `clear all`"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: A success message indicating that all tasks are cleared will be displayed. Issuing a `list` command "
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "jichngan"
        },
        "content": "gives a no task is found error because there are no tasks on the list. "
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**:"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. Issued after above command"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. `clear all`"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message indicating there are no tasks at the moment is displayed. "
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.10 Searching for Tasks"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisite**: "
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List should contain several `assignment`, `event` and `repeat event` task types"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. It is assumed that there is an `assignment` task type named `assignment one` in the list"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "jichngan"
        },
        "content": "3. It is assumed that there is an `assignment` task type scheduled on the `01/05/20` in the list"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "jichngan"
        },
        "content": "4. It is assumed that there is an `event` task type named `meeting one` in the list"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "jichngan"
        },
        "content": "5. It is assumed that there is an `event` task type scheduled on the `01/05/20` in the list"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `search t/assignment n/one`"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message showing the searched `assignment` task type will be displayed. "
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `search t/event n/one`"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message showing the searched `event` task type will be displayed. "
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Search for tasks is case-insensitive. \u003cbr/\u003e"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e `search t/event n/One` is a valid search"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 3**: `search t/anything n/one`"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Error message displaying invalid search command format will be displayed. "
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**: `search t/assignment n/two`"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message showing that there is no matching task for the search query is shown."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 4**: `searchd t/assignment n/one d/01/05/20`"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message showing the searched `assignment` task type will be displayed."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 5**: `searchd t/event n/one d/01/05/20`"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Success message showing the searched `event` task type will be displayed."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Test Case 6** : `search t/all n/one`"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected Output: Success message showing *all* the tasks matching the search query will be displayed"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Test Case 7** : `searchd t/all n/one d/01/05/20`"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected Output: Success message showing *all* the tasks matching the search query and date will be displayed"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Test Case 8**: `search t/assignment n/one d/02/05/20`"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: An error message showing that there is no matching task for the search query is shown."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "jichngan"
        },
        "content": "#### 6.6.11 Calendar View"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Prerequisites**:"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1. List should contain several `assignment`, `event` and `repeat event` task types"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "jichngan"
        },
        "content": "2. Assume that list is populated with the above task types in the month of May"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 1**: `calendar d/05/20`"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Calendar view of all tasks scheduled in May 2020 will be displayed. "
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "jichngan"
        },
        "content": "**Test Case 2**: `calendar 05/20`"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Expected Output: Error message indicating that incorrect `calendar` command is entered will be displayed."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "e0309556"
        },
        "content": "[Back to Top](#)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 70,
      "joelczk": 761,
      "Keith-JK": 38,
      "e0309556": 166,
      "-": 15,
      "jichngan": 345
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "# ATAS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "ATAS (Amazing Task and Assignment System) is a cross platform Command Line Interface (CLI) program that allows you to track your assignments and events. ATAS is catered for students who want to maximise their productivity and cultivate effective time management habits through a desktop application. ATAS is optimised for users who prefer to work with the CLI."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* [User Guide](https://ay1920s2-cs2113t-m16-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* [Developer Guide](https://ay1920s2-cs2113t-m16-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* [About Us](https://ay1920s2-cs2113t-m16-1.github.io/tp/AboutUs.html)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 2,
      "-": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "# ATAS (Amazing Task and Assignment System) User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": "By: `Team M16-1` Since: `Jan 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Contents:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [What is **ATAS**?](#11-what-is-atas)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [What are the functions of **ATAS**?](#12-what-are-the-functions-of-atas)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [How does **ATAS** solve the problem of our target audience?](#13-how-does-atas-solve-the-problem-of-our-target-audience)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [What is this guide for?](#14-what-is-this-guide-for)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [Setting up](#21-setting-up)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [Usage](#22-usage)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- [Features](#3-features)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Add Assignments: **`assignment`**](#31-add-assignments-assignment)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Add Events: **`event`**](#32-add-events-event)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Repeating Events: **`repeat`**](#33-repeating-events-repeat)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [Set an event to repeat](#331-set-an-event-to-repeat)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [Unset Repeating Event](#332-unset-repeating-event)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [List Tasks: **`list`**](#34-list-tasks-list)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [List All Tasks: **`list`**](#341-list-all-tasks-list)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [List Today’s Tasks: **`list today`**](#342-list-todays-tasks-list-today)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [List Weekly Tasks: **`list week`**](#343-list-weekly-tasks-list-week)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [List Upcoming Events: **`list upcoming events`**](#344-list-upcoming-events-list-upcoming-events)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [List Incomplete Assignments: **`list incomplete assignments`**](#345-list-incomplete-assignments-list-incomplete-assignments)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Edit Tasks: **`edit`**](#35-edit-tasks-edit)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Delete Tasks: **`delete`**](#36-delete-tasks-delete)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Mark Done: **`done`**](#37-mark-done-done)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Clear Tasks: **`clear`**](#38-clear-tasks-clear)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [Clear All Tasks](#381-clear-all-tasks)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    + [Clear All Done Tasks](#382-clear-all-done-tasks)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [Search tasks: **`search`**](#39-search-tasks-search)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    + [Search by Name](#391-search-by-name)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    + [Search by Name and Date](#392-search-by-name-and-date)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  * [Calendar View: **`calendar`**](#310-calendar-view-calendar)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- [Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  * [List of available **ATAS** commands](#41-list-of-available-atas-commands)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "- [FAQ](#5-faq)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 1.1. What is **ATAS**?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**ATAS** (Amazing Task and Assignment System) is a cross platform Command Line Interface (CLI) program that allows you to track your assignments and events. **ATAS** is catered for students who want to maximise their productivity and cultivate effective time management habits through a desktop application. **ATAS** is optimised for users who prefer to work with the CLI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 1.2. What are the functions of **ATAS**?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Besides being able to store your assignment and event details in a text file, **ATAS** allows you to view your assignment deadlines and event dates in a user-friendly calendar format. You can also list down events that are upcoming and assignments that are due in the following week. Furthermore, **ATAS** displays the assignment and event details in an easy-to-read format so that you would not miss out any important details at one glance."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 1.3. How does **ATAS** solve the problem of our target audience?"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "University students often have piles of assignments and events that are difficult to manage and track efficiently. **ATAS** allows students to enter one-liner commands to track these tasks quickly and therefore spend less of their time logging and remembering important dates. Furthermore, students can view their upcoming events and assignments due to manage their time wisely and allocate sufficient time to complete these tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 1.4. What is this guide for?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "This guide aims to show you on how to use **ATAS** by providing examples and step-by-step instructions on all its features. The features can be found in [Section 3. \"Features\"](#3-features) section."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Interested in cultivating a habit of time management and plan your time more effectively? Head on to [Section 2. \"Quick Start\"](#2-quick-start) to get started! Become a more **ATAS** version of yourself today!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.1. Setting up"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "1.  Ensure you have Java 11 or above installed on your computer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    1.  For **Windows** Users:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Download the latest release of **ATAS** [here](https://github.com/AY1920S2-CS2113T-M16-1/tp/releases)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        2.  Open a `cmd` (Command Prompt) window."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        3.  Navigate to the folder containing downloaded jar file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        4.  Run the command `java -jar atas.jar`. You will be greeted with the welcome screen of **ATAS** in a few seconds."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    2.  For **Mac** Users:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        1.  Download the latest release of **ATAS** [here](https://github.com/AY1920S2-CS2113T-M16-1/tp/releases)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        2.  Open up `Terminal`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        3.  Navigate to the directory containing downloaded jar file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        4.  Run the command `java -jar atas.jar`. You will be greeted with the welcome screen of **ATAS** in a few seconds."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 2.2. Usage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": "1.  To use **ATAS**, simply type a valid command into the terminal and press `[Enter]` key  run the command.  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    e.g. Typing `help` command and pressing `[Enter]` key will list the commands present"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "2.  Some example commands you can try to get familiar with **ATAS**:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `help`: Lists the commands that **ATAS** supports."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `assignment n/Assignment One m/CS2113T d/01/01/20 1600 c/Important Assignment`: Adds an assignment called **Assignment one** for the module **CS2113T**. This assignment is due on **01/01/2020 1600** and the comments for this assignment is that it is an **Important Assignment**."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    -   `exit`: Exits **ATAS**."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jichngan"
        },
        "content": "A summary of all the features available in **ATAS** can be found in [Section 4. Command Summary](#41-list-of-available-atas-commands).  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Refer to [Section 3. \"Features\"](#3-features) for the detailed instruction of the various commands of **ATAS**."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Words in UPPER\\_CASE and wrapped in \\[square brackets\\] are parameters to be supplied by the user.  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Example: In `assignment n/[NAME]`, `NAME` is an input given by user that can be used as `assignment n/user guide draft`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jichngan"
        },
        "content": "-   The INDEX that is used for various commands is a number used to identify a task within the list. The INDEX of a task is shown on the left of each task whenever a `list` command is used. For more information about `list` commands, refer to [Section 3.4, \"List Tasks: `list`\"](#34-list-tasks-list).   "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Example index of list:  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    ![Task Index Example](images/task_index_example.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "-   Dates supplied by the user must follow the format `DD/MM/YY` unless specified otherwise.  "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    Example: 01/03/20 represents the date 1st March 2020."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jichngan"
        },
        "content": "-   Times supplied by the user must follow the 24h format `HHmm`. \u0027`:`\u0027 is not needed.  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    Example: 0259 represents the time 2:59am, and 2300 represents the time 11:00pm."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   The parameters of a command cannot be reordered.  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Example: For the `assignment` command, typing `assignment n/Finals c/50% m/CS1231 d/30/10/20 1300` will result in an error as the COMMENTS parameter is in the wrong position."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "-   The special characters `|` and `/` cannot be used in the various parameters that you can pass to commands, unless explicitly required by the command\u0027s format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Don’t worry if all of these seems overwhelming. \u003cbr/\u003e "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e There are plenty of examples provided to aid your understanding and learning of **ATAS** commands."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 3.1. Add Assignments: **`assignment`**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "An assignment is a task that you have to complete by a certain deadline, for a particular module.  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can add an assignment to **ATAS**, containing various details."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `assignment n/[NAME] m/[MODULE] d/[DATE] [TIME] c/[COMMENTS]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `NAME` is the name of your assignment."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `MODULE` is the module that your assignment is for."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   `DATE` `TIME` is the deadline of your assignment."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `COMMENTS` will be any other notes relevant to your assignment."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e The new `assignment` added cannot have both the same `NAME` and `MODULE` as another existing `assignment`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example: `assignment n/Final Reflection Draft m/GEQ1000 d/01/04/20 2359 c/Last chance to get feedback!`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Added task:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     [A][X] Final Reflection Draft (by: Wed 01 Apr 2020 23:59 | mod: GEQ1000)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Last chance to get feedback!"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Now you have 1 task in the list!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 3.2. Add Events: **`event`**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "An event is a task that you plan to do at a particular date and time.  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can add an event to **ATAS**, containing various details."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `event n/[NAME] l/[LOCATION] d/[DATE] [START_TIME] - [END_TIME] c/[COMMENTS]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `NAME` is the name of your event."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   `LOCATION` is where your event will take place."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   `DATE` `START_TIME - END_TIME` is the date and time when your event will take place.  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309556"
        },
        "content": "-   `COMMENTS` will be any other notes relevant to your `event`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e The new `event` added cannot have the same `NAME` as another existing `event`.  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e The `event` cannot span multiple days. The ability to create an `event` that lasts over a few days will be coming in a later version of **ATAS**. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example: `event n/Lecture l/NUS LT19 d/25/03/20 0800 - 1000 c/Remember to bring a jacket`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Added task:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     [E][X] Lecture (at: NUS LT19 | Wed 25 Mar 2020 08:00 - 10:00)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Remember to bring a jacket"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Now you have 2 tasks in the list!"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.3. Repeating Events: **`repeat`**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.3.1. Set an event to repeat"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Set an event to repeat indefinitely for every period specified by identifying the period and the event index."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Format: `repeat id/[INDEX] p/[PERIOD_NUM][PERIOD_TYPE]`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Available `[PERIOD_TYPE]`: Day `d`, Week `w`, Month `m`, Year `y` \u003cbr/\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e `INDEX` of task specified has to be an **event** task. \u003cbr/\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Refer to [Section 3.4. List Tasks: `list`](#34-list-tasks-list) for usage on the `list` commands."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Example: `repeat id/6 p/11m`  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0309556"
        },
        "content": "This command will repeat task of index 6 every 11 months."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0309556"
        },
        "content": "[Online Career Fair] will repeat every 11 months."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Repeating an event will cause the event to have the symbol `[R]` instead of `[E]` and its `PERIOD_NUM` and `PERIOD_TYPE` will also"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e be shown in a square bracket beside `notes` section. Below is an example:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e ```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Here are the search results:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e  1.[R][X] Test (at: test | Fri 24 Apr 2020 11:00 - 12:00)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e      [3d]  notes: Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e ```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.3.2. Unset Repeating Event"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Stop a repeating event from continuing to repeat."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Format: `repeat id/[INDEX] p/0`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Tip**: "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e You can think of this as repeating the task every 0 days and hence not repeating!"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Example: `repeat id/6 p/0`  "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0309556"
        },
        "content": "This command will cause task of index 6 to stop repeating."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0309556"
        },
        "content": "[Online Career Fair] will no longer repeat."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e The symbol `[R]` will be replaced by `[E]` and there will not be any symbol beside `notes` section. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Below is an example: "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e ```"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Here are the relevant tasks: "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e  4. [E][X] UG DG peer review (at: Home | Fri 27 Mar 2020 10:00 - 11:35)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e            notes: false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e ```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.4. List Tasks: **`list`**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can view the tasks that you have stored in **ATAS**.  "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Various keywords can be used to only show the tasks you are interested in."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.1 List All Tasks: **`list`**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can view all tasks stored in **ATAS** at once."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Here are the relevant tasks:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  1. [A][X] Final Reflection Draft (by: Wed 01 Apr 2020 23:59 | mod: GEQ1000)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Last chance to get feedback!"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  2. [E][X] Lecture (at: NUS LT19 | Wed 25 Mar 2020 08:00 - 10:00)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  3. [A][/] Assignment 2 (by: Fri 27 Mar 2020 23:59 | mod: CS3235)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Follow submission instructions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  4. [E][X] UG DG peer review (at: Home | Fri 27 Mar 2020 10:00 - 11:35)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  5. [A][X] ATAS v2 (by: Sun 29 Mar 2020 22:00 | mod: CS2113T)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Complete DG draft to get tutor comments"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  6. [E][X] Online Career Fair (at: NUS TalentConnect | Tue 31 Mar 2020 09:00 - 18:00)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  7. [E][X] CS2113T Final Exam (at: TBD | Sat 02 May 2020 13:00 - 14:00)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e The first symbol in the square bracket stands for: `[A]` assignment, `[E]` event or `[R]` repeating event. \u003cbr/\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e The second symbol in the square bracket stands for: `[X]` task is not done, `[/]` task is done."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.2. List Today’s Tasks: **`list today`**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can view only the tasks you have today."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `list today`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected Outcome (Assuming today’s date is 27th March 2020): "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Here are the relevant tasks: "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  3. [A][/] Assignment 2 (by: Fri 27 Mar 2020 23:59 | mod: CS3235)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Follow submission instructions"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  4. [E][X] UG DG peer review (at: Home | Fri 27 Mar 2020 10:00 - 11:35)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.3. List Weekly Tasks: **`list week`**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0309556"
        },
        "content": "You can view all the tasks for the next 7 days."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `list week`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected Outcome (Assuming today’s date is 27 March 2020):"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Here are the relevant tasks: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  1. [A][X] Final Reflection Draft (by: Wed 01 Apr 2020 23:59 | mod: GEQ1000)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Last chance to get feedback!"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  3. [A][/] Assignment 2 (by: Fri 27 Mar 2020 23:59 | mod: CS3235)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Follow submission instructions"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  4. [E][X] UG DG peer review (at: Home | Fri 27 Mar 2020 10:00 - 11:35)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  5. [A][X] ATAS v2 (by: Sun 29 Mar 2020 22:00 | mod: CS2113T)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Complete DG draft to get tutor comments"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  6. [E][X] Online Career Fair (at: NUS TalentConnect | Tue 31 Mar 2020 09:00 - 18:00)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.4. List Upcoming Events: **`list upcoming events`**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0309556"
        },
        "content": "You can view **all** your **upcoming events** from the list of tasks regardless of how far it is from today."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0309556"
        },
        "content": "It will only show **events** that have not occurred yet and is time-sensitive. "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `list upcoming events`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Here are the relevant tasks: "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  4. [E][X] UG DG peer review (at: Home | Fri 27 Mar 2020 10:00 - 11:35)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  6. [E][X] Online Career Fair (at: NUS TalentConnect | Tue 31 Mar 2020 09:00 - 18:00)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  7. [E][X] CS2113T Final Exam (at: TBD | Sat 02 May 2020 13:00 - 14:00)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: false"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**: "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e If today is 27 March 2020 and it is after 10:00 am, event with index 4 shown above will not appear."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.4.5. List Incomplete Assignments: **`list incomplete assignments`**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can view all your **incomplete assignments** from the list of tasks."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `list incomplete assignments`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Here are the relevant tasks: "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  1. [A][X] Final Reflection Draft (by: Wed 01 Apr 2020 23:59 | mod: GEQ1000)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Last chance to get feedback"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joelczk"
        },
        "content": "  5. [A][X] ATAS v2 (by: Sun 29 Mar 2020 22:00 | mod: CS2113T)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            notes: Complete DG draft to get tutor comments"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**: "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e It will show all `assignments` that are not done, even if the deadline has passed."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.5. Edit Tasks: **`edit`**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can edit tasks in your existing list if there are any changes."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `edit [INDEX]`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Tip**:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Users can issue a `list` command to find the index of specific tasks. \u003cbr/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Refer to [Section 3.4. List Tasks: `list`](#34-list-tasks-list) for usage on the `list` commands."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example: `edit 1`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joelczk"
        },
        "content": "After issuing the `edit` command, you can input the changes you want to make by entering in the `assignment` or `events` command."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Refer to [Section 3.1, \"Add Assignments: `assignment`](#31-add-assignments-assignment) or "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0309556"
        },
        "content": "[Section 3.1, \"Add Events: `event`\"](#32-add-events-event) for usage of the commands."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e This function focuses on editing the details of the `assingment` or `event`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e If you wish to change the repeating period of an event, refer to [Section 3.3. Repeating Events: `repeat`](#33-repeating-events-repeat)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.6. Delete Tasks: **`delete`**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can delete unwanted tasks in your existing list."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `delete [INDEX]`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Tip**:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Users can issue a `list` command to find the index of specific tasks. \u003cbr/\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Refer to [Section 3.4. List Tasks: `list`](#34-list-tasks-list) for usage on the `list` commands."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.7. Mark Done: **`done`**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can mark a completed task as done in your existing list."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `done [INDEX]`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Tip**:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e Users can issue a `list` command to find the index of specific tasks. \u003cbr/\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jichngan"
        },
        "content": "\u003e Refer to [Section 3.4. List Tasks: `list`](#34-list-tasks-list) for usage on the `list` commands."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example: `done 1`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "joelczk"
        },
        "content": "[Final Reflection Draft] has been marked done!"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**: "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e If a repeating event is marked done, it will automatically be marked undone once the date of the repeatEvent passes today and "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e is updated to the next one. This also applies when you call `repeat` on an event that is marked done. "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### 3.8. Clear Tasks: **`clear`**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### 3.8.1. Clear All Tasks"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can clear **all** tasks in the list if you want to start from a fresh list. The stored list will also be cleared."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `clear all`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "joelczk"
        },
        "content": "#### 3.7.2. Clear All Done Tasks"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e `clear done` command only deletes completed events that is not set to repeat\u003cbr/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   You can clear all tasks which are marked `done` if you want to view only tasks that are not done in the list. This will also be reflected in the stored list.  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "joelczk"
        },
        "content": "-   Format: `clear done` You can clear all tasks which are marked `done` if you want to view only tasks that are not done in the list. This will also be reflected in the stored list."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `clear done`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 3.9. Search tasks: **`search`**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "joelczk"
        },
        "content": "#### 3.9.1. Search by Name "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can search for tasks in the list by specifying the type and name of task you might be searching for."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jichngan"
        },
        "content": "The task types available for searching are `assignment`,`event`,`all` only. (case-insensitive)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Tip**:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e You do not need to key in the full name of the task. **ATAS** recognises partial words and would try to match it to the actual name."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `search t/[TASK TYPE] n/[TASK NAME]`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example: `search t/event n/te`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Here are the search results:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  1.[R][X] Test (at: test | Fri 24 Apr 2020 11:00 - 12:00)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0309556"
        },
        "content": "      [3d]  notes: Test"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  2.[R][X] Test2 (at: test2 | Wed 03 Jun 2020 13:00 - 14:00)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0309556"
        },
        "content": "      [1w]  notes: Test2"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  3.[R][X] Test3 (at: test3 | Fri 01 May 2020 11:00 - 12:00)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0309556"
        },
        "content": "      [1m]  notes: Test3"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  4.[R][X] Test4 (at: test4 | Wed 29 Apr 2020 11:00 - 12:00)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0309556"
        },
        "content": "      [1m]  notes: Test4"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "joelczk"
        },
        "content": "#### 3.9.2. Search by Name and Date"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can search for tasks in the list by specifying the type, name, and date of the task you might be searching for. However,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Events classified as repeating events cannot be found using `searchd` command"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jichngan"
        },
        "content": "The task types available for searching are `assignment`,`event`,`all` only. (case-insensitive)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Tip**: "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003e You do not need to key in the full name of the task. **ATAS** recognises partial words and would try to match it to the actual name."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Format: `searchd t/[TASK TYPE] n/[TASK NAME] d/[DD/MM/YY]`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Example: `searchd t/event n/te d/01/05/20`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Here are the search results: "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    1.[R][X] Test3 (at: test3 | Fri 01 May 2020 11:00 - 12:00)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        notes: Test3"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "joelczk"
        },
        "content": "```"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 3.10. Calendar View: **`calendar`**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "joelczk"
        },
        "content": "You can obtain an calendar overview of all tasks you might have in the specified date. This feature also takes into consideration repeating events that you might have set. This allows for an intuitive way to plan for your free time as you can see your free slots at a glance."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "Format: `calendar d/[MM/YY]`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "![calendar.png](images/calendar2.png)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003e **Note**: The calendar does not show past repeated events instances and will only show upcoming ones. "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### 3.11. Storage"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "Your schedule data will be automatically saved by **ATAS** whenever you run a command."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "When you run **ATAS** again the next time, you will be able to see the tasks from your past sessions."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e **Warning**:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e Do not manually edit the contents of the storage file, as an incorrect storage format may "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "\u003e result in your data being lost."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### 4.1. List of available **ATAS** commands"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"10%\" /\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"10%\" /\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"40%\" /\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ccol width\u003d\"40%\" /\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eS/N\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eFunction\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eFormat\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eExample\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e01\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eHelp\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e02\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eExit\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eexit\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e03\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eAdding Assignments\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eassignment n/[ASSIGNMENT NAME] m/[MODULE] d/[DD/MM/YY HHmm] c/[COMMENTS]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eassignment n/Assignment One m/CS2113T d/01/01/20 1200 c/None\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e04\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eAdding Events\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eevent n/[EVENT NAME] l/[LOCATION] d/[DD/MM/YY HHmm - HHmm] c/[COMMENTS]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eevent n/Meeting l/Classroom d/01/01/20 1200 - 1400 c/None\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e05\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSet Tasks to Repeat\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003erepeat id/[INDEX] p/[PERIOD_NUM] [PERIOD_TYPE]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003erepeat id/1 p/3d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e06\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003eUnset Repeating Tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003erepeat id/[INDEX] p/0\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003erepeat id/1 p/0\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e07\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eList All Tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e08\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eList Today’s Tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003elist today\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e09\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eList This Week’s Tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003elist week\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eList Upcoming Events\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003elist upcoming events\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e11\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eList Incomplete Assignments\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003elist incomplete assignments\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e12\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eMark a Task as Done\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003edone [INDEX]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003edone 1\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e13\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eEdit a Task\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eedit [INDEX]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eedit 1\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e14\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eClear All Tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eclear all\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "e0309556"
        },
        "content": "\u003ctd\u003e\u003cp\u003e15\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eClear All Completed Tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003eclear done\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e16\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSearch for Tasks\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003esearch t/[TASK TYPE] n/[TASK NAME]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003esearch t/assignment n/Assignment one\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"even\"\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e17\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eSearch by Date\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003esearchd t/[TASK TYPE] n/[TASK NAME] d/[DD/MM/YY]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003esearchd t/assignment n/Assignment one d/01/01/20\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctr class\u003d\"odd\"\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003e18\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003ctd\u003e\u003cp\u003eCalendar View\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003ecalendar d/[MM/YY]\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "\u003ctd\u003e\u003cp\u003e\u003ccode\u003ecalendar d/01/2020\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "joelczk"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Q: Can I transfer my saved data to a computer with a different operating system?  "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A: Yes, you can! To do so, follow the instructions mentioned in the answer below."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Q: How do I transfer my saved data to another computer?  "
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A: In the folder where your **ATAS** jar file is located, look for a file named \"atasData.txt\". Place a copy of this file into the folder where the **ATAS** jar file is located in your new computer."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "joelczk"
        },
        "content": "Q: If I set a Repeat Period of `3d`, does the event repeat for the next 3 days or the event repeats three days later?  "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "joelczk"
        },
        "content": "A: Setting a repeat period of `3d` will mean that the event repeats **3 days later**. The numeric representation of the repeat command indicates the number of days before the event is repeated.  "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "joelczk"
        },
        "content": "e.g. `repeat id/1 p/3d`  "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "e0309556"
        },
        "content": "Given that today’s date is `01/01/20`, the event at index `1` will be repeated again on the `04/01/20`.  "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jichngan"
        },
        "content": "Refer to [Section 3.3, Repeating Events: `repeat`](#33-repeating-events-repeat)."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "e0309556"
        },
        "content": "[Back to Top](#)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 13,
      "joelczk": 395,
      "Keith-JK": 4,
      "e0309556": 161,
      "-": 19,
      "jichngan": 21
    }
  },
  {
    "path": "docs/team/Keith-JK.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "# Keith Chan Jun Kai - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "## PROJECT: Amazing Task and Assignment System (ATAS)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "ATAS is a cross platform Command Line Interface (CLI) program that allows you to track your assignments and events. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "ATAS is catered for students who want to maximise their productivity and cultivate effective time management habits through a desktop application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "**Major Enhancement**: Ability to view the month\u0027s Task through a traditional Calendar view.  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* What it does: "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Allows user to obtain a list of tasks within an user supplied month and year that is represented in a traditional Calendar view "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* Justification: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Improves the product significantly as user are able to take advantage of the quickness of a Command Line interface and still obtain a visually intuitive formatted schedule without a GUI."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* Highlights:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * With the exception of `java.util.Calendar` which retrieves basic information about the month such as number of days in month, implementation of a Calendar in CLI is almost completely manual without the help of an external API which makes it extremely challenging."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "      "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * As RepeatEvents are kept within the application as a single object with fixed date, an in-depth analysis of how to interact with `RepeatEvent` when retrieving a list of tasks that falls within a given time period was required and also sets the foundation for future commands that require such lists."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Calendar feature was implemented with ANSI escape sequences which colours command line output, that other commands can take advantage of to improve the user interface and experience.          "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "**Minor Enhancement**: "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* Implemented Ui component which handles all user inputs and outputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* ExitCommand [#48](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/48)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "Other Minor Enhancements which were subsequently refactored by team mates include:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* HelpCommand and the corresponding help messages for all commands.[#40](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/40)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* AssignmentCommand, EventCommand \u0026 DoneCommand[#27](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/27)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "**Code contributed**:[View on RepoSense](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dkeith-jk\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dKeith-JK\u0026tabRepo\u003dAY1920S2-CS2113T-M16-1%2Ftp%5Bmaster%5D)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "**Contributions**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* User Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Added section 3.9 Search Task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Added section 3.10 Calendar view."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* Developer Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Added and wrote section 3.6 Calendar feature."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Wrote Appendix A: Target User Profile"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Wrote Appendix D: Non-functional requirements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* Contributions to team-based tasks:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Managed issue tracker    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Improved general code coverage of command package to 93% [#205](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/205) "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    * Reviewed and provided improvements for team member\u0027s code, in particular refactored logic of Clear Done tasks. [#72](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/72)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 49
    }
  },
  {
    "path": "docs/team/e0309556.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "# Tshin Qi Ren - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "## PROJECT: Amazing Task and Assignment System (ATAS)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "ATAS is a cross platform Command Line Interface (CLI) program that allows you to track your assignments and events. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "ATAS is catered for students who want to maximise their productivity and cultivate effective time management habits through a desktop application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### Features contributed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "**Major Enhancement**: Implemented feature to allow events to repeat."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- What it does: "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  - It allow users to set an event to repeat for any period so that they do not have to add tasks with the same/similar name but"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    different timing for every instance the user wants the task to repeat for."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Justification:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  - Improves usability and user experience of the app as repeating events are relatively common and having to add multiple tasks to keep"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   track of a repeating event will become a hassle. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  - Providing flexibility to allow user to repeat for any period will be useful for modules that do no have weekly classes (every 2/3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   weeks) "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Highlights: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  - Repeating an event was particularly difficult and tedious to implement due to the many ways one can implement it (with different pros"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   and cons). This led to many changes in its implementation over the weeks as we try to cater to different needs that we have identified for "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   our target audience - students. To list a few:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    - There was initially difference in implementation for `Calendar` feature which interacts with `Repeat` feature but was not caught"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    until both developers finished and did their pull requests which led to more changes in implementation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    - We also later discovered a particular \u0027bug\u0027 with `LocalDateTime` API from Java relating to the last few dates of a month. Adding 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    month to 31 Jan 2020 then adding another, will result in 29 Mar 2020 instead of the desired 31 Mar 2020. This led to another round of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    changes to how repeat event was implemented.  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "  - This enhancement was difficult to implement as it was my first time handling with Date and Time, particularly `LocalDateTime` API and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   its variations in Java and was not used to the many corner cases. I had to plan properly and take note of the many corner cases before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   obtaining the current implementation. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": "   (Credit to team for helping me catch bugs relating to my first few implementations and providing feedback on how to improve.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "**Minor Enhancement**: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Implemented `list` commands for `list`(listing all tasks), `list incomplete assignments`, `list upcoming events`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Implemented `CommandResult` class to deal with output from commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Added `common/Messages` to store all the strings that are used for printing to user. [#38](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/38)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Refactored `common/Messages` to remove repetitive strings that have similar messages. [#94](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/94)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "**Code Contributed:** [View on RepoSense](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003de0309556\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003de0309556\u0026tabRepo\u003dAY1920S2-CS2113T-M16-1%2Ftp%5Bmaster%5D)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "#### Contributions to Project"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "**Contributions to the User Guide:**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Add instructions for `RepeatCommand`. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Add tips and notes for understanding command format. [#104](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/104/files)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Fix inconsistencies in formatting and broken links during conversion to md from adoc. [#150](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/150/files)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "**Contributions to the Developer Guide:**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Add Section 3.4: Repeat Event feature"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Add initial information to Appendix A and D that are subsequently improved by team. [#135](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/135/files)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309556"
        },
        "content": "**Contributions to Team-based Tasks:**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Set up Github Repo for ATAS "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Managed Issue Tracker in Github"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Enable Assertion for Gradle"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "**Community**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Refactored and enhanced `Help` command implementation [#92](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/92)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": "- Fix inconsistencies in formatting and broken links prior to and after some assessments. [#200](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/200/files)"
      }
    ],
    "authorContributionMap": {
      "e0309556": 61
    }
  },
  {
    "path": "docs/team/joelczk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "# Joel Chang Zhi Kai - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "## PROJECT: Amazing Task and Assignment System (ATAS)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "ATAS is a cross platform Command Line Interface (CLI) program that allows you to track your assignments and events. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "ATAS is catered for students who want to maximise their productivity and cultivate effective time management habits through a desktop application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Major enhancements:** Implemented *SEARCH* and *CLEAR* functionality"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* What it does:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * *SEARCH* : Allows users to have the option to search for a query, based on a task type with/without date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * *CLEAR* :  Allows user to have the option of clearing all the tasks on the list or to clear completed tasks(With the exception of repeated events)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Justification : "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * *SEARCHING WITH DATE* : Users may just want to search for a specific query based on a given date, however the current command "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    under `list` will show all tasks for the specific date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * *SEARCHING WITHOUT DATE* : Similar to `SEARCHING WITH DATE`, the current commands under `list` only shows all the tasks,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    but does not offer the functionality of searching by keywords which may make the CLI less optimized for users who want to find"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    a task based on a specific keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * *CLEARING ALL TASKS* :  Users may want to clear all their tasks in the task list. However, the existing implementation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    (Without `clear` command) only allows users to delete the tasks based on their index, which may not be optimized "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    for their use"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * *CLEARING COMPLETED TASKS* : Users can clear their completed tasks in a single command so that they will not clutter "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    their task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Highlights :"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * The `SEARCHING WITH DATE` enhancement was more difficult and tedious to implement as there is a need to track the original index of "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    the task in the task list, and at the same time, maintaining their original order. Initially, this feature was implmented in a HashMap,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    but it does not support the maintenance of original order. So, I had to figure out how to use a LinkedHashMap to support the maintenance of order of indexes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    * The `CLEARING COMPLETED TASKS` enhancement was tedious to implement as there is a need for a few function calls to obtain the original task list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    and to obtain all the completed tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Minor Enhancement** : Implemented the *DELETE* command, wrote the code skeleton for `Assignment`,`Event` and `Task`, "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "wrote the code skeleton for various JUnit Tests (e.g. `AssignmentTest`,`EventTest`,`MarkAsDoneTest`)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Code Contributed** : [View on RepoSense](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djoelczk\u0026tabRepo\u003dAY1920S2-CS2113T-M16-1%2Ftp%5Bmaster%5D)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Contributions to User Guide** : "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Updated numberings of sections for User Guide in md format: [#149](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/149/files)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Added instructions for using the `list week`, `list upcoming tasks`, `list incomplete assignments` commands"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Updated instructions for using `search`, `searchd`, `clear done` commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Contributions to Developer Guide** :"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Updated numberings of sections for Developer Guide in md format: [#149](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/149/files)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Wrote *Section 3.1 - Delete Task feature*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Wrote *Section 3.2 - Search Task Feature*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Wrote *Section 3.3 - Clear Task Feature*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Wrote *Appendix E - Documentation*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Added the *User Stories* Section"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Contributions to team-based tasks** :"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Managed Issue Tracker"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Enabled the use of Jansi in gradle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Converted UG from ADOC format to MD format: [#147](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/147)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Converted DG from ADOC format to DG format: [#146](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/147)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "**Community** :"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Fixed overlooked wrong index in UG: [#191](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/191)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Reviewed and improved other team member\u0027s code: [#93](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/93)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "* Fixed bug for invalid escape sequence in windows command prompt, overlooked by other team members: [#139](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/139)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joelczk": 60
    }
  },
  {
    "path": "docs/team/lwxymere.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "# Lai Wen Xuan Jeremy - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "## PROJECT: Amazing Task and Assignment System (ATAS)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "ATAS is a cross platform Command Line Interface (CLI) program that allows you to track your assignments and events. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "ATAS is catered for students who want to maximise their productivity and cultivate effective time management habits through a desktop application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "**Major Enhancement:** Implemented the user command parser using regex"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* What it does:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Parses commands input by the user, and creates the appropriate `Command` object to execute the user\u0027s desired task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Utilises regex and error handling methods to catch incorrect commands and formats"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Justification:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * The regex strictly enforces the format of some parameters such as dates to facilitate easy parsing and reduced chances of bugs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "      However, it still allows for some freedom in input formats, such as optional whitespaces, to make typing commands easier for users."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Highlights: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * This enhancement forms the foundational structure for the logic of **ATAS**, dealing with all user inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Comprehensive error handling of the parser makes the implementation of the various `Commands` much easier, "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "      as the `Command` classes can expect to receive only valid inputs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * This enhancement was challenging to implement as it was my first time properly dealing with regex."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "      I had to figure out how to use named-capturing groups, how to allow for optional and variable-length expressions, "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "      how to explicitly disallow the use of certain special characters, and how to integrate all these things into a regex "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "      that represents the user\u0027s input command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Credits:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    * Credits to [addressbook-level2](https://github.com/se-edu/addressbook-level2/tree/master/src/seedu/addressbook) for the idea to use regex for user commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "**Minor Enhancement:** Implemented the storage functionality to save user\u0027s data across sessions in a local file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "**Code Contributed:** [View on RepoSense](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dlwxymere\u0026tabRepo\u003dAY1920S2-CS2113T-M16-1%2Ftp%5Bmaster%5D)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "**Contributions to the User Guide:**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Updated the *Command Format* section under *Section 3 - Features*: [#105](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/105)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Added instructions for using the `assignment`, `event`, `list`, and `list today` commands"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "**Contributions to the Developer Guide:**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Added the *Setting Up* section"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Wrote the *Design* section"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Wrote *Section 3.7 - Storage*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Wrote *Section 5 - DevOps*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Normalize the writing style and format of the various sections: [#142](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/142)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "**Contributions to Team-based Tasks:**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Managed the issue tracker"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Compiled all comments from the developer guide review"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Compiled all relevant bugs reported in the practical exam dry run"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "**Community:**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "* Fixed minor bugs overlooked by group members: [#46](https://github.com/AY1920S2-CS2113T-M16-1/tp/pull/46)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 49
    }
  },
  {
    "path": "src/main/java/command/AssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class AssignmentCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignment\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Add Assignment: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"assignment n/[ASSIGNMENT NAME] m/[MODULE NAME] d/[dd/MM/yy HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String assignmentName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs an AssignmentCommand object with the parameters provided."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param assignmentName String containing name of Assignment"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param moduleName String containing name of module Assignment belongs to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param deadline LocalDateTime object containing the deadline of Assignment"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Assignment with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public AssignmentCommand(String assignmentName, String moduleName, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Creates new Assignment, adds to TaskList, print Ui messages."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Task newAssignment \u003d new Assignment(assignmentName, moduleName, deadline, comments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (taskList.isSameTask(taskList, newAssignment)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(Messages.SAME_TASK_ERROR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newAssignment);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newAssignment, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 16,
      "joelczk": 1,
      "Keith-JK": 26,
      "e0309556": 9,
      "-": 1
    }
  },
  {
    "path": "src/main/java/command/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "//@@author Keith-JK"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // ANSI text colour scheme"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLACK \u003d \"\\u001B[30m\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RED \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_GREEN \u003d \"\\u001B[32m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_YELLOW \u003d \"\\u001B[33m\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLUE \u003d \"\\u001B[34m\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_PURPLE \u003d \"\\u001B[35m\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_CYAN \u003d \"\\u001B[36m\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_WHITE \u003d \"\\u001B[37m\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String STARTING_BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String PAD \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String MORE_TASK_INDICATOR \u003d ANSI_CYAN + \".....\" + ANSI_RESET;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // Calendar dimensions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MAX_CALENDAR_ROWS \u003d 30;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int CALENDAR_BOX_HEIGHT \u003d 6;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // sizing of each Calendar box"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MAX_CALENDAR_BOX_WIDTH \u003d 20;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DATE_PADDING_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 3;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int EMPTY_BOX_PADDING \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int CONTENT_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MIDDLE_JUSTIFIED_WIDTH_PADDING \u003d MAX_CALENDAR_BOX_WIDTH / 2 - 3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Get a Calendar view: calendar d/[MM/YY]\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CalendarCommand(LocalDate date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Executes the Calendar command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String calendarView \u003d buildMonthCalendar(date, taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(calendarView);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Build and return the calendar view in String format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime date provided to base calendar view on"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles tasks operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return String object that contains the calendar view"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String buildMonthCalendar(LocalDate dateTime, TaskList taskList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calibrateCalendar(dateTime, calendar);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        // Get calendar parameters"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int month      \u003d calendar.get(Calendar.MONTH); // Jan \u003d 0, dec \u003d 11"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assert month \u003d\u003d (dateTime.getMonthValue() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int dayOfMonth \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assert dayOfMonth \u003d\u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int startingDayOfWeek \u003d calendar.get(Calendar.DAY_OF_WEEK); // get day of week {1 \u003d sunday, 7 \u003d saturday}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int daysInMonth \u003d calendar.getActualMaximum(Calendar.DAY_OF_MONTH); // maximum no. days in given month"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e monthlyTaskList \u003d duplicateRepeatEvents(dateTime, getTasksByYearMonth(dateTime, taskList));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        StringBuilder calendarView \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarTitle(calendar, calendarView);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarLegend(calendarView);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarBody(startingDayOfWeek, daysInMonth, monthlyTaskList, calendarView);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return calendarView.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Sets the calendar to the given date."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime user specified date to base calendar on"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendar Calendar object that calendar view is based of on"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void calibrateCalendar(LocalDate dateTime, Calendar calendar) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int givenDay \u003d dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int givenMonth \u003d dateTime.getMonthValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int givenYear \u003d dateTime.getYear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.YEAR, givenYear);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.MONTH, givenMonth - 1); // month starts from 0 - 11"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.DATE, givenDay);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Gets an ArrayList of Tasks that falls within the given date."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime dateTime object given by user"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles tasks operations"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return ArrayList of tasks that falls within given date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByYearMonth(LocalDate dateTime, TaskList taskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.from(dateTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate endOfMonth \u003d yearMonth.atEndOfMonth();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate startOfMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return taskList.getTasksByRange(startOfMonth, endOfMonth);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Add repeating Events to resultTaskList as a separate event for easier implementation of calendar."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime LocalDate that is given"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param unrepeatedTaskList ArrayList of Tasks that contains task from TaskList"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return ArrayList of Tasks that contains duplicated tasks of repeat events"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public ArrayList\u003cTask\u003e duplicateRepeatEvents(LocalDate dateTime, ArrayList\u003cTask\u003e unrepeatedTaskList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.from(dateTime);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate endOfMonth \u003d yearMonth.atEndOfMonth();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (Task task : unrepeatedTaskList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            resultTaskList.add(task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (task instanceof RepeatEvent) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                parseRepeatEvents(endOfMonth, resultTaskList, (RepeatEvent) task);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return resultTaskList;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Add repeating Event as separate Event according to the repeat type to resultTaskList."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfMonth LocalDate that represents the last day of the month"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param resultTaskList ArrayList of Task that contains duplicated tasks of repeat events"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param event Event to repeat and add to resultTaskList"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void parseRepeatEvents(LocalDate endOfMonth, ArrayList\u003cTask\u003e resultTaskList, RepeatEvent event) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int numOfPeriod \u003d event.getNumOfPeriod();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String typeOfPeriod \u003d event.getTypeOfPeriod();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate eventDate \u003d event.getDateAndTime().toLocalDate();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int daysToAdd;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        switch (typeOfPeriod) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.DAILY_ICON:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            daysToAdd \u003d numOfPeriod;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addRepeatEventSeparately(endOfMonth, resultTaskList, event, eventDate, daysToAdd);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.WEEKLY_ICON:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            daysToAdd \u003d numOfPeriod * DAYS_IN_WEEK;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addRepeatEventSeparately(endOfMonth, resultTaskList, event, eventDate, daysToAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.MONTHLY_ICON:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.YEARLY_ICON:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Add repeating Event as separate Event to resultTaskList according to the frequency of repeats given."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfMonth LocalDate that represents the last day of the month"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param resultTaskList ArrayList of Task that contains duplicated tasks of repeat events"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param event Event to repeat and add to resultTaskList"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventDate LocalDate that holds event date"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param daysToAdd frequency of repeating event"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addRepeatEventSeparately(LocalDate endOfMonth, ArrayList\u003cTask\u003e resultTaskList,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                          RepeatEvent event, LocalDate eventDate, int daysToAdd) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int timesRepeated \u003d 1; eventDate.plusDays(daysToAdd * timesRepeated).compareTo(endOfMonth) \u003c\u003d 0;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "             timesRepeated++) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            resultTaskList.add(new Event(event.getName(), event.getLocation(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    event.getDateAndTime().plusDays(daysToAdd * timesRepeated),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    event.getEndDateAndTime().plusDays(daysToAdd * timesRepeated),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    event.getComments()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Formats and appends the calendar body to calendarView."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startingDayOfWeek the starting day of the first week of given month"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param daysInMonth maximum number of days in the given month"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param monthlyTaskList ArrayList of tasks that falls within the given month"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addCalendarBody(int startingDayOfWeek, int daysInMonth,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                 ArrayList\u003cTask\u003e monthlyTaskList, StringBuilder calendarView) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int calendarRow \u003d 0; calendarRow \u003c\u003d MAX_CALENDAR_ROWS; calendarRow++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (calendarRow % CALENDAR_BOX_HEIGHT \u003d\u003d 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                addCalendarBorder(calendarView);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addCalendarStartBorder(calendarView);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            for (int calendarBoxIndex \u003d 1; calendarBoxIndex \u003c\u003d DAYS_IN_WEEK; calendarBoxIndex++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                int currentDayRepresented \u003d Math.floorDiv(calendarRow, CALENDAR_BOX_HEIGHT)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        * DAYS_IN_WEEK + calendarBoxIndex - startingDayOfWeek + 1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                if (currentDayRepresented \u003c\u003d 0 || currentDayRepresented \u003e daysInMonth) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    addEmptyCalendarBody(calendarView);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                if (calendarRow % CALENDAR_BOX_HEIGHT \u003d\u003d 1) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    addCalendarDate(calendarView, currentDayRepresented);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                appendTaskToView(monthlyTaskList, calendarView, calendarRow, currentDayRepresented);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addCalendarNewLine(calendarView);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends Task Details to CalendarView if exist, appends formatted padded string otherwise."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param monthlyTaskList ArrayList of tasks that falls within the given month"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarRow Calendar row that is being worked on"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param currentDayRepresented Integer that represents date the calendar iterator is on"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void appendTaskToView(ArrayList\u003cTask\u003e monthlyTaskList, StringBuilder calendarView,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                  int calendarRow, int currentDayRepresented) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        boolean hasPrintedTask \u003d false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (Task task : monthlyTaskList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (task.getDate().getDayOfMonth() \u003d\u003d currentDayRepresented) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                hasPrintedTask \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                if (calendarRow % CALENDAR_BOX_HEIGHT \u003d\u003d 5) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    addTaskNotShownIndicator(calendarView);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    addTaskToCalendar(monthlyTaskList, calendarView, task);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (!hasPrintedTask) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addEmptyCalendarBody(calendarView);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds an indicator to indicate that there are Tasks are not shown."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addTaskNotShownIndicator(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(PAD.repeat(MIDDLE_JUSTIFIED_WIDTH_PADDING))"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(MORE_TASK_INDICATOR)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(PAD.repeat(CONTENT_WIDTH - MIDDLE_JUSTIFIED_WIDTH_PADDING - 5))"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(BORDER);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Add a newline to calendar view."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarNewLine(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(System.lineSeparator());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends and formats Tasks to the calendarView."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param monthlyTaskList ArrayList of tasks that falls within the given month"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param task task that is being appended to calendarView"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addTaskToCalendar(ArrayList\u003cTask\u003e monthlyTaskList, StringBuilder calendarView, Task task) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int taskListSize \u003d monthlyTaskList.size();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String taskDetails \u003d task.getTime().format(Parser.PRINT_TIME_FORMAT) + task.getName();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (taskDetails.length() \u003e CONTENT_WIDTH) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskDetails \u003d taskDetails.substring(0, CONTENT_WIDTH);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_RED).append(taskDetails).append(ANSI_RESET);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_GREEN).append(taskDetails).append(ANSI_RESET);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        monthlyTaskList.remove(task);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assert monthlyTaskList.size() \u003d\u003d taskListSize - 1;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(PAD.repeat(CONTENT_WIDTH - taskDetails.length())).append(BORDER);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a starting border to the Calendar."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarStartBorder(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(STARTING_BORDER);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends an empty calendar slot to the calendarView."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addEmptyCalendarBody(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(PAD.repeat(EMPTY_BOX_PADDING)).append(BORDER);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends and formats the date to add to calendarView."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param currentDayRepresented day of month to append to calendarView"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarDate(StringBuilder calendarView, int currentDayRepresented) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(PAD.repeat(DATE_PADDING_WIDTH)).append(ANSI_CYAN)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(currentDayRepresented).append(ANSI_RESET);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (currentDayRepresented \u003c 10) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(PAD + BORDER);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(BORDER);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a legend for the calendar."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarLegend(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String[] days \u003d {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarBorder(calendarView);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarStartBorder(calendarView);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int dayRepresented \u003d 0; dayRepresented \u003c DAYS_IN_WEEK; dayRepresented++) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(PAD.repeat(CONTENT_WIDTH - days[dayRepresented].length()));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_CYAN).append(days[dayRepresented]).append(ANSI_RESET).append(BORDER);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarNewLine(calendarView);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a title to the calendar."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendar Calendar object that calendar view is based of on"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarTitle(Calendar calendar, StringBuilder calendarView) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(ANSI_RED + \"Assignments are represented in red\" + ANSI_RESET)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(ANSI_GREEN + \"Events are represented in green\" + ANSI_RESET)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(ANSI_YELLOW).append(new SimpleDateFormat(\"MMMM YYYY\").format(calendar.getTime()))"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(ANSI_RESET).append(System.lineSeparator());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a horizontal border for the calendarView."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarBorder(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(BORDER.repeat(MAX_CALENDAR_BOX_WIDTH * DAYS_IN_WEEK + 1))"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 368,
      "e0309556": 1
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "//@@author joelczk"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String CLEAR_ALL_COMMAND_USAGE \u003d \"- Clear All Tasks: clear all\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String CLEAR_DONE_COMMAND_USAGE \u003d \"- Clear All Completed Tasks: clear done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Clear commands that are available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + Messages.NEWLINE_INDENT + CLEAR_ALL_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + Messages.NEWLINE_INDENT + CLEAR_DONE_COMMAND_USAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String ALL_CLEAR_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearAllParam  \u003d \"all\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearDoneParam \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearParam;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructor for clear all and clear done command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param clearParam Parameter to distinguish between clear all and clear done command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ClearCommand(String clearParam) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.clearParam \u003d clearParam;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        switch (clearParam \u003d\u003d null ? ALL_CLEAR_COMMAND : clearParam) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case (clearAllParam):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return clearAll(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case (clearDoneParam):"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return clearDone(taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    Parser.capitalize(COMMAND_WORD), COMMAND_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Clears all the tasks in the taskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list storing all the tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return messages for user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult clearAll(TaskList taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.clearList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert taskList.getListSize() \u003d\u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.CLEAR_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Get all the index of tasks that have been completed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of index of completed tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ArrayList\u003cInteger\u003e getCompletedIndex(TaskList taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cInteger\u003e doneIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getIsDone() \u0026\u0026 !(task instanceof RepeatEvent)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                doneIndex.add(count);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return doneIndex;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes all the completed tasks and displays user messages."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list storing all the tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return user messages"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult clearDone(TaskList taskList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int originalTaskSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cInteger\u003e doneIndex \u003d getCompletedIndex(taskList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else if (doneIndex.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_DONE_CLEAR_ERROR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.deleteAllDoneTask(doneIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert taskList.getListSize() \u003d\u003d originalTaskSize - doneIndex.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.CLEAR_DONE_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 95,
      "e0309556": 1
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Executes the specific command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract CommandResult execute(TaskList taskList, Ui ui); //"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 5,
      "joelczk": 1,
      "e0309556": 8,
      "-": 1
    }
  },
  {
    "path": "src/main/java/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "//@@author e0309556"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": " * Result from running the Command to be shown to user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public String feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Default constructor to initialise the input to be shown to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param feedbackToUser String to be shown to user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309556": 18
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "//@@author joelczk"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Delete a Task: delete [TASK NUMBER]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected int deleteIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs a DeleteCommand with the parameters supplied."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param index index of task to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.deleteIndex \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            Task taskToBeDeleted \u003d taskList.getTask(deleteIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.DELETE_SUCCESS_MESSAGE, taskToBeDeleted.getName()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert deleteIndex \u003c\u003d 0 || deleteIndex \u003e taskList.getListSize() - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, taskList.getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 30,
      "Keith-JK": 1,
      "e0309556": 2
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Mark Task as Done: done [TASK NUMBER]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected int doneIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs a DoneCommand with parameters supplied."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param index index in the ArrayList to be marked done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.doneIndex \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            Task taskToBeMarkDone \u003d taskList.getTask(doneIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (taskToBeMarkDone.getIsDone()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                return new CommandResult(Messages.COMPLETED_TASK_ERROR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskList.markTaskAsDone(doneIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.DONE_SUCCESS_MESSAGE, taskToBeMarkDone.getName()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, taskList.getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 18,
      "joelczk": 1,
      "Keith-JK": 9,
      "e0309556": 10,
      "-": 1
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jichngan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": "//@@author jichngan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Edit Task: edit [TASK NUMBER]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //Regex for Assignment Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final Pattern ASSIGNMENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \"(?\u003ctaskType\u003e(?i)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + AssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003cassignmentName\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+m/\\\\s*(?\u003cmoduleName\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e[^|/\\\\s]+[^|/]*)$\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //Regex for Event Command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final Pattern EVENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \"(?\u003ctaskType\u003e(?i)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003ceventName\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+l/\\\\s*(?\u003clocation\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4}\\\\s*-\\\\s*\\\\d{4})\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e[^|/\\\\s]+[^|/]*)$\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    protected int editIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for EditCommand class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editIndex Integer of task index to be edited"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public EditCommand(int editIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Executes the edit command function."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Takes in a new input from the user and formats input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Replaces task from the taskList at index specified by user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return CommandResult object based on result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (editIndex + 1 \u003e taskList.getListSize() || editIndex \u003c 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    taskList.getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        ui.showToUser(Messages.EDIT_PROMPT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        ui.showToUser(Messages.DIVIDER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String commandType \u003d userInput.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            case AssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                if (taskList.getTask(editIndex) instanceof RepeatEvent"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                        || taskList.getTask(editIndex) instanceof Event) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    return new CommandResult(Messages.EDIT_TYPE_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                Task editedAssignment \u003d editAssignment(userInput, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                if (taskList.isSameEdit(taskList, editedAssignment, editIndex)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    return new CommandResult(Messages.SAME_TASK_ERROR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.editTask(editIndex, editedAssignment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedAssignment));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                if (taskList.getTask(editIndex) instanceof Assignment) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    return new CommandResult(Messages.EDIT_TYPE_ERROR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                Event editedEvent \u003d editEvent(userInput, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                if (taskList.isSameEdit(taskList, editedEvent, editIndex)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    return new CommandResult((Messages.SAME_TASK_ERROR));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                //Check if Event to be edited is repeating event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                if (taskList.getTask(editIndex) instanceof RepeatEvent) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    Task editedRepeatEvent \u003d editRepeatEvent(editedEvent, (RepeatEvent) taskList.getTask(editIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    taskList.editTask(editIndex, editedRepeatEvent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedRepeatEvent));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                } else if (taskList.getTask(editIndex) instanceof Event) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    taskList.editTask(editIndex, editedEvent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedEvent));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedEvent));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(Messages.UNKNOWN_COMMAND_ERROR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (AtasException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(e.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Creates an assignment object by formatting the string supplied by user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param userInput String supplied by user"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Formats output to display error messages to user"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Assignment Object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @throws AtasException thrown when format of string supplied not recognised"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public Assignment editAssignment(String userInput, Ui ui) throws AtasException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        final Matcher matcher \u003d ASSIGNMENT_PARAMETERS_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            throw new AtasException(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    Parser.capitalize(AssignmentCommand.COMMAND_WORD), AssignmentCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            dateTime \u003d Parser.parseDate(matcher.group(\"dateTime\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            throw new AtasException(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String assignmentName \u003d Parser.capitalize(matcher.group(\"assignmentName\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String moduleName \u003d matcher.group(\"moduleName\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String comments \u003d Parser.capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new Assignment(assignmentName, moduleName, dateTime, comments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Creates an event object by formatting the string supplied by user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param userInput String supplied by user"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Formats output to display error messages to user"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @throws AtasException thrown when format of string supplied not recognised"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public Event editEvent(String userInput, Ui ui) throws AtasException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        final Matcher matcher \u003d EVENT_PARAMETERS_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            throw new AtasException(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    Parser.capitalize(EventCommand.COMMAND_WORD), EventCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime startDateTime \u003d null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime endDateTime \u003d null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String startEndDateTime \u003d matcher.group(\"dateTime\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String[] dateTimeTokens \u003d startEndDateTime.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String[] timeTokens \u003d dateTimeTokens[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            startDateTime \u003d Parser.parseDate(dateTimeTokens[0] + \" \" + timeTokens[0].trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            endDateTime \u003d Parser.parseDate(dateTimeTokens[0] + \" \" + timeTokens[1].trim());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            throw new AtasException(Messages.START_END_DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!endDateTime.isAfter(startDateTime)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            throw new AtasException(Messages.INCORRECT_START_END_TIME_ERROR);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String eventName \u003d Parser.capitalize(matcher.group(\"eventName\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String location \u003d matcher.group(\"location\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String comments \u003d Parser.capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new Event(eventName, location, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Creates a RepeatEvent object by taking Event object supplied and Repeated Event."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editedEvent Event Object that is created"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param repeatedEvent RepeatedEvent Object that was on the list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return RepeatedEvent object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public RepeatEvent editRepeatEvent(Event editedEvent, RepeatEvent repeatedEvent) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        int numOfPeriod \u003d repeatedEvent.getNumOfPeriod();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String typeOfPeriod \u003d repeatedEvent.getTypeOfPeriod();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime originalDateAndTime \u003d repeatedEvent.getOriginalDateAndTime();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        int periodCounter \u003d repeatedEvent.getPeriodCounter();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        RepeatEvent editedRepeatEvent \u003d new RepeatEvent(editedEvent.getName(), editedEvent.getLocation(),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                editedEvent.getDateAndTime(), editedEvent.getEndDateAndTime(), editedEvent.getComments(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                numOfPeriod, typeOfPeriod, originalDateAndTime, periodCounter);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return editedRepeatEvent;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jichngan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jichngan": 208
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Add Event: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"event n/[EVENT NAME] l/[LOCATION] d/[dd/MM/yy HHmm - HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventLocation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs EventCommand with the supplied parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventName String containing name of event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventLocation String containing location of event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param startDateTime LocalDateTime containing the starting date and time of event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param endDateTime LocalDateTime containing the ending date and time of event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Event with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public EventCommand(String eventName, String eventLocation, LocalDateTime startDateTime,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        LocalDateTime endDateTime, String comments) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newEvent \u003d new Event(eventName, eventLocation, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (taskList.isSameTask(taskList, newEvent)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(Messages.SAME_TASK_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newEvent, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 24,
      "joelczk": 1,
      "Keith-JK": 17,
      "e0309556": 8,
      "-": 1
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Exit ATAS: exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Executes the Exit command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Checks whether the program should terminate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return true if the program should exit, false otherwise"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 12,
      "Keith-JK": 17,
      "-": 1,
      "e0309556": 3
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Help Format: help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static int counter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Create HelpCommand object and initialize counter to 1."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        counter \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private String convertIndexToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String indexToString \u003d String.format(\"%3d. \", counter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        counter +\u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return indexToString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private String getAllCommandUsage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return \"Following is the list of commands available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + AssignmentCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + EventCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + ListCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + DoneCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + EditCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + DeleteCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + ClearCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + RepeatCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + SearchCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + SearchCommand.dCOMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + CalendarCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + convertIndexToString() + ExitCommand.COMMAND_USAGE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints to user the help message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return new CommandResult(getAllCommandUsage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "Keith-JK": 14,
      "-": 1,
      "e0309556": 37
    }
  },
  {
    "path": "src/main/java/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "//@@author lwxymere"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Constructor to deal with incorrect commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param description String of the wrong command input by user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public IncorrectCommand(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a String as the description of the IncorrectCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.INCORRECT_COMMAND_ERROR, description));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 27,
      "joelczk": 1,
      "Keith-JK": 1,
      "e0309556": 1
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String LIST_ALL_COMMAND_USAGE \u003d \"- List All Tasks: list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String LIST_TODAY_COMMAND_USAGE \u003d \"- List Today\u0027s Tasks: list today\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String LIST_WEEK_COMMAND_USAGE \u003d \"- List This Week\u0027s Tasks: list week\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String LIST_UPCOMING_EVENT_COMMAND_USAGE \u003d \"- List Upcoming Events: list upcoming events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String LIST_INCOMPLETE_ASSIGN_COMMAND_USAGE \u003d \"- List Incomplete Assignments: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"list incomplete assignments\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"List commands that are available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_ALL_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_TODAY_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_WEEK_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_UPCOMING_EVENT_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_INCOMPLETE_ASSIGN_COMMAND_USAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private final String listParam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String ALL_TASK_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String TODAY_COMMAND \u003d \"today\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String WEEK_COMMAND \u003d \"week\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String UPCOMING_EVENT_COMMAND \u003d \"upcoming events\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String INCOMPLETE_ASSIGN_COMMAND \u003d \"incomplete assignments\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for ListCommand Class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param listParam String containing user input on type of listing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ListCommand(String listParam) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.listParam \u003d listParam;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        ArrayList\u003cTask\u003e allTaskList \u003d taskList.getTaskArray();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        // to deal with null being passed as input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        switch (listParam \u003d\u003d null ? ALL_TASK_COMMAND : listParam) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (TODAY_COMMAND):"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTasksByDays(0)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (WEEK_COMMAND):"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTasksByDays(7)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (UPCOMING_EVENT_COMMAND):"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getUpcomingEventArray()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (INCOMPLETE_ASSIGN_COMMAND):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getIncompleteAssignArray()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (ALL_TASK_COMMAND):"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTaskArray()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    Parser.capitalize(COMMAND_WORD), COMMAND_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Formats String of tasks with standard task listing message."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param taskList ArrayList object with tasks to be printed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return Formatted string of tasks and printing message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public String showListTasks(ArrayList\u003cTask\u003e allTaskList, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            //If there are no tasks found within the provided taskList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return (Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String stringFromArrayList \u003d stringTaskList(allTaskList, taskList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return (String.format(Messages.LIST_TASKLIST_MESSAGE, System.lineSeparator(), stringFromArrayList));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Converts ArrayList object into string to be printed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param allTaskList Use ArrayList object with all tasks added in it to obtain its original index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param selectedTaskList ArrayList object with tasks to be printed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return Formatted string of tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private String stringTaskList(ArrayList\u003cTask\u003e allTaskList, ArrayList\u003cTask\u003e selectedTaskList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        StringBuilder stringFromArrayList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert selectedTaskList.size() \u003e 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert allTaskList.size() \u003e 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Task lastTask \u003d selectedTaskList.get(selectedTaskList.size() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert lastTask !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        for (Task task : selectedTaskList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            stringFromArrayList.append(String.format(\"%3d. %s\", allTaskList.indexOf(task) + 1, task.toString()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (task.equals(lastTask)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            stringFromArrayList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return stringFromArrayList.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 7,
      "joelczk": 1,
      "e0309556": 79,
      "jichngan": 12
    }
  },
  {
    "path": "src/main/java/command/RepeatCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "//@@author e0309556"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String DAILY_ICON \u003d \"d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String WEEKLY_ICON \u003d \"w\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String MONTHLY_ICON \u003d \"m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String YEARLY_ICON \u003d \"y\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String DAILY_STRING \u003d \"day\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String WEEKLY_STRING \u003d \"week\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String MONTHLY_STRING \u003d \"month\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String YEARLY_STRING \u003d \"year\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String REPEAT_EVENT_COMMAND_USAGE \u003d \"- Make event recur: repeat id/[EVENT INDEX] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"p/[NUM OF PERIOD][TYPE OF PERIOD]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static final String NO_REPEAT_EVENT_COMMAND_USAGE \u003d \"- Stop event recur: repeat id/[EVENT INDEX] p/0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            \"Repeat commands that are available: (Available Periods are: d, w, m, y)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + REPEAT_EVENT_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + NO_REPEAT_EVENT_COMMAND_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private int eventIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private int numOfPeriod;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private String typeOfPeriod;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Construct a RepeatCommand class to initialize eventIndex, numOfPeriod and typeOfPeriod."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param eventIndex index of the event that is being changed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param numOfPeriod number of period before event repeats"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param typeOfPeriod type of period which event repeats - could be daily, weekly, monthly or yearly"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public RepeatCommand(int eventIndex, int numOfPeriod, String typeOfPeriod) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.numOfPeriod \u003d numOfPeriod;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.typeOfPeriod \u003d typeOfPeriod;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Converts \u0027d\u0027 to day, \u0027w\u0027 to week, \u0027m\u0027 to month, \u0027y\u0027 to year."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param symbol symbol of the repeating period (\u0027d\u0027, \u0027w\u0027, \u0027m\u0027, \u0027y\u0027)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return String of the symbol that is spelt out"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private String iconToString(String symbol) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        switch (symbol) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case(DAILY_ICON):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return DAILY_STRING;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case(WEEKLY_ICON):"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return WEEKLY_STRING;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case(MONTHLY_ICON):"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return MONTHLY_STRING;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case(YEARLY_ICON):"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return YEARLY_STRING;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            task \u003d taskList.getTask(eventIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                return new CommandResult(String.format(Messages.REPEAT_ASSIGN_ERROR, task.getName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, taskList.getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert (task instanceof Event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //unset repeat if numOfPeriod \u003d 0, ignoring typeOfPeriod"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (numOfPeriod \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return unsetRepeat(taskList, (Event) task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //set to repeat otherwise"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return setRepeat(taskList, ((Event) task));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private CommandResult setRepeat(TaskList taskList, Event event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        boolean isDone \u003d event.getIsDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent newRepeatEvent \u003d new RepeatEvent(event.getName(), event.getLocation(), event.getDateAndTime(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                event.getEndDateAndTime(), event.getComments(), numOfPeriod, typeOfPeriod, event.getDateAndTime(), 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            newRepeatEvent.setDone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        newRepeatEvent.updateDate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        taskList.editTask(eventIndex, newRepeatEvent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return new CommandResult(String.format(Messages.REPEATING_SUCCESS_MESSAGE, newRepeatEvent.getName(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                numOfPeriod \u003d\u003d 1 ? \"\" : numOfPeriod + \" \", iconToString(typeOfPeriod),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                numOfPeriod \u003c\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private CommandResult unsetRepeat(TaskList taskList, Event event) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (event instanceof RepeatEvent) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            boolean isDone \u003d event.getIsDone();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            Event newEvent \u003d new Event(event.getName(), event.getLocation(), event.getDateAndTime(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    event.getEndDateAndTime(), event.getComments());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                taskList.getTask(eventIndex).setDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            taskList.editTask(eventIndex, newEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.STOP_REPEATING_SUCCESS_MESSAGE, newEvent.getName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return new CommandResult(String.format(Messages.REPEAT_NOT_SET_ERROR, event.getName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309556": 120
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "//@@author joelczk"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Search for tasks: search t/[all/event/assignment] n/[TASK NAME]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String dCOMMAND_WORD \u003d \"searchd\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String dCOMMAND_USAGE \u003d \"Search for tasks according to date: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + \"searchd t/[all/event/assignment] n/[TASK NAME] d/[DD/MM/YY]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static String CURRENT_COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static String CURRENT_COMMAND_USAGE \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String allTasks \u003d \"all\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String eventTasks \u003d \"event\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String assignmentTasks \u003d \"assignment\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected ArrayList\u003cInteger\u003e storeIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String searchParam;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructor for search and searchd command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param searchParam search query that has to be searched"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskType type of task to search through"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param date date to find search query"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public SearchCommand(String searchParam, String taskType, LocalDate date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.searchParam \u003d searchParam.toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        storeIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            CURRENT_COMMAND_WORD \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            CURRENT_COMMAND_USAGE \u003d COMMAND_USAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            CURRENT_COMMAND_WORD \u003d dCOMMAND_WORD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            CURRENT_COMMAND_USAGE \u003d dCOMMAND_USAGE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     *  Loops through the task list to find all tasks that matches search query for search command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param tasks task list containing all tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList storing the results"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList containing results that match the search query"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e loopArrayNoDateAllTasks(ArrayList\u003cTask\u003e tasks, ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                storeIndex.add(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Loops through the task list to find all tasks that match the search query and date for searchd command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param tasks task list containing all tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList storing the results"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param date query date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList containing results that match the search query and the date"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e loopArrayWithDateAllTasks(ArrayList\u003cTask\u003e tasks, ArrayList\u003cTask\u003e results, LocalDate date) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getName().toLowerCase().contains(searchParam) \u0026\u0026 task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                storeIndex.add(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Loops through the task list to find the Assignment or Event objects that match the search query."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param tasks task list containing all the tasks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList storing the results"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList storing Assignments objects that match the search query"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e loopArrayNoDateEventsAssignments(HashMap\u003cTask, Integer\u003e tasks, ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Map.Entry\u003cTask,Integer\u003e entry: tasks.entrySet()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            Task task \u003d entry.getKey();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                storeIndex.add(tasks.get(task));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Loops through the task list to find Assignment or Event objects that match the search query and the date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param tasks task list containing all the tasks"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList storing all the results"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param date query date"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList storing Assignment objects that match the search query and date"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e loopArrayWithDateEventsAssignments(HashMap\u003cTask, Integer\u003e tasks, ArrayList\u003cTask\u003e results,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                                                              LocalDate date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Map.Entry\u003cTask,Integer\u003e entry: tasks.entrySet()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            Task task \u003d entry.getKey();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getName().toLowerCase().contains(searchParam) \u0026\u0026 task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                storeIndex.add(tasks.get(task));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all the Events objects that matches the search query."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList TaskList object containing all the tasks"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all Event objects that match the search query"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAllTasks(TaskList taskList, LocalDate date) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskArray();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            results \u003d loopArrayNoDateAllTasks(tasks,results);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            results \u003d loopArrayWithDateAllTasks(tasks, results, date);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Helper function to get all the results of search query for Event and Assignment objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param date date of search query"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param eventsOrAssignments LinkedHashMap for Event or Assignment object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList containing all the results"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getEventOrAssignmentResults(LocalDate date, LinkedHashMap\u003cTask, Integer\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            eventsOrAssignments) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            results \u003d loopArrayNoDateEventsAssignments(eventsOrAssignments, results);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            results \u003d loopArrayWithDateEventsAssignments(eventsOrAssignments, results, date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all Event objects that matches the search query."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList TaskList object containing all the tasks"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all Event objects that matches the search query"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryEvents(TaskList taskList, LocalDate date) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LinkedHashMap\u003cTask, Integer\u003e events \u003d taskList.getEventsHashMap();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert events.size() \u003d\u003d taskList.getEventsHashMap().size();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return getEventOrAssignmentResults(date, events);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all Assignment objects that matches the search query."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList TaskList objects containing all assignment tasks"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all Assignment objects that matches the search query"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAssignments(TaskList taskList, LocalDate date) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LinkedHashMap\u003cTask, Integer\u003e assignments \u003d taskList.getAssignmentsHashMap();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert assignments.size() \u003d\u003d taskList.getAssignmentsHashMap().size();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return getEventOrAssignmentResults(date,assignments);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns list of search queries."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList containing the results of search query"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of search queries"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String searchList(ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert results.size() \u003e 0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int position \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        StringBuilder searchString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: results) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            searchString.append(String.format(\"%3d.%s\", storeIndex.get(position), task.toString()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            position++;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns String format of search queries."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList of the results of search queries."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return String format of search queries"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String resultsList(ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return (Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return (searchList(results));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert taskList.getListSize() \u003e 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case allTasks:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e results \u003d getSearchQueryAllTasks(taskList, date);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(results));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case eventTasks:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e eventResults \u003d getSearchQueryEvents(taskList, date);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(eventResults));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case assignmentTasks:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e assignmentResults \u003d getSearchQueryAssignments(taskList, date);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(assignmentResults));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    Parser.capitalize(CURRENT_COMMAND_WORD), CURRENT_COMMAND_USAGE));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 234,
      "e0309556": 1
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": " * Container for all default messages printed to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Start up and Exit Print Messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \" _______        _______        _______        _______ \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|   _   |      |       |      |   _   |      |       |\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|  |_|  |      |_     _|      |  |_|  |      |  _____|\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|       |        |   |        |       |      | |_____ \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|       | ___    |   |   ___  |       | ___  |_____  |\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|   _   ||   |   |   |  |   | |   _   ||   |  _____| |\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|__| |__||___|   |___|  |___| |__| |__||___| |_______|\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Exiting A.T.A.S\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Common Print Messages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DIVIDER \u003d \"_______________________________________________________________________\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NEWLINE_INDENT \u003d \"     \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String COMMENTS_INDENT \u003d \"            notes: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String REPEAT_EVENT_WITH_COMMENTS_INDENT \u003d \"      [%s]  notes: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String PROMPT_FOR_USER_INPUT \u003d \"\u003e \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Help Print Messages"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/yy HHmm\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String START_END_DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/yy HHmm - HHmm\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCHD_DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/YY\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    // Command Success Messages"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ADD_SUCCESS_MESSAGE \u003d \"Added task:\" + System.lineSeparator() + NEWLINE_INDENT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"%s\" + System.lineSeparator() + \"Now you have %d task%s in the list!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EMPTY_TASKLIST_MESSAGE \u003d \"No tasks were found\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NO_TODAY_TASKS_MESSAGE \u003d \"You have no tasks for today!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String LIST_TODAY_TASKS_MESSAGE \u003d \"Here are the tasks you have for today\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String LIST_TASKLIST_MESSAGE \u003d \"Here are the relevant tasks:%s%s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DONE_SUCCESS_MESSAGE \u003d \"[%s] has been marked done!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DELETE_SUCCESS_MESSAGE \u003d \"[%s] has been deleted!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_SUCCESS_MESSAGE \u003d \"All tasks have been deleted\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_DONE_SUCCESS_MESSAGE \u003d \"All completed tasks[Excluding repeated events] have been \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "           + \"removed\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCH_SUCCESS_MESSAGE \u003d \"Here are the search results:\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String EDIT_SUCCESS_MESSAGE \u003d \"Task edited successfully:\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + NEWLINE_INDENT + \"%s.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String REPEATING_SUCCESS_MESSAGE \u003d \"[%s] will repeat every %s%s%s.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String STOP_REPEATING_SUCCESS_MESSAGE \u003d \"[%s] will no longer repeat.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EDIT_PROMPT \u003d \"Please edit your chosen task.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    // Common Error Messages"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String INCORRECT_COMMAND_ERROR \u003d \"Oh no. %s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String UNKNOWN_COMMAND_ERROR \u003d \"Unknown command entered\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DATE_INCORRECT_OR_INVALID_ERROR \u003d \"Wrong date format or invalid date provided\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + System.lineSeparator() + DATE_FORMAT_HELP;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String CALENDAR_DATE_INVALID \u003d \"Invalid date provided\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + \"%s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCHD_DATE_INVALID \u003d \"Invalid date provided\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + System.lineSeparator() + \"%s\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String START_END_DATE_INCORRECT_OR_INVALID_ERROR \u003d \"Wrong date format or invalid date provided\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + START_END_DATE_FORMAT_HELP;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String NUM_FORMAT_ERROR \u003d \"Please provide an integer as the command parameter\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String INVALID_ID_ERROR \u003d \"Please provide a valid task number from %1$s\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String RANGE_OF_VALID_TASK_INDEX_MSG \u003d \"1 to %1$s\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //Error message when fail Parser pattern checking"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String INCORRECT_FORMAT_ERROR \u003d \"Incorrect format for %s Command\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + \"%s\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //Error message when checking of arguments"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String INCORRECT_ARGUMENT_ERROR \u003d \"Invalid arguments for %s Command\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + \"%s\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    // Unique Error Messages"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String NO_TASKS_MSG \u003d \"You have no tasks at the moment\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMPLETED_TASK_ERROR \u003d \"Task is already completed\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String SAME_TASK_ERROR \u003d \"Please use a different name. Task already exists in list\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EMPTY_DONE_CLEAR_ERROR \u003d \"There are no completed tasks at the moment\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String REPEAT_ASSIGN_ERROR \u003d \"%s is not an event. Please choose an event.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String REPEAT_NOT_SET_ERROR \u003d \"%s is not set to repeat.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EDIT_TYPE_ERROR \u003d \"Error: New Task Type must match edited Task Type\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //Saving Error Messages"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String INCORRECT_START_END_TIME_ERROR \u003d \"The end time should come after the start time\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String INCORRECT_STORAGE_FORMAT_ERROR \u003d \"The local save file is of an unknown format. \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"Exit now using \u003cCtrl C\u003e to manually fix the save file, \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"or the save file will be overwritten with the new session data\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NO_SAVE_FILE_MESSAGE \u003d \"No existing save file found. A new save file will be created\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String SAVE_FAILED_MESSAGE \u003d \"Oh no. Something went wrong while saving, please try again later\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EMPTY_SEARCH_RESULTS_ERROR \u003d \"There are no matching tasks for the search query\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 29,
      "joelczk": 22,
      "Keith-JK": 4,
      "e0309556": 36,
      "-": 1,
      "jichngan": 3
    }
  },
  {
    "path": "src/main/java/exceptions/AtasException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class AtasException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public AtasException(String errorMsg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Formats the string that is return from the exception thrown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return String with default error message for this error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"ERROR: \" + super.getMessage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "-": 1,
      "jichngan": 2,
      "e0309556": 11
    }
  },
  {
    "path": "src/main/java/seedu/atas/Atas.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Atas {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Instantiate Ui and TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Atas() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            this.taskList \u003d storage.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            updateEventDate(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (AtasException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(e.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(Messages.NO_SAVE_FILE_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Starts Atas Process."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        showTodayTasksIfAny();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Run loop until exit command is received."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void runLoop() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        while (!ExitCommand.isExit()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            CommandResult result \u003d command.execute(taskList, ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(result.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            trySaveTaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(Messages.DIVIDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private void trySaveTaskList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(Messages.SAVE_FAILED_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private void updateEventDate(TaskList taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        for (Task task : taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (task instanceof RepeatEvent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                ((RepeatEvent) task).updateDate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private void showTodayTasksIfAny() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        ArrayList\u003cTask\u003e todayTasks \u003d taskList.getTasksByDays(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String todayTasksString \u003d new ListCommand(null).showListTasks(taskList.getTaskArray(), todayTasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        // edit result to show a message more suited for a welcome screen"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (todayTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            todayTasksString \u003d Messages.NO_TODAY_TASKS_MESSAGE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            todayTasksString \u003d todayTasksString.substring(todayTasksString.indexOf(System.lineSeparator()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            todayTasksString \u003d Messages.LIST_TODAY_TASKS_MESSAGE + todayTasksString;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        ui.showToUser(todayTasksString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Main entry-point for the Atas application."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        new Atas().run();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 83,
      "joelczk": 2,
      "Keith-JK": 4,
      "-": 1,
      "e0309556": 11
    }
  },
  {
    "path": "src/main/java/seedu/atas/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.CalendarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.IncorrectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String COMMAND_TYPE_FIELD \u003d \"command\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String TASK_NAME_FIELD \u003d \"taskName\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String MODULE_NAME_FIELD \u003d \"moduleName\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String LOCATION_FIELD \u003d \"location\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String DATE_TIME_FIELD \u003d \"dateTime\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String COMMENTS_FIELD \u003d \"comments\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String TASK_TYPE_FIELD \u003d \"taskType\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String TASK_INDEX_FIELD \u003d \"index\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String NUM_OF_PERIOD_FIELD \u003d \"numOfPeriod\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String TYPE_OF_PERIOD_FIELD \u003d \"typeOfPeriod\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static final String CALENDAR_DATE_FIELD \u003d \"calendarDate\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add assignment command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern ASSIGNMENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003c\" + COMMAND_TYPE_FIELD + \"\u003e(?i)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + AssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003c\" + TASK_NAME_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+m/\\\\s*(?\u003c\" + MODULE_NAME_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003c\" + DATE_TIME_FIELD + \"\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003c\" + COMMENTS_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)$\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add event command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern EVENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003c\" + COMMAND_TYPE_FIELD + \"\u003e(?i)\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003c\" + TASK_NAME_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+l/\\\\s*(?\u003c\" + LOCATION_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003c\" + DATE_TIME_FIELD + \"\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4}\\\\s*-\\\\s*\\\\d{4})\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003c\" + COMMENTS_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)$\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //regex for search command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final Pattern SEARCH_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003c\" + COMMAND_TYPE_FIELD + \"\u003e(?i)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + SearchCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+t/\\\\s*(?\u003c\" + TASK_TYPE_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003c\" + TASK_NAME_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //regex for Searchd command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final Pattern SEARCHD_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003c\" + COMMAND_TYPE_FIELD + \"\u003e(?i)\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + SearchCommand.dCOMMAND_WORD"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+t/\\\\s*(?\u003c\" + TASK_TYPE_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003c\" + TASK_NAME_FIELD + \"\u003e[^|/\\\\s]+[^|/]*)\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003c\" + DATE_TIME_FIELD + \"\u003e\\\\d{2}/\\\\d{2}/\\\\d{2})\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //regex for repeat command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final Pattern REPEAT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003c\" + COMMAND_TYPE_FIELD + \"\u003e(?i)\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + RepeatCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+id/\\\\s*(?\u003c\" + TASK_INDEX_FIELD + \"\u003e\\\\d+)\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+p/\\\\s*(?\u003c\" + NUM_OF_PERIOD_FIELD + \"\u003e\\\\d+)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"(?\u003c\" + TYPE_OF_PERIOD_FIELD + \"\u003e[dwmy])?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    //regex for calendar command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final Pattern CALENDAR_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003c\" + COMMAND_TYPE_FIELD + \"\u003e(?i)\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + CalendarCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\b)\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003c\" + CALENDAR_DATE_FIELD + \"\u003e\\\\d{2}/\\\\d{2})\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a Command object depending on the command input by the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param fullCommand line input by the user, which represents a command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Command object depending on user input, with the appropriate arguments set"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Command parseCommand(String fullCommand) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String commandType \u003d fullCommand.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareHelpCommand(fullCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case AssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareAssignmentCommand(fullCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareClearCommand(fullCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDoneCommand(fullCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareEventCommand(fullCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareListCommand(fullCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareSearchCommand(fullCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case SearchCommand.dCOMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareSearchdCommand(fullCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareEditCommand(fullCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case RepeatCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareRepeatCommand(fullCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareCalendarCommand(fullCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareExitCommand(fullCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.UNKNOWN_COMMAND_ERROR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a LocalDateTime object based on an input String with the format INPUT_DATE_FORMAT."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param dateTimeString String representing a date with the format dd/MM/yy HHmm"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDateTime representing the date and time specified in dateTimeString"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException    if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static LocalDateTime parseDate(String dateTimeString)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        // handle issue where there are multiple spaces between the date and the time"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] dateAndTime \u003d dateTimeString.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String formattedDateTimeString \u003d dateAndTime[0] + \" \" + dateAndTime[1];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return LocalDateTime.parse(formattedDateTimeString, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareAssignmentCommand(String fullCommand) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d ASSIGNMENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    capitalize(AssignmentCommand.COMMAND_WORD), AssignmentCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            dateTime \u003d parseDate(matcher.group(DATE_TIME_FIELD));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String assignmentName \u003d capitalize(matcher.group(TASK_NAME_FIELD).replaceAll(\"\\\\s+\", \" \").trim());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String moduleName \u003d matcher.group(MODULE_NAME_FIELD).replaceAll(\"\\\\s+\", \" \").trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d capitalize(matcher.group(COMMENTS_FIELD).replaceAll(\"\\\\s+\", \" \").trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new AssignmentCommand(assignmentName, moduleName, dateTime, comments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareSearchCommand(String fullCommand) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        final Matcher matcher \u003d SEARCH_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    capitalize(SearchCommand.COMMAND_WORD), SearchCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskType \u003d matcher.group(TASK_TYPE_FIELD).toLowerCase().trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskName \u003d matcher.group(TASK_NAME_FIELD).trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return new SearchCommand(taskName, taskType, null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareSearchdCommand(String fullCommand) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        final Matcher matcher \u003d SEARCHD_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    capitalize(SearchCommand.dCOMMAND_WORD), SearchCommand.dCOMMAND_USAGE));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskType \u003d matcher.group(TASK_TYPE_FIELD).toLowerCase().trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskName \u003d matcher.group(TASK_NAME_FIELD).trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String stringDate \u003d matcher.group(DATE_TIME_FIELD).trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            date \u003d LocalDate.parse(stringDate, INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new SearchCommand(taskName, taskType, date);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.SEARCHD_DATE_INVALID,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    Messages.SEARCHD_DATE_FORMAT_HELP));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 1 || tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int deleteIndex;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            deleteIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    capitalize(DeleteCommand.COMMAND_WORD), DeleteCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DeleteCommand(deleteIndex);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 1 || tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int doneIndex;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            doneIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    capitalize(DoneCommand.COMMAND_WORD), DoneCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DoneCommand(doneIndex);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareEventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d EVENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    Parser.capitalize(EventCommand.COMMAND_WORD), EventCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String startEndDateTime \u003d matcher.group(DATE_TIME_FIELD);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String[] dateTimeTokens \u003d startEndDateTime.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String[] timeTokens \u003d dateTimeTokens[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            startDateTime \u003d parseDate(dateTimeTokens[0] + \" \" + timeTokens[0].trim());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            endDateTime \u003d parseDate(dateTimeTokens[0] + \" \" + timeTokens[1].trim());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.START_END_DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!endDateTime.isAfter(startDateTime)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.INCORRECT_START_END_TIME_ERROR);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String eventName \u003d capitalize(matcher.group(TASK_NAME_FIELD).replaceAll(\"\\\\s+\", \" \").trim());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String location \u003d matcher.group(LOCATION_FIELD).replaceAll(\"\\\\s+\", \" \").trim();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d capitalize(matcher.group(COMMENTS_FIELD).replaceAll(\"\\\\s+\", \" \").trim());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new EventCommand(eventName, location, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static Command prepareListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String[] tokens \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            // check if list has no parameters"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return new ListCommand(tokens[1].replaceAll(\"\\\\s+\", \" \").trim());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareClearCommand(String fullCommand) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String[] tokens \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new ClearCommand(null);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return new ClearCommand(tokens[1].replaceAll(\"\\\\s+\", \" \").trim());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareExitCommand(String fullCommand) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert fullCommand.trim().equals(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (fullCommand.equals(ExitCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    capitalize(ExitCommand.COMMAND_WORD), ExitCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareHelpCommand(String fullCommand) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert fullCommand.trim().equals(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (fullCommand.equals(HelpCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    capitalize(HelpCommand.COMMAND_WORD), HelpCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //@@author jichngan"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static Command prepareEditCommand(String fullCommand) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        int editIndex;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            editIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    capitalize(EditCommand.COMMAND_WORD), EditCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new EditCommand(editIndex);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static Command prepareRepeatCommand(String fullCommand) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        final Matcher matcher \u003d REPEAT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    capitalize(RepeatCommand.COMMAND_WORD), RepeatCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(matcher.group(TASK_INDEX_FIELD)) - 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            int numOfPeriod \u003d Integer.parseInt(matcher.group(NUM_OF_PERIOD_FIELD));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            String typeOfPeriod \u003d matcher.group(TYPE_OF_PERIOD_FIELD);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (numOfPeriod !\u003d 0 \u0026\u0026 typeOfPeriod \u003d\u003d null) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                        capitalize(RepeatCommand.COMMAND_WORD), RepeatCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new RepeatCommand(eventIndex, numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            //Error will be caught by Matcher from the regex above"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    //@@author Keith-JK"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareCalendarCommand(String fullCommand) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final Matcher matcher \u003d CALENDAR_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    capitalize(CalendarCommand.COMMAND_WORD), CalendarCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            date \u003d LocalDate.parse("
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    String.format(\"01/%s\", matcher.group(CALENDAR_DATE_FIELD).trim()), INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.CALENDAR_DATE_INVALID, CalendarCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CalendarCommand(date);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Capitalizes the first alphabet of a string."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param str String to be capitalized"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return Capitalized string"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static String capitalize(String str) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (str \u003d\u003d null || str.isEmpty()) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return str;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return str.substring(0, 1).toUpperCase() + str.substring(1);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 208,
      "joelczk": 49,
      "Keith-JK": 42,
      "e0309556": 64,
      "jichngan": 15
    }
  },
  {
    "path": "src/main/java/seedu/atas/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "//@@author lwxymere"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected static final String DEFAULT_FILEPATH \u003d \"./atasData.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected final String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Reads data from the local save file specified by filePath, and returns the corresponding TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return TaskList containing all tasks in the save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws AtasException if the save file format is incorrect"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IOException if no save file is found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public TaskList load() throws AtasException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Scanner scanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String encodedTask \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Task task \u003d decodeTask(encodedTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            assert task !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private Task decodeTask(String encodedTask) throws AtasException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String taskType \u003d encodedTask.substring(0, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            case Assignment.ASSIGNMENT_ICON:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                task \u003d Assignment.decodeTask(encodedTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            case Event.EVENT_ICON:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                task \u003d Event.decodeTask(encodedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            case RepeatEvent.REPEAT_ICON:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                task \u003d RepeatEvent.decodeTask(encodedTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                throw new AtasException(Messages.INCORRECT_STORAGE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throw new AtasException(Messages.INCORRECT_STORAGE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Saves the taskList\u0027s current state into a local file located at filePath."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param taskList TaskList to be stored"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IOException if an IO error occurs in FileWriter methods"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        for (Task task : taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            sj.add(task.encodeTask());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        fileWriter.write(sj.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 85,
      "e0309556": 1
    }
  },
  {
    "path": "src/main/java/seedu/atas/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for TaskList class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Instantiate a new ArrayList object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for size of ArrayList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList size"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for ArrayList of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArray() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Obtain a range of numbers that is valid for usage on taskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param taskList The interested list in TaskManager to find the range of values"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return A string with the range of valid numbers."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public String getRangeOfValidIndex(TaskList taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        int maxTasks \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return String.format(Messages.RANGE_OF_VALID_TASK_INDEX_MSG, maxTasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Checks for duplicate task within tasklist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param tasklist TaskList to be checked against"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param addedTask new Task that needs to be checked"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return True if there already exists a task within tasklist. Otherwise, false."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public Boolean isSameTask(TaskList tasklist, Task addedTask) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        for (Task task : tasklist.getTaskArray()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (task.equals(addedTask)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //@@author jichngan"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Checks for duplicate tasks within tasklist that is not the current specified task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param tasklist TaskList to be checked against"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editedTask Edited task that needs to be checked"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editIndex Checked against list index to see whether its the task to be edited"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return True if there exists another task within taskList. Otherwise, false."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public Boolean isSameEdit(TaskList tasklist, Task editedTask, int editIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        for (Task task : tasklist.getTaskArray()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            if (task.equals(editedTask) \u0026\u0026 index !\u003d editIndex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for the current Local Date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Formats Local Date into \"dd/MM/yyyy\" format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return LocalDate object of the formatted current Date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currentDateObj \u003d LocalDate.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        DateTimeFormatter formattedDateObj \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String currentDate \u003d currentDateObj.format(formattedDateObj);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate formattedCurrDate \u003d LocalDate.parse(currentDate, formattedDateObj);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return formattedCurrDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter method for tasks depending of days from today."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param days Integer representing number of days from today"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList object containing all tasks from indicated days from today"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByDays(int days) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assert days \u003e\u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currDate \u003d getCurrentDate();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate daysIndicated \u003d currDate.plusDays(days);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            assert taskList.size() \u003c\u003d tasks.size();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            if (currDate.compareTo(taskDate) \u003c\u003d 0 \u0026\u0026 taskDate.compareTo(daysIndicated) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Getter method for tasks that are events and in the future."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return ArrayList object containing all future events."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getUpcomingEventArray() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        ArrayList\u003cTask\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            LocalDateTime taskDateTime \u003d task.getDateAndTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if ((task instanceof Event \u0026\u0026 taskDateTime.compareTo(currDateTime) \u003e 0)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    || (task instanceof RepeatEvent"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    \u0026\u0026 taskDateTime.toLocalDate().compareTo(currDateTime.toLocalDate()) \u003d\u003d 0"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                    \u0026\u0026 ((RepeatEvent) task).getNextDateTime().compareTo(currDateTime) \u003e 0)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                eventList.add(task);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Getter method for tasks that are assignments and not marked done."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return ArrayList object containing all incomplete assignments"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getIncompleteAssignArray() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        ArrayList\u003cTask\u003e assignList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            if (task instanceof Assignment \u0026\u0026 !task.getIsDone()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                assignList.add(task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return assignList;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Getter for all events tasks."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList object containing all events"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public LinkedHashMap\u003cTask,Integer\u003e getEventsHashMap() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LinkedHashMap\u003cTask,Integer\u003e eventList \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                eventList.put(task,index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Getter method for Task with the provided index in TaskList."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param index index of Task to return"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return Task object with corresponding index"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public Task getTask(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Getter for all assignment tasks."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList object containing all assignments"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public LinkedHashMap\u003cTask,Integer\u003e getAssignmentsHashMap() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LinkedHashMap\u003cTask,Integer\u003e assignmentList \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                assignmentList.put(task,index);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return assignmentList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Adds a task to TaskList."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param task task object to be added"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Set the Task corresponding to index specified as done."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param doneIndex index of Task to be marked done"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of size of current TaskList"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void markTaskAsDone(int doneIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.get(doneIndex).setDone();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.get(doneIndex).getIsDone() \u003d\u003d true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Delete tasks according to the index specified by user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param deleteIndex index of task to be deleted"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of the size of current Tasklist"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void deleteTask(int deleteIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.remove(deleteIndex);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.size() \u003d\u003d size - 1;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Edits task according to the index specified by user."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Edited task replaces the index of the old task."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editIndex Integer of index of task to be edited"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editedTask Edited task object to be replaced in ArrayList"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @throws IndexOutOfBoundsException Thrown when index is out of range of the current TaskList"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editTask(int editIndex, Task editedTask) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        tasks.set(editIndex, editedTask);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes all the tasks in the list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes the all tasks specified by doneIndex."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param doneIndex ArrayList of indexes to be removed"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void deleteAllDoneTask(ArrayList\u003cInteger\u003e doneIndex) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        doneIndex.sort(Comparator.reverseOrder());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (int index : doneIndex) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            deleteTask(index);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    //@@author Keith-JK"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Getter for tasks that falls within the provided time period."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate representing start of time period"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate representing end of time period"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return ArrayList of tasks that falls withing time period"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByRange(LocalDate startOfRange, LocalDate endOfRange) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            assert taskArrayList.size() \u003c\u003d tasks.size();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (isWithinRange(startOfRange, endOfRange, taskDate)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                taskArrayList.add(task);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            // Add repeat Events that is before startOfRange but will spillover to provided time period"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (task instanceof RepeatEvent \u0026\u0026 startOfRange.compareTo(taskDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                addFirstRepeatedEventWithinRange(startOfRange, endOfRange, task, taskDate, taskArrayList);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return taskArrayList;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds the first instance of the repeated event that falls within given time period if exists."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate representing start of time period"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate representing end of time period"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param task repeating Event to be checked"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskDate Event date"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskArrayList ArrayList of Task that is to be returned"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addFirstRepeatedEventWithinRange(LocalDate startOfRange, LocalDate endOfRange,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                               Task task, LocalDate taskDate, ArrayList\u003cTask\u003e taskArrayList) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        RepeatEvent event \u003d (RepeatEvent) task;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int numOfPeriod \u003d event.getNumOfPeriod();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String typeOfPeriod \u003d event.getTypeOfPeriod();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        switch (typeOfPeriod) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.YEARLY_ICON:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addYearlyRepeatEvent(startOfRange, endOfRange, taskDate, taskArrayList, event, numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.MONTHLY_ICON:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addMonthlyRepeatEvent(startOfRange, endOfRange, taskDate, taskArrayList, event, numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.WEEKLY_ICON:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addWeeklyRepeatEvent(startOfRange, endOfRange, taskDate, taskArrayList, event, numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        case RepeatCommand.DAILY_ICON:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addDailyRepeatEvent(startOfRange, endOfRange, taskDate, taskArrayList, event, numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds a daily RepeatEvent if RepeatEvent eventually falls within the time period provided."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate that indicates start of time period"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate that indicates end of time period"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskDate LocalDate of the event"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskArrayList ArrayList of Task that is to be returned"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param event RepeatEvent to be checked"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param numOfPeriod Integer that represents the frequency of repeats"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param typeOfPeriod String that represents type of repeats"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addDailyRepeatEvent(LocalDate startOfRange, LocalDate endOfRange,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                     LocalDate taskDate, ArrayList\u003cTask\u003e taskArrayList,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                     RepeatEvent event, int numOfPeriod, String typeOfPeriod) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int timesRepeated \u003d 1; taskDate.plusDays(numOfPeriod * timesRepeated)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "             .compareTo(endOfRange) \u003c\u003d 0; timesRepeated++) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (isWithinRange(startOfRange, endOfRange,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    taskDate.plusDays(numOfPeriod * timesRepeated))) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                RepeatEvent dailyEventToAdd \u003d new RepeatEvent(event.getName(),"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getLocation(),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getDateAndTime().plusDays(timesRepeated * numOfPeriod),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getEndDateAndTime().plusDays(timesRepeated * numOfPeriod), event.getComments(),"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        numOfPeriod, typeOfPeriod, event.getOriginalDateAndTime(), event.getPeriodCounter());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                taskArrayList.add(dailyEventToAdd);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds a weekly RepeatEvent if RepeatEvent eventually falls within the time period provided."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate that indicates start of time period"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate that indicates end of time period"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskDate LocalDate of the event"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskArrayList ArrayList of Task that is to be returned"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param event RepeatEvent to be checked"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param numOfPeriod Integer that represents the frequency of repeats"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param typeOfPeriod String that represents type of repeats"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addWeeklyRepeatEvent(LocalDate startOfRange, LocalDate endOfRange,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                      LocalDate taskDate, ArrayList\u003cTask\u003e taskArrayList,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                      RepeatEvent event, int numOfPeriod, String typeOfPeriod) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int timesRepeated \u003d 1; taskDate.plusWeeks(numOfPeriod * timesRepeated)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .compareTo(endOfRange) \u003c\u003d 0; timesRepeated++) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (isWithinRange(startOfRange, endOfRange,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    taskDate.plusWeeks(numOfPeriod * timesRepeated))) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                RepeatEvent weeklyEventToAdd \u003d new RepeatEvent(event.getName(),"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getLocation(),"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getDateAndTime().plusWeeks(timesRepeated * numOfPeriod),"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getEndDateAndTime().plusWeeks(timesRepeated * numOfPeriod), event.getComments(),"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        numOfPeriod, typeOfPeriod, event.getOriginalDateAndTime(), event.getPeriodCounter());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                taskArrayList.add(weeklyEventToAdd);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds a monthly RepeatEvent if RepeatEvent eventually falls within the time period provided."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate that indicates start of time period"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate that indicates end of time period"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskDate LocalDate of the event"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskArrayList ArrayList of Task that is to be returned"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param event RepeatEvent to be checked"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param numOfPeriod Integer that represents the frequency of repeats"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param typeOfPeriod String that represents type of repeats"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addMonthlyRepeatEvent(LocalDate startOfRange, LocalDate endOfRange,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                       LocalDate taskDate, ArrayList\u003cTask\u003e taskArrayList,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                       RepeatEvent event, int numOfPeriod, String typeOfPeriod) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int timesRepeated \u003d 1; taskDate.plusMonths(numOfPeriod * timesRepeated)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .compareTo(endOfRange) \u003c\u003d 0; timesRepeated++) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (isWithinRange(startOfRange, endOfRange,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    taskDate.plusMonths(numOfPeriod * timesRepeated))) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                Event monthlyEventToAdd \u003d new RepeatEvent(event.getName(),"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getLocation(),"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getDateAndTime().plusMonths(timesRepeated * numOfPeriod),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getEndDateAndTime().plusMonths(timesRepeated * numOfPeriod), event.getComments(),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        numOfPeriod, typeOfPeriod, event.getOriginalDateAndTime(), event.getPeriodCounter());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                taskArrayList.add(monthlyEventToAdd);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds a yearly RepeatEvent if RepeatEvent eventually falls within the time period provided."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate that indicates start of time period"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate that indicates end of time period"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskDate LocalDate of the event"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskArrayList ArrayList of Task that is to be returned"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param event RepeatEvent to be checked"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param numOfPeriod Integer that represents the frequency of repeats"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param typeOfPeriod String that represents type of repeats"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addYearlyRepeatEvent(LocalDate startOfRange, LocalDate endOfRange,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                      LocalDate taskDate, ArrayList\u003cTask\u003e taskArrayList,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                      RepeatEvent event, int numOfPeriod, String typeOfPeriod) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int timesRepeated \u003d 1; taskDate.plusYears(numOfPeriod * timesRepeated)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .compareTo(endOfRange) \u003c\u003d 0; timesRepeated++) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (isWithinRange(startOfRange, endOfRange,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    taskDate.plusYears(numOfPeriod * timesRepeated))) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                RepeatEvent yearlyEventToAdd \u003d new RepeatEvent(event.getName(),"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getLocation(),"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getDateAndTime().plusYears(timesRepeated * numOfPeriod),"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        event.getEndDateAndTime().plusYears(timesRepeated * numOfPeriod), event.getComments(),"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        numOfPeriod, typeOfPeriod, event.getOriginalDateAndTime(), event.getPeriodCounter());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                taskArrayList.add(yearlyEventToAdd);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Checks if taskDate is within the range of time period provided."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate representing start of time period"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate representing end of time period"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskDate LocalDate to be checked against the time period"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return true if taskDate is within the time period, false if otherwise"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private boolean isWithinRange(LocalDate startOfRange, LocalDate endOfRange, LocalDate taskDate) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return startOfRange.compareTo(taskDate) \u003c\u003d 0 \u0026\u0026 endOfRange.compareTo(taskDate) \u003e\u003d 0;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "joelczk": 98,
      "Keith-JK": 184,
      "jichngan": 100,
      "e0309556": 64
    }
  },
  {
    "path": "src/main/java/seedu/atas/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a line divider."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints welcome messages."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        out.println(Messages.LOGO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a prompt to user and returns the next line of user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return String of user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        out.print(Messages.PROMPT_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Prints all messages with a newline in between each message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param messages strings to be shown to the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void showToUser(String... messages) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            out.println(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "Keith-JK": 31,
      "e0309556": 17
    }
  },
  {
    "path": "src/main/java/tasks/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class Assignment extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_ICON \u003d \"A\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Assignment object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param name name of Assignment"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param module module for Assignment"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param deadline deadline of Assignment"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param comments comments for Assignment"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Assignment(String name, String module, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + ASSIGNMENT_ICON + \"]\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + deadline.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | mod: \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + module"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public boolean equals(Object addedTask) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return super.equals(addedTask)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \u0026\u0026 this.getModule().equals(((Assignment) addedTask).getModule());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(ASSIGNMENT_ICON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(module);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(deadline.format(Parser.INPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(comments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Converts an encoded Assignment back to an Assignment object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param encodedTask Assignment encoded using encodedTask()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Assignment with the correct attributes set"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if encoded deadline cannot be parsed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if encodedTask is not a String returned by calling encodeTask() on"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *              an Assignment"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Assignment decodeTask(String encodedTask)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\"\\\\\" + STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens[0].equals(ASSIGNMENT_ICON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String name \u003d tokens[2];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String module \u003d tokens[3];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime deadline \u003d Parser.parseDate(tokens[4]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d tokens[5];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 6;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment assignment \u003d new Assignment(name, module, deadline, comments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            assignment.setDone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return assignment;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 94,
      "joelczk": 6,
      "-": 1,
      "e0309556": 7
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "//@@author lwxymere"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_ICON \u003d \"E\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime startDateAndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime endDateAndTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Event object constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param name name of Event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param location location of Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param startDateTime starting date and time of Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param endDateTime ending date and time of Event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param comments comments for the Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Event(String name, String location, LocalDateTime startDateTime, LocalDateTime endDateTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                 String comments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.startDateAndTime \u003d startDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.endDateAndTime \u003d endDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime.toLocalTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending date and time of the event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDateTime object representing the end time and date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getEndDateAndTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending date of the event."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDate object representing the end date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending time of the event."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalTime object representing the end time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime.toLocalTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + EVENT_ICON + \"]\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + location"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + startDateAndTime.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + endDateAndTime.format(Parser.PRINT_TIME_FORMAT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(EVENT_ICON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(location);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(startDateAndTime.format(Parser.INPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(endDateAndTime.format(Parser.INPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(comments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Converts an encoded Event back to an Event object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param encodedTask Event encoded using encodedTask()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Event with the correct attributes set"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if encoded startDateAndTime or endDateAndTime cannot be parsed"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if encodedTask is not a String returned by calling encodeTask() on"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *              an Event"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Event decodeTask(String encodedTask)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\"\\\\\" + STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens[0].equals(EVENT_ICON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String name \u003d tokens[2];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String location \u003d tokens[3];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime startDateAndTime \u003d Parser.parseDate(tokens[4]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime endDateAndTime \u003d Parser.parseDate(tokens[5]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d tokens[6];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 7;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event event \u003d new Event(name, location, startDateAndTime, endDateAndTime, comments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            event.setDone();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 129,
      "joelczk": 4
    }
  },
  {
    "path": "src/main/java/tasks/RepeatEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "//@@author e0309556"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "public class RepeatEvent extends Event {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static final String REPEAT_ICON \u003d \"R\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    int numOfPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    String typeOfPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    int periodCounter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    LocalDateTime originalDateAndTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    // nextDateAndTime stores when the next time the event will occur for usage in different list commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    LocalDateTime nextDateAndTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Event object constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param name                name of Event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param location            location of Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param startDateTime       starting date and time of Event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param endDateTime         ending date and time of Event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param comments            comments for the Event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param numOfPeriod         number of period it repeats for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param typeOfPeriod        type of periods which could be (d)aily, (w)eekly, (m)onthly or (y)early"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param originalDateAndTime Original Date and Time when Event was set to Repeat, used to keep track"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     *                            time lapses especially with respect to dates at end of the month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param periodCounter       number of periods that has past since originalDateAndTime"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public RepeatEvent(String name, String location, LocalDateTime startDateTime, LocalDateTime endDateTime,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                       String comments, int numOfPeriod, String typeOfPeriod, LocalDateTime originalDateAndTime,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                       int periodCounter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        super(name, location, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.numOfPeriod \u003d numOfPeriod;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.typeOfPeriod \u003d typeOfPeriod;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.originalDateAndTime \u003d originalDateAndTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.periodCounter \u003d periodCounter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public int getNumOfPeriod() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return numOfPeriod;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public String getTypeOfPeriod() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return typeOfPeriod;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public LocalDateTime getNextDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return nextDateAndTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public int getPeriodCounter() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return periodCounter;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public LocalDateTime getOriginalDateAndTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return originalDateAndTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Update date of event to the next upcoming date (after today) if the recurring event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * has already occurred."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void updateDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        switch (typeOfPeriod) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (RepeatCommand.DAILY_ICON):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            updateDateByDays(numOfPeriod);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (RepeatCommand.WEEKLY_ICON):"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            updateDateByDays(numOfPeriod * 7);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (RepeatCommand.MONTHLY_ICON):"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            updateDateByMonth(numOfPeriod);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        case (RepeatCommand.YEARLY_ICON):"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            updateDateByYear(numOfPeriod);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Update date of event if it is a daily recurring event."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param numOfPeriod num of days before it recurs"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private void updateDateByDays(int numOfPeriod) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate startDate \u003d startDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //Iterate through numOfPeriod of days to find the next date of task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        while (startDate.compareTo(currDate) \u003c 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            startDate \u003d startDate.plusDays(numOfPeriod);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            periodCounter +\u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            this.setNotDone();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        startDateAndTime \u003d originalDateAndTime.plusDays(periodCounter * numOfPeriod);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //Update date of endDateAndTime without changing time."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        endDateAndTime \u003d LocalDateTime.of(originalDateAndTime.plusDays(periodCounter * numOfPeriod).toLocalDate(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                endDateAndTime.toLocalTime());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        nextDateAndTime \u003d startDateAndTime.plusDays(numOfPeriod);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Update date of event if it is a monthly recurring event."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param numOfPeriod num of months before it recurs"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private void updateDateByMonth(int numOfPeriod) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate startDate \u003d startDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //Iterate through numOfPeriod of months to find the next date of task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        while (startDate.compareTo(currDate) \u003c 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            startDate \u003d startDate.plusMonths(numOfPeriod);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            periodCounter +\u003d 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            this.setNotDone();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        startDateAndTime \u003d originalDateAndTime.plusMonths(periodCounter * numOfPeriod);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //Update date of endDateAndTime without changing time."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        endDateAndTime \u003d LocalDateTime.of(originalDateAndTime.plusMonths(periodCounter * numOfPeriod).toLocalDate(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                endDateAndTime.toLocalTime());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        nextDateAndTime \u003d startDateAndTime.plusMonths(numOfPeriod);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Update date of event if it is a yearly recurring event."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param numOfPeriod num of years before it recurs"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private void updateDateByYear(int numOfPeriod) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate startDate \u003d startDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //Iterate through numOfPeriod of years to find the next date of task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        while (startDate.compareTo(currDate) \u003c 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            startDate \u003d startDate.plusYears(numOfPeriod);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            periodCounter +\u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            this.setNotDone();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        startDateAndTime \u003d originalDateAndTime.plusYears(periodCounter * numOfPeriod);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        //Update date of endDateAndTime without changing time."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        endDateAndTime \u003d LocalDateTime.of(originalDateAndTime.plusYears(periodCounter * numOfPeriod).toLocalDate(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                endDateAndTime.toLocalTime());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        nextDateAndTime \u003d startDateAndTime.plusYears(numOfPeriod);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return \"[\" + REPEAT_ICON + \"]\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + String.format(\"%s %s\", getStatusIcon(), name)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + location"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + startDateAndTime.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + endDateAndTime.format(Parser.PRINT_TIME_FORMAT)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + String.format(Messages.REPEAT_EVENT_WITH_COMMENTS_INDENT, numOfPeriod + typeOfPeriod)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(REPEAT_ICON);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(location);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(startDateAndTime.format(Parser.INPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(endDateAndTime.format(Parser.INPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(Integer.toString(numOfPeriod));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(typeOfPeriod);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(Integer.toString(periodCounter));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(originalDateAndTime.format(Parser.INPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        sj.add(comments);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Converts an encoded RepeatEvent back to a RepeatEvent object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @param encodedTask RepeatEvent encoded using encodedTask()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @return repeatEvent with the correct attributes set"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @throws DateTimeParseException if encoded startDateAndTime or endDateAndTime cannot be parsed"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * @throws IndexOutOfBoundsException if encodedTask is not a String returned by calling encodeTask() on"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     *              an RepeatEvent"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static RepeatEvent decodeTask(String encodedTask)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\"\\\\\" + STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert tokens[0].equals(REPEAT_ICON);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String name \u003d tokens[2];"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String location \u003d tokens[3];"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime startDateAndTime \u003d Parser.parseDate(tokens[4]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime endDateAndTime \u003d Parser.parseDate(tokens[5]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        int numOfPeriod \u003d Integer.parseInt(tokens[6]);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String typeOfPeriod \u003d tokens[7];"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        int periodCounter \u003d Integer.parseInt(tokens[8]);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime originalDateAndTime \u003d Parser.parseDate(tokens[9]);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        String comments \u003d tokens[10];"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert tokens.length \u003d\u003d 11;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d new RepeatEvent(name, location, startDateAndTime, endDateAndTime,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                comments, numOfPeriod, typeOfPeriod, originalDateAndTime, periodCounter);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            repeatEvent.setDone();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return repeatEvent;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309556": 214
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String STORAGE_DELIMITER \u003d \"|\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Task object representing a Event or Assignment object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of event or assignment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments to the event or assignment"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Task(String name, String comments) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void setNotDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDateTime getDateAndTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalTime getTime();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns symbol representing if task is completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return return tick if task is completed, else return cross"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[/]\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[X]\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return String.format(\"%s %s\", getStatusIcon(), name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public boolean equals(Object addedTask) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (this \u003d\u003d addedTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if ((this instanceof RepeatEvent \u0026\u0026 addedTask instanceof Event)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            || (this instanceof Event \u0026\u0026 addedTask instanceof RepeatEvent)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return name.equals(((Task) addedTask).getName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (addedTask \u003d\u003d null || getClass() !\u003d addedTask.getClass()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assert ((addedTask.getClass() \u003d\u003d Assignment.class) || (addedTask.getClass() \u003d\u003d Event.class));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Task task \u003d (Task) addedTask;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        return name.equals(task.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Encodes a task for local storage."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return String that represents the encoded task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract String encodeTask();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 18,
      "joelczk": 43,
      "Keith-JK": 8,
      "e0309556": 26
    }
  },
  {
    "path": "src/test/java/command/AssignmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        AssignmentCommand testAssignmentCommand \u003d new AssignmentCommand("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"assignment\", \"CS2113T\", Parser.parseDate(\"20/03/20 0900\"), \"yes\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testAssignmentCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 6,
      "joelczk": 13,
      "e0309556": 2,
      "-": 1
    }
  },
  {
    "path": "src/test/java/command/CalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_ONLY_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static CalendarCommand testCalendarCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static TaskList testTaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Ui testUi;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testLocalDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testLocalDate1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testLocalDate2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testRepeatLocalDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testRepeatLocalDate2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Calendar testCalendar;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static StringBuilder testBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // ANSI text colour scheme"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLACK \u003d \"\\u001B[30m\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RED \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_GREEN \u003d \"\\u001B[32m\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_YELLOW \u003d \"\\u001B[33m\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLUE \u003d \"\\u001B[34m\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_PURPLE \u003d \"\\u001B[35m\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_CYAN \u003d \"\\u001B[36m\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_WHITE \u003d \"\\u001B[37m\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String STARTING_BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String PAD \u003d \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String MORE_TASK_INDICATOR \u003d ANSI_CYAN + \".....\" + ANSI_RESET;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Assignment testCaseTwo \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static RepeatEvent testCaseRepeatDaily \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Event testCaseFour \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private RepeatEvent testCaseRepeatWeekly \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private RepeatEvent testCaseRepeatMonthly \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private RepeatEvent testCaseRepeatYearly \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // Calendar dimensions"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // sizing of each Calendar box"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MAX_CALENDAR_BOX_WIDTH \u003d 20;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DATE_PADDING_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 3;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int EMPTY_BOX_PADDING \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int CONTENT_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MIDDLE_JUSTIFIED_WIDTH_PADDING \u003d MAX_CALENDAR_BOX_WIDTH / 2 - 3;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Setup Commands, Calendar before each test."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testUi \u003d new Ui();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String date1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String date2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String date3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String date4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String startDateForRepeat \u003d \"01/06/2020 00:00\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String endDateForRepeat \u003d \"01/06/2020 13:00\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final LocalDateTime testDateTime1 \u003d LocalDateTime.parse(date1, dateTimeFormatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final LocalDateTime testDateTime2 \u003d LocalDateTime.parse(date2, dateTimeFormatter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final LocalDateTime testDateTime3 \u003d LocalDateTime.parse(date3, dateTimeFormatter);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final LocalDateTime testDateTime4 \u003d LocalDateTime.parse(date4, dateTimeFormatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final LocalDateTime testRepeatStartDateTime \u003d LocalDateTime.parse(startDateForRepeat, dateTimeFormatter);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final LocalDateTime testRepeatEndDateTime \u003d LocalDateTime.parse(endDateForRepeat, dateTimeFormatter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseTwo \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final Event testCaseThree \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        // set to repeat every 14 days in the month of Jan 2020, will only see it thrice in month of Jan"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        // inclusive of the original event"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseRepeatDaily \u003d new RepeatEvent(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                \"new year new me\",14, RepeatCommand.DAILY_ICON, testDateTime3, 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseFour \u003d new Event(\"Thisttttttttttttttttttttttttttttttttttttt\", \"MPSH1A\", testDateTime1,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testDateTime2, \" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseRepeatWeekly \u003d new RepeatEvent(\"Countdown Week\", \"TimeSquare\", testRepeatStartDateTime,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testRepeatEndDateTime, \"new year new me\",1, RepeatCommand.WEEKLY_ICON,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testDateTime3, 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseRepeatMonthly \u003d new RepeatEvent(\"Countdown Month\", \"TimeSquare\", testRepeatStartDateTime,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testRepeatEndDateTime, \"new year new me\",1, RepeatCommand.MONTHLY_ICON,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testDateTime3, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseRepeatYearly \u003d new RepeatEvent(\"Countdown Year\", \"TimeSquare\", testRepeatStartDateTime,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testRepeatEndDateTime, \"new year new me\",1, RepeatCommand.YEARLY_ICON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testDateTime3, 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String testDate \u003d \"01/01/20\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String testDate1 \u003d \"13/03/20\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String testDate2 \u003d \"02/02/20\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String testRepeat \u003d \"01/06/20\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String testRepeat2 \u003d \"01/06/21\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testLocalDate \u003d LocalDate.parse(testDate, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testLocalDate1 \u003d LocalDate.parse(testDate1, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testLocalDate2 \u003d LocalDate.parse(testDate2, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testRepeatLocalDate \u003d LocalDate.parse(testRepeat, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testRepeatLocalDate2 \u003d LocalDate.parse(testRepeat2, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand \u003d new CalendarCommand(testLocalDate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseRepeatDaily);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseRepeatWeekly);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseRepeatMonthly);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseRepeatYearly);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalendarCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertNotNull(testCalendarCommand.execute(testTaskList, testUi).feedbackToUser);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendarCommand.execute(testTaskList, testUi).feedbackToUser.getClass(), String.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(testCalendarCommand.execute(testTaskList, testUi).feedbackToUser.contains(\"January 2020\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testBuildMonthCalendar() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertNotNull(testCalendarCommand.buildMonthCalendar(testLocalDate, testTaskList));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendarCommand.buildMonthCalendar(testLocalDate, testTaskList).getClass(), String.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(testCalendarCommand.buildMonthCalendar(testLocalDate, testTaskList).contains(\"January 2020\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        StringBuilder testBorder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarBorder(testBorder);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(testCalendarCommand.buildMonthCalendar(testLocalDate, testTaskList)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .contains(testBorder.toString()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        StringBuilder testCalendarLegend \u003d new StringBuilder();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarBorder(testCalendarLegend);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(testCalendarCommand.buildMonthCalendar(testLocalDate, testTaskList)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .contains(testCalendarLegend.toString()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        StringBuilder testCalendarTitle \u003d new StringBuilder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarBorder(testCalendarTitle);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(testCalendarCommand.buildMonthCalendar(testLocalDate, testTaskList)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .contains(testCalendarTitle.toString()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalibrateCalendar() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.calibrateCalendar(testLocalDate, testCalendar);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendar.get(Calendar.MONTH), testLocalDate.getMonthValue() - 1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendar.get(Calendar.YEAR), testLocalDate.getYear());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendar.get(Calendar.DAY_OF_MONTH), 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testGetTaskByYearMonth() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        // Repeated Event is in Jan"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate, testTaskList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(2, resultList.size());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList1 \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate1, testTaskList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(4, resultList1.size());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList2 \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate2, testTaskList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(1, resultList2.size());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultListRepeatEvents \u003d testCalendarCommand.getTasksByYearMonth(testRepeatLocalDate,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testTaskList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(4, resultListRepeatEvents.size());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultListRepeatEvents2 \u003d testCalendarCommand.getTasksByYearMonth(testRepeatLocalDate2,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testTaskList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(4, resultListRepeatEvents2.size());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testStartBorder() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarStartBorder(testBuilder);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), STARTING_BORDER);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalendarNewLine() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarNewLine(testBuilder);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), System.lineSeparator());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddTaskToCalendar() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.calibrateCalendar(testLocalDate, testCalendar);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e arrayList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate, testTaskList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addTaskToCalendar(arrayList, testBuilder, testCaseTwo);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(1, arrayList.size());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String taskDetails \u003d testCaseTwo.getTime().format(Parser.PRINT_TIME_FORMAT) + testCaseTwo.getName();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d ANSI_RED + taskDetails + ANSI_RESET"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + PAD.repeat((CONTENT_WIDTH - taskDetails.length())) + BORDER;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddTaskToCalendarWithLongEventInput() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        // test Event and long name"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.calibrateCalendar(testLocalDate1, testCalendar);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e arrayList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate1, testTaskList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addTaskToCalendar(arrayList, testBuilder, testCaseFour);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String taskDetailFive \u003d testCaseFour.getTime().format(Parser.PRINT_TIME_FORMAT) + testCaseFour.getName();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskDetailFive \u003d taskDetailFive.substring(0, CONTENT_WIDTH);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testStringFive \u003d ANSI_GREEN + taskDetailFive + ANSI_RESET + BORDER;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testStringFive, testBuilder.toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddCalendarBorder() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarBorder(testBuilder);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d BORDER.repeat(MAX_CALENDAR_BOX_WIDTH * DAYS_IN_WEEK + 1) + System.lineSeparator();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddEmptyBody() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addEmptyCalendarBody(testBuilder);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d PAD.repeat(EMPTY_BOX_PADDING) + BORDER;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddCalendarDate() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int testDaySingleDigit \u003d 9;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarDate(testBuilder, testDaySingleDigit);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d PAD.repeat(DATE_PADDING_WIDTH) + ANSI_CYAN"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + testDaySingleDigit + ANSI_RESET + PAD + BORDER;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testString, testBuilder.toString());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testBuilder.delete(0, testBuilder.length());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int testDayDoubleDigit \u003d 30;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarDate(testBuilder, testDayDoubleDigit);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString2 \u003d PAD.repeat(DATE_PADDING_WIDTH) + ANSI_CYAN"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + testDayDoubleDigit + ANSI_RESET + BORDER;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalendarLegend() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarLegend(testBuilder);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        StringBuilder calendarView \u003d new StringBuilder();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String[] days \u003d {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(BORDER.repeat(MAX_CALENDAR_BOX_WIDTH * DAYS_IN_WEEK + 1))"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(STARTING_BORDER);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int dayRepresented \u003d 0; dayRepresented \u003c DAYS_IN_WEEK; dayRepresented++) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(PAD.repeat(CONTENT_WIDTH - days[dayRepresented].length()));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_CYAN).append(days[dayRepresented]).append(ANSI_RESET).append(BORDER);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(System.lineSeparator());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), calendarView.toString());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalendarTitle() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.calibrateCalendar(testLocalDate, testCalendar);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarTitle(testCalendar, testBuilder);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d ANSI_RED + \"Assignments are represented in red\" + ANSI_RESET + System.lineSeparator();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testString +\u003d ANSI_GREEN + \"Events are represented in green\" + ANSI_RESET + System.lineSeparator();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String dayFormat \u003d new SimpleDateFormat(\"MMMM YYYY\").format(testCalendar.getTime());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testString +\u003d ANSI_YELLOW + dayFormat + ANSI_RESET + System.lineSeparator();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testDuplicateRepeatEvents() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate, testTaskList);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultTaskList \u003d testCalendarCommand"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .duplicateRepeatEvents(YearMonth.from(testLocalDate).atEndOfMonth(), resultList);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(resultTaskList.size() \u003e resultList.size());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(resultTaskList.size(), resultList.size()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + testLocalDate.until(YearMonth.from(testLocalDate).atEndOfMonth()).getDays()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                / testCaseRepeatDaily.getNumOfPeriod());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddRepeatEvent_Daily() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate, testTaskList);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate endOfMonth \u003d YearMonth.from(testLocalDate).atEndOfMonth();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e finalTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (Task task : resultList) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (task instanceof RepeatEvent \u0026\u0026 task.equals(testCaseRepeatDaily)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                testCalendarCommand.parseRepeatEvents(endOfMonth, finalTaskList, testCaseRepeatDaily);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(finalTaskList.size(), testLocalDate.until(endOfMonth).getDays()"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                / testCaseRepeatDaily.getNumOfPeriod());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddRepeatEvent_Weekly() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate endOfMonth \u003d YearMonth.from(testRepeatLocalDate).atEndOfMonth();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.parseRepeatEvents(endOfMonth, resultList, testCaseRepeatWeekly);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(resultList.size(), testLocalDate.until(endOfMonth).getDays()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                / (testCaseRepeatWeekly.getNumOfPeriod() * DAYS_IN_WEEK));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddRepeatEvent_Monthly_Yearly() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate endOfMonth \u003d YearMonth.from(testRepeatLocalDate).atEndOfMonth();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.parseRepeatEvents(endOfMonth, resultList, testCaseRepeatMonthly);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(resultList.size(), 0);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddRepeatEvent_Yearly() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate endOfMonth \u003d YearMonth.from(testRepeatLocalDate).atEndOfMonth();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.parseRepeatEvents(endOfMonth, resultList, testCaseRepeatYearly);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(resultList.size(), 0);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAppendTaskToView() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e emptyArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.appendTaskToView(emptyArrayList, testBuilder, 2, 3);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), PAD.repeat(EMPTY_BOX_PADDING) + BORDER);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate, testTaskList);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.appendTaskToView(resultList, testBuilder, 5, 1);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String test2 \u003d PAD.repeat(MIDDLE_JUSTIFIED_WIDTH_PADDING) + MORE_TASK_INDICATOR"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + PAD.repeat(CONTENT_WIDTH - MIDDLE_JUSTIFIED_WIDTH_PADDING - 5) + BORDER;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(test2, testBuilder.toString());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testTaskNotShown() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addTaskNotShownIndicator(testBuilder);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String test \u003d PAD.repeat(MIDDLE_JUSTIFIED_WIDTH_PADDING)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + MORE_TASK_INDICATOR + PAD.repeat(CONTENT_WIDTH - MIDDLE_JUSTIFIED_WIDTH_PADDING - 5)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + BORDER;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(test, testBuilder.toString());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 363,
      "e0309556": 4,
      "-": 1
    }
  },
  {
    "path": "src/test/java/command/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "//@@author joelczk"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String DATE1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String DATE2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String DATE3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String DATE4 \u003d  \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Assignment testCaseOne;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Assignment testCaseTwo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Assignment testCaseThree;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Event testCaseFour;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Event testCaseFive;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Event testCaseSix;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime4;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Initialize variables used for each tests."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime1 \u003d LocalDateTime.parse(DATE1, dateTimeFormatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime2 \u003d LocalDateTime.parse(DATE2, dateTimeFormatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime3 \u003d LocalDateTime.parse(DATE3, dateTimeFormatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime4 \u003d LocalDateTime.parse(DATE4, dateTimeFormatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseTwo \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseThree \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseSix \u003d new Event(null,null,null, null,null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearAll_FilledList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"all\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.CLEAR_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearAll_EmptyList_noTaskMessage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(filledTaskList.getListSize(),6);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"all\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_filledList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.markTaskAsDone(2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.markTaskAsDone(4);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.CLEAR_DONE_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_filledList_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_DONE_CLEAR_ERROR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_EmptyList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatEventMarkedDone_clearDone_repeatEventNotCleared() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime testDateTime \u003d LocalDateTime.of(2020, 02, 14, 5, 30);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent testRepeatEvent \u003d new RepeatEvent(\"Bathe2\", \"Toilet\", testDateTime,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                testDateTime.plusMinutes(15), \"before sleep\", 4, RepeatCommand.DAILY_ICON,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                testDateTime, 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        TaskList repeatTestTaskList \u003d filledTaskList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        repeatTestTaskList.addTask(testRepeatEvent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        for (Task task : repeatTestTaskList.getTaskArray()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        CommandResult clearDone \u003d new ClearCommand(\"done\").execute(repeatTestTaskList, ui);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatTestTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 96,
      "e0309556": 19
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "//@@author joelczk"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.deleteTask(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    //@@author Keith-JK"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testEmptyList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DeleteCommand testDeleteCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d testDeleteCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.NO_TASKS_MSG, result.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testDeleteSuccess() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"01/01/2020 10:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTimeEnd \u003d LocalDateTime.parse(\"01/01/2020 12:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Event testEvent \u003d new Event(\"test\", \"test\", localDateTime, localDateTimeEnd, \"test\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DeleteCommand testDeleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d testDeleteCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(String.format(Messages.DELETE_SUCCESS_MESSAGE, testEvent.getName()), result.feedbackToUser);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testDeleteOutOfRange() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"01/01/2020 10:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTimeEnd \u003d LocalDateTime.parse(\"01/01/2020 12:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Event testEvent \u003d new Event(\"test\", \"test\", localDateTime, localDateTimeEnd, \"test\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DeleteCommand testDeleteCommand \u003d new DeleteCommand(5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d testDeleteCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(String.format(Messages.INVALID_ID_ERROR, testTaskList.getRangeOfValidIndex(testTaskList)),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                result.feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 28,
      "Keith-JK": 47
    }
  },
  {
    "path": "src/test/java/command/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jichngan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "//@@author jichngan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringOne \u003d \"12/03/20 1600\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringTwo \u003d \"12/03/20 1800\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringThree \u003d \"13/03/20 1600\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringFour \u003d \"13/03/20 1800\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateOne \u003d LocalDateTime.parse(dateStringOne, Parser.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateTwo \u003d LocalDateTime.parse(dateStringTwo, Parser.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateThree \u003d LocalDateTime.parse(dateStringThree, Parser.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateFour \u003d LocalDateTime.parse(dateStringFour, Parser.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Initialise TaskList for testing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment firstAssignment \u003d new Assignment(\"One\", \"cs2113\", dateOne, \"None\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment secondAssignment \u003d new Assignment(\"two\", \"cs2113\", dateOne, \"None\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event firstEvent \u003d new Event(\"meeting one\", \"cs2113\", dateOne, dateTwo,\"None\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event secondEvent \u003d new Event(\"meeting two\", \"cs2113\", dateThree, dateFour,\"None\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(firstAssignment);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(secondAssignment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(firstEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(secondEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editAssignment_filledList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment editedAssignment \u003d new Assignment(\"three\", \"cs2113\", dateOne, \"None\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.editTask(0, editedAssignment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(filledTaskList.getTask(0), editedAssignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editEvent_filledList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event editedEvent \u003d new Event(\"meeting three\", \"cs2113\", dateOne, dateTwo, \"None\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.editTask(2, editedEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(filledTaskList.getTask(2), editedEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editTask_emptyList_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        TaskList emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(new EditCommand(1).execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editTask_filledList_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(new EditCommand(6).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                \"Please provide a valid task number from 1 to 4\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    //@@author Keith-JK"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testEditTask_sameTaskError() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final PrintStream consoleOut \u003d System.out;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final InputStream consoleIn \u003d System.in;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayInputStream testInput;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String firstAssignmentUserInput \u003d \"assignment n/One m/cs2113 d/12/03/20 1600 c/Non\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testInput \u003d new ByteArrayInputStream(firstAssignmentUserInput.getBytes());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(testInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            feedback \u003d new EditCommand(1).execute(filledTaskList, ui).feedbackToUser;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(consoleIn);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.EDIT_PROMPT + lineSeparator + Messages.DIVIDER"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + lineSeparator + Messages.PROMPT_FOR_USER_INPUT, testOutput.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.SAME_TASK_ERROR, feedback);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testEditTask_erroneousInput() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final PrintStream consoleOut \u003d System.out;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final InputStream consoleIn \u003d System.in;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayInputStream testInput;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String userInput \u003d \"even n/changed l/changed d/12/03/20 1600 - 1800 c/changed\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testInput \u003d new ByteArrayInputStream(userInput.getBytes());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(testInput);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            feedback \u003d new EditCommand(3).execute(filledTaskList, ui).feedbackToUser;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(consoleIn);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.EDIT_PROMPT + lineSeparator + Messages.DIVIDER"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + lineSeparator + Messages.PROMPT_FOR_USER_INPUT, testOutput.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.UNKNOWN_COMMAND_ERROR, feedback);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testEditTask_assignmentSuccess() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final PrintStream consoleOut \u003d System.out;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final InputStream consoleIn \u003d System.in;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayInputStream testInput;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String firstAssignmentUserInput \u003d \"assignment n/changed m/changed d/12/03/20 1600 c/changed\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Assignment edited \u003d new Assignment(\"Changed\", \"changed\", dateOne, \"Changed\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testInput \u003d new ByteArrayInputStream(firstAssignmentUserInput.getBytes());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(testInput);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            feedback \u003d new EditCommand(0).execute(filledTaskList, ui).feedbackToUser;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(consoleIn);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.EDIT_PROMPT + lineSeparator + Messages.DIVIDER"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + lineSeparator + Messages.PROMPT_FOR_USER_INPUT, testOutput.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(String.format(Messages.EDIT_SUCCESS_MESSAGE, edited), feedback);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testEditTask_eventSuccess() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final PrintStream consoleOut \u003d System.out;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final InputStream consoleIn \u003d System.in;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayInputStream testInput;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String userInput \u003d \"event n/changed l/changed d/12/03/20 1600 - 1800 c/changed\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Event edited \u003d new Event(\"Changed\", \"changed\", dateOne, dateTwo,\"Changed\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testInput \u003d new ByteArrayInputStream(userInput.getBytes());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(testInput);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            feedback \u003d new EditCommand(3).execute(filledTaskList, ui).feedbackToUser;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(consoleIn);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.EDIT_PROMPT + lineSeparator + Messages.DIVIDER"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + lineSeparator + Messages.PROMPT_FOR_USER_INPUT, testOutput.toString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(String.format(Messages.EDIT_SUCCESS_MESSAGE, edited), feedback);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testEditTask_repeatEventSuccess() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final PrintStream consoleOut \u003d System.out;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final InputStream consoleIn \u003d System.in;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayInputStream testInput;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        RepeatEvent original \u003d new RepeatEvent(\"Bathe\", \"Toilet\", Parser.parseDate(\"01/01/20 2200\"),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                Parser.parseDate(\"01/01/20 2220\"), \"before sleep\", 1, RepeatCommand.DAILY_ICON,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                Parser.parseDate(\"01/01/20 2200\"), 0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        filledTaskList.addTask(original);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String userInput \u003d \"event n/changed l/changed d/12/03/20 1600 - 1800 c/changed\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        RepeatEvent edited \u003d new RepeatEvent(\"Changed\", \"changed\", dateOne, dateTwo,\"Changed\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                1, RepeatCommand.DAILY_ICON, Parser.parseDate(\"01/01/20 2200\"), 0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testInput \u003d new ByteArrayInputStream(userInput.getBytes());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(testInput);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            feedback \u003d new EditCommand(4).execute(filledTaskList, ui).feedbackToUser;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(consoleIn);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.EDIT_PROMPT + lineSeparator + Messages.DIVIDER"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + lineSeparator + Messages.PROMPT_FOR_USER_INPUT, testOutput.toString());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(String.format(Messages.EDIT_SUCCESS_MESSAGE, edited), feedback);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 153,
      "jichngan": 74
    }
  },
  {
    "path": "src/test/java/command/EventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"meeting\", \"Singapore\", Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                Parser.parseDate(\"20/03/20 1100\"), null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testEventCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 8,
      "joelczk": 14,
      "-": 1
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        CommandResult testResult \u003d Parser.parseCommand(ExitCommand.COMMAND_WORD).execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult compareResult \u003d new CommandResult(Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.getClass(), compareResult.getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.feedbackToUser, Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(ExitCommand.isExit());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "Keith-JK": 18,
      "-": 1,
      "e0309556": 1
    }
  },
  {
    "path": "src/test/java/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.MethodOrderer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.TestMethodOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "//@@author e0309556"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": " * Test in alphanumeric order instead of random order to ensure that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": " * testing methods relating to repeat commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": " * are the last ones to run and will not affect the other hard coded test cases."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "@TestMethodOrder(MethodOrderer.Alphanumeric.class)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static TaskList filledWeeklyTaskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static LocalDateTime currDateTime1 \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static LocalDateTime currDateTime2 \u003d LocalDateTime.now().plusSeconds(60);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static LocalDateTime oneWeekDateTime1 \u003d currDateTime1.plusDays(7);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static LocalDateTime oneWeekDateTime2 \u003d currDateTime2.plusDays(7);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static LocalDateTime afterCurrButSameDayDateTime1 \u003d currDateTime1.plusSeconds(30);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static LocalDateTime afterCurrButSameDayDateTime2 \u003d currDateTime1.plusSeconds(300);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static LocalDateTime pastDateTime \u003d LocalDateTime.of(LocalDate.now(), LocalTime.of(5, 12));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //@@author jichngan"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime beforeCurrDateTime1 \u003d LocalDateTime.of(2020, 2, 13, 18, 00);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime beforeCurrDateTime2 \u003d LocalDateTime.of(2020, 2, 13, 20, 30);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime afterCurrDateTime1 \u003d LocalDateTime.of(2021, 1, 1, 00, 00);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime afterCurrDateTime2 \u003d LocalDateTime.of(2021, 1, 1, 02, 59);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String currDateTimeStringForPrint1 \u003d currDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String currDateTimeStringForPrint2 \u003d currDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String nextWeekDateTimeStringForPrint1 \u003d oneWeekDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String nextWeekDateTimeStringForPrint2 \u003d oneWeekDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String afterCurrButSameDayStringForPrint1 \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            afterCurrButSameDayDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String afterCurrButSameDayStringForPrint2 \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            afterCurrButSameDayDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    // Hard coded Expected output from various tests"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static String expectedOutputFromFilledTaskList \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  1. [A][/] Assignment 3 (by: Thu 13 Feb 2020 18:00 | mod: CS2109)\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  2. [A][X] Quiz 1 (by: Fri 01 Jan 2021 00:00 | mod: CS2173)\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"15%\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  3. [E][X] midterms (at: MPSH1A | Thu 13 Feb 2020 18:00 - 20:30)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static String expectedOutputFromUpcomingEvent \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static String expectedOutputFromIncompleteAssign \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  2. [A][X] Quiz 1 (by: Fri 01 Jan 2021 00:00 | mod: CS2173)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"15%\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //@@author jichngan"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String expectedOutputFromListToday \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"  1. [A][X] Assignment 1 (by: \" + currDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 1 Notes\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"  2. [E][X] Event 1 (at: Classroom | \" + currDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + currDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 1 Notes\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String expectedOutputFromListWeek \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"  1. [A][X] Assignment 1 (by: \" + currDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 1 Notes\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"  2. [E][X] Event 1 (at: Classroom | \" + currDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + currDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 1 Notes\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"  3. [A][X] Assignment 2 (by: \" + nextWeekDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 2 Notes\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"  4. [E][X] Event 2 (at: Classroom | \" + nextWeekDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + nextWeekDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 2 Notes\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static String expectedOutputFromTodayFilledTasklistForRepeating \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  6. [R][X] Bathe2 (at: Toilet | \" + pastDateTime.format(Parser.PRINT_DATE_FORMAT) + \" - \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + pastDateTime.plusMinutes(15).format(Parser.PRINT_TIME_FORMAT) + \")\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + String.format(Messages.REPEAT_EVENT_WITH_COMMENTS_INDENT, \"4d\") + \"before sleep\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static String expectedOutputFromUpcomingEventFilledTasklistForRepeating \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + \"  6. [R][X] Bathe2 (at: Toilet | \" + pastDateTime.format(Parser.PRINT_DATE_FORMAT) + \" - \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + pastDateTime.plusMinutes(15).format(Parser.PRINT_TIME_FORMAT) + \")\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            + System.lineSeparator() + String.format(Messages.REPEAT_EVENT_WITH_COMMENTS_INDENT, \"4d\") + \"before sleep\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledWeeklyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Assignment assignBeforeCurrDateTime \u003d new Assignment(\"Assignment 3\", \"CS2109\", beforeCurrDateTime1, \"-\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Assignment assignAfterCurrDateTime \u003d new Assignment(\"Quiz 1\", \"CS2173\", afterCurrDateTime1, \"15%\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Event eventBeforeCurrDateTime \u003d new Event(\"midterms\", \"MPSH1A\", beforeCurrDateTime1, beforeCurrDateTime2, \"-\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Event eventAfterCurrDateTime \u003d new Event(\"Countdown\", \"TimeSquare\", afterCurrDateTime1,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                afterCurrDateTime2, \"new year new me\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Event eventOnSameDayAfterCurrTime \u003d new Event(\"Bathe\", \"Toilet\", afterCurrButSameDayDateTime1,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                afterCurrButSameDayDateTime2, \"-\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList.addTask(assignBeforeCurrDateTime);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList.addTask(assignAfterCurrDateTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList.addTask(eventBeforeCurrDateTime);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList.addTask(eventAfterCurrDateTime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList.addTask(eventOnSameDayAfterCurrTime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        //@@author jichngan"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment currDateTimeAssignment \u003d new Assignment(\"Assignment 1\", \"CS2113\", currDateTime1,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                \"Assignment 1 Notes\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event currDateTimeEvent \u003d new Event(\"Event 1\", \"Classroom\", currDateTime1, currDateTime2, \"Event 1 Notes\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment nextWeekAssignment \u003d new Assignment(\"Assignment 2\", \"CS2113\", oneWeekDateTime1,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                \"Assignment 2 Notes\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event nextWeekEvent \u003d new Event(\"Event 2\", \"Classroom\", oneWeekDateTime1, oneWeekDateTime2, \"Event 2 Notes\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(currDateTimeAssignment);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(currDateTimeEvent);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(nextWeekAssignment);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(nextWeekEvent);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void printList_emptyList_emptyListMsg() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(Messages.EMPTY_TASKLIST_MESSAGE,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                new ListCommand(null).execute(emptyTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void printList_invalidArgs_errorMsg() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(\"Invalid arguments for List Command\" + System.lineSeparator() + ListCommand.COMMAND_USAGE,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                new ListCommand(\"everything i want\").execute(filledTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void printList_filledList_incompleteAssignOnly() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(expectedOutputFromIncompleteAssign,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                new ListCommand(\"incomplete assignments\").execute(filledTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void printList_filledList_allTaskListMsg() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(expectedOutputFromFilledTaskList,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                new ListCommand(null).execute(filledTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void printList_filledList_upcomingEventsOnly() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(expectedOutputFromUpcomingEvent,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                new ListCommand(\"upcoming events\").execute(filledTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //@@author jichngan"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void printList_filledWeeklyList_todayTasks() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(expectedOutputFromListToday,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                new ListCommand(\"today\").execute(filledWeeklyTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void printList_filledWeeklyList_weeklyTasks() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(expectedOutputFromListWeek,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                new ListCommand(\"week\").execute(filledWeeklyTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Will occur first before repeatingEvent_filledList_weekTasks() method hence no need to add testRepeatEvent again."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingEvent_filledList_todayTasks() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent testRepeatEvent \u003d new RepeatEvent(\"Bathe2\", \"Toilet\", pastDateTime,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                pastDateTime.plusMinutes(15), \"before sleep\", 4, RepeatCommand.DAILY_ICON,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                pastDateTime, 0);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        filledTaskList.addTask(testRepeatEvent);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d ((RepeatEvent) filledTaskList.getTask(5));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        repeatEvent.updateDate();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(expectedOutputFromTodayFilledTasklistForRepeating,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                new ListCommand(\"today\").execute(filledTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingEvent_filledList_weekTasks() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d ((RepeatEvent) filledTaskList.getTask(5));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        repeatEvent.updateDate();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(expectedOutputFromUpcomingEventFilledTasklistForRepeating,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                new ListCommand(\"upcoming events\").execute(filledTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "e0309556": 178,
      "jichngan": 67
    }
  },
  {
    "path": "src/test/java/command/MarkAsDoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class MarkAsDoneTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(testTaskList.getTask(0).getIsDone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.markTaskAsDone(0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testEmptyList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DoneCommand testDoneCommand \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d testDoneCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.NO_TASKS_MSG, result.feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testTaskAlreadyCompleted() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"01/01/2020 10:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTimeEnd \u003d LocalDateTime.parse(\"01/01/2020 12:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Event testEvent \u003d new Event(\"test\", \"test\", localDateTime, localDateTimeEnd, \"test\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testEvent.setDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DoneCommand testDoneCommand \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d testDoneCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.COMPLETED_TASK_ERROR, result.feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testDoneSuccess() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"01/01/2020 10:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTimeEnd \u003d LocalDateTime.parse(\"01/01/2020 12:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Event testEvent \u003d new Event(\"test\", \"test\", localDateTime, localDateTimeEnd, \"test\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DoneCommand testDoneCommand \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d testDoneCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(String.format(Messages.DONE_SUCCESS_MESSAGE, testEvent.getName()), result.feedbackToUser);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testIndexOutOfBounds() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"01/01/2020 10:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime localDateTimeEnd \u003d LocalDateTime.parse(\"01/01/2020 12:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Event testEvent \u003d new Event(\"test\", \"test\", localDateTime, localDateTimeEnd, \"test\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DoneCommand testDoneCommand \u003d new DoneCommand(5);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d testDoneCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(String.format(Messages.INVALID_ID_ERROR, testTaskList.getRangeOfValidIndex(testTaskList)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                result.feedbackToUser);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatEvent_markedDoneButRepeated_taskNotDone() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime testDateTime \u003d LocalDateTime.of(2020, 02, 14, 5, 30);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent testRepeatEvent \u003d new RepeatEvent(\"testRepeat\", \"home\", testDateTime, testDateTime.plusMinutes(2),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"-\", 1, RepeatCommand.WEEKLY_ICON, testDateTime, 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatEvent.setDone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testRepeatEvent.getIsDone(), true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatEvent.updateDate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testRepeatEvent.getIsDone(), false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void event_markedDoneThenRepeated_taskNotDone() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime testDateTime \u003d LocalDateTime.of(2020, 02, 14, 5, 30);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Event testEvent \u003d new Event(\"8 days ago\", \"CS2113T\", testDateTime, testDateTime.plusHours(4),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"testing\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testEvent.setDone();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testEvent.getIsDone(), true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 5, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testTaskList.getTask(0).getIsDone(), false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 19,
      "Keith-JK": 64,
      "e0309556": 31
    }
  },
  {
    "path": "src/test/java/command/RepeatCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import tasks.RepeatEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": "//@@author e0309556"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "public class RepeatCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static TaskList testTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static Ui testUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //whatIsBeingTested_descriptionOfTestInputs_expectedOutcome"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Initializing tasklisk, ui and event to be added and tested for all test cases."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testUi \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Event testEvent \u003d new Event(\"Daily Work\", \"CS2113T\", Parser.parseDate(\"31/01/20 0800\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                Parser.parseDate(\"31/01/20 1200\"), \"testing\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Assignment testAssign \u003d new Assignment(\"Daily Work\", \"CS2113T\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                Parser.parseDate(\"20/03/20 0000\"), \"testing\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent testRepeatEvent \u003d new RepeatEvent(\"Bathe\", \"Toilet\", Parser.parseDate(\"01/01/20 2200\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                Parser.parseDate(\"01/01/20 2220\"), \"before sleep\", 1, RepeatCommand.DAILY_ICON,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                Parser.parseDate(\"01/01/20 2200\"), 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList.addTask(testAssign);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList.addTask(testRepeatEvent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void executeMethod_assignTask_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(1, 1, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testRepeatCommand.execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"Daily Work is not an event. Please choose an event.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void executeMethod_eventTask_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertTrue(testTaskList.getTask(0) instanceof RepeatEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void executeMethod_unsetRepeatTask_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 0, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertTrue(testTaskList.getTask(2) instanceof Event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void executeMethod_oobIndex_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(5, 4, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testRepeatCommand.execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"Please provide a valid task number from 1 to 3\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void executeMethod_unsetEventTask_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 0, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testRepeatCommand.execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"Daily Work is not set to repeat.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309556": 75
    }
  },
  {
    "path": "src/test/java/command/SearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "//@@author joelczk"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_ONLY_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private StringBuilder searchString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static String stringDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static String stringDateTime1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static String stringDateTime2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static String stringDateTime3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static String stringDateTime4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDate testDate1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDateTime testDateTime4;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Assignment testCaseOne;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Assignment testCaseTwo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Assignment testCaseThree;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Assignment testCaseSeven;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Event testCaseFour;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Event testCaseFive;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Event testCaseSix;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Set up variables for tests."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        stringDate \u003d \"13/03/20\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        stringDateTime1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        stringDateTime2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        stringDateTime3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        stringDateTime4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDate1 \u003d LocalDate.parse(stringDate,INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime1 \u003d LocalDateTime.parse(stringDateTime1, dateTimeFormatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime2 \u003d LocalDateTime.parse(stringDateTime2, dateTimeFormatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime3 \u003d LocalDateTime.parse(stringDateTime3, dateTimeFormatter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testDateTime4 \u003d LocalDateTime.parse(stringDateTime4, dateTimeFormatter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseOne \u003d new Assignment(\"Test 3\", \"CS2102\", testDateTime1, \"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseTwo \u003d new Assignment(\"Assignment 5\", \"CS2102\", testDateTime1, \"-\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseThree \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \"-\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseSix \u003d new Event(\"mid\", \"MPSH1A\", testDateTime1, testDateTime2, \"-\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testCaseSeven \u003d new Assignment(\"Test 5\", \"CS2102\", testDateTime1, \"-\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSeven);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String searchSingleEvent() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  4.[E][X] midterms (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String searchMultipleEvents() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  4.[E][X] midterms (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  6.[E][X] mid (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String searchSingleAssignment() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[A][X] Test 3 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String searchMultipleAssignments() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[A][X] Test 3 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  7.[A][X] Test 5 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_emptyTaskList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"all\", null).execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"assignment\", null).execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"event\", null).execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"all\",testDate1).execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"assignment\",testDate1).execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"event\",testDate1).execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_emptyResults() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\",\"event\", testDate1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"assignment\", testDate1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"all\", testDate1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\",\"event\", null).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"assignment\", null).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"all\", null).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchOneEvent_success() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"midterms\", \"event\", null).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchSingleEvent());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchdOneEvent_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"midterms\", \"event\", testDate1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchSingleEvent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchMultipleEvents_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"mid\", \"event\", null).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchMultipleEvents());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchdMultipleEvents_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"mid\", \"event\", testDate1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchMultipleEvents());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchSingleAssignment_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test 3\", \"assignment\", null).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchSingleAssignment());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchdSingleAssignment_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test 3\", \"assignment\", testDate1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchSingleAssignment());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchMultipleAssignments() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"assignment\",null).execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchMultipleAssignments());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchdMultipleAssignments() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"assignment\", testDate1).execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchMultipleAssignments());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchAllSingleResult() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"midterms\", \"all\", null).execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchSingleEvent());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchdAllSingleResult() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"midterms\", \"all\", testDate1).execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchSingleEvent());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchMultipleResults() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test 3\", \"all\", null).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchSingleAssignment());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void executeMethod_searchdMultipleResults() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"all\", null).execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                searchMultipleAssignments());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 229,
      "e0309556": 2
    }
  },
  {
    "path": "src/test/java/seedu/atas/AtasTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "class AtasTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/atas/HelpTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.CalendarCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class HelpTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testHelpCommandOutput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult commandResult \u003d helpCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertNotNull(commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String out \u003d commandResult.feedbackToUser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(HelpCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(AssignmentCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(EventCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(ListCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(DoneCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(EditCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(DeleteCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(ClearCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(RepeatCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(SearchCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(SearchCommand.dCOMMAND_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(CalendarCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(out.contains(ExitCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCounter() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult commandResult \u003d helpCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertNotNull(commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String[] split \u003d commandResult.feedbackToUser.split(System.lineSeparator(), 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String[] helplines \u003d split[1].split(System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cString\u003e listOfHelp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        // remove subsections of help command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (String str : helplines) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (str.contains(\".\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                listOfHelp.add(str);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (String str : listOfHelp) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            assertTrue(str.contains(String.format(\"%3d\", counter++)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 72
    }
  },
  {
    "path": "src/test/java/seedu/atas/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.CalendarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.IncorrectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import static seedu.atas.Parser.capitalize;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Date Tests. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormat_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20 2359\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormatWithSpaces_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20       2359\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_incorrectFormat_throwIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"22/02/20\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"1800\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_invalidDateTime_throwDateTimeParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/02/20 1111\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"20/02/20 2500\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/O2/2O 1111\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Unknown Command Tests. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void testUnknownCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(\"foo 2\").execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.UNKNOWN_COMMAND_ERROR));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    //@@author lwxymere"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Assignment Command Tests. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(AssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name m/cs2113T d/22/01/20 1800 c/comments\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                AssignmentCommand.COMMAND_WORD + \"  \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"m/   cs2113T  \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800 \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_missingParameters_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                AssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/ASS m/cs1010 d/30/02/20 1111\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                capitalize(AssignmentCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                AssignmentCommand.COMMAND_USAGE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ((IncorrectCommand)parsedCommand).getDescription()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_nameContainsOnlySpaces_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                AssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/    m/cs1010 d/30/02/20 1111 c/ comment\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                capitalize(AssignmentCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                AssignmentCommand.COMMAND_USAGE"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ((IncorrectCommand)parsedCommand).getDescription()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Event Command Tests. */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name l/somewhere ah d/22/01/20 1800 - 2030 c/comment\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"l/   somewhere over the rainbow   \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800  -   2030   \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_missingComment_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/EVE l/LOC d/30/02/20 1111 - 2222 c/\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(String.format("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                capitalize(EventCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.COMMAND_USAGE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ), ((IncorrectCommand)parsedCommand).getDescription()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_startTimeAfterEndTime_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/EVE l/LOC d/30/02/20 2222 - 1111 c/none\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Messages.INCORRECT_START_END_TIME_ERROR, ((IncorrectCommand)parsedCommand).getDescription());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_nameContainsOnlySpaces_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/    l/ location d/30/02/20 1111 - 1222 c/ comment\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                capitalize(EventCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.COMMAND_USAGE"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ((IncorrectCommand)parsedCommand).getDescription()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Delete Command Tests. */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(String.format("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                capitalize(DeleteCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                DeleteCommand.COMMAND_USAGE"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ), ((IncorrectCommand)parsedCommand).getDescription()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(((IncorrectCommand)parsedCommand).getDescription(), Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Done Command Tests. */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(String.format("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                capitalize(DoneCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                DoneCommand.COMMAND_USAGE"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                ), ((IncorrectCommand)parsedCommand).getDescription()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Messages.NUM_FORMAT_ERROR, ((IncorrectCommand)parsedCommand).getDescription());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Help Command Tests. */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseHelpCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** List Command Tests. */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseListCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" today\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" week\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" incomplete assignments\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" upcoming events\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author e0309556"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /** Repeat Command Tests. */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void parseRepeatCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/10d\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertTrue(parsedCommand instanceof RepeatCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Command parsedCommandInvalidPeriod \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/25ddd\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertFalse(parsedCommandInvalidPeriod instanceof RepeatCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertTrue(parsedCommandInvalidPeriod instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Command parsedCommandNoRepeat \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/0\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertTrue(parsedCommandNoRepeat instanceof RepeatCommand);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Command parsedCommandEmptyPeriod \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/5\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertTrue(parsedCommandEmptyPeriod instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Exit Command Tests. */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseExitCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void parseCalendarCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(CalendarCommand.COMMAND_WORD + \" d/01/20\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(parsedCommand instanceof  CalendarCommand);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void parseCalendarCommand_failureMessage() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(CalendarCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        capitalize(CalendarCommand.COMMAND_WORD), CalendarCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void parseCalendarCommand_DateIncorrect() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(CalendarCommand.COMMAND_WORD + \" d/00/00\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        String.format(Messages.CALENDAR_DATE_INVALID, CalendarCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void parseSearchCommand_correct() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchCommand  \u003d Parser.parseCommand(SearchCommand.COMMAND_WORD + \" t/    all n/    test\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchCommand instanceof SearchCommand);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchdCommand  \u003d Parser.parseCommand(SearchCommand.dCOMMAND_WORD + \" t/    all n/    \""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"test d/12/02/20\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchdCommand instanceof SearchCommand);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void parseSearchCommand_MissingTask() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchCommand  \u003d Parser.parseCommand(SearchCommand.COMMAND_WORD + \" n/test\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchCommand instanceof  IncorrectCommand);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(parsedSearchCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR,String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                        Parser.capitalize(SearchCommand.COMMAND_WORD), SearchCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchdCommand  \u003d Parser.parseCommand(SearchCommand.dCOMMAND_WORD + \" n/test d/12/02/20\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchdCommand instanceof  IncorrectCommand);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(parsedSearchdCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR,String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                        Parser.capitalize(SearchCommand.dCOMMAND_WORD), SearchCommand.dCOMMAND_USAGE)));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void parserSearchCommand_MissingQuery() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchCommand  \u003d Parser.parseCommand(SearchCommand.COMMAND_WORD + \" t/    assignment\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchCommand instanceof  IncorrectCommand);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(parsedSearchCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR,String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                        Parser.capitalize(SearchCommand.COMMAND_WORD), SearchCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchdCommand  \u003d Parser.parseCommand(SearchCommand.dCOMMAND_WORD + \" t/all d/12/02/20\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchdCommand instanceof  IncorrectCommand);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(parsedSearchdCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR,String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                        Parser.capitalize(SearchCommand.dCOMMAND_WORD), SearchCommand.dCOMMAND_USAGE)));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void parseSearchdCommand_MissingDate() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedCommand  \u003d Parser.parseCommand(SearchCommand.dCOMMAND_WORD + \" t/    assignment n/test\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedCommand instanceof  IncorrectCommand);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR,String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                        Parser.capitalize(SearchCommand.dCOMMAND_WORD), SearchCommand.dCOMMAND_USAGE)));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void parseSearchdCommand_InvalidDate() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedCommand  \u003d Parser.parseCommand(SearchCommand.dCOMMAND_WORD + \" t/    assignment \""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"n/test d/13/14/20\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, String.format(Messages.SEARCHD_DATE_INVALID,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                        Messages.SEARCHD_DATE_FORMAT_HELP)));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void parseSearchCommand_InvalidTask() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchCommand \u003d Parser.parseCommand(SearchCommand.COMMAND_WORD + \"t/test n/test\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Command parsedSearchdCommand \u003d Parser.parseCommand(SearchCommand.dCOMMAND_WORD + \"t/test n/test d/12/02/20\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(parsedSearchdCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@ author"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 242,
      "joelczk": 68,
      "Keith-JK": 35,
      "e0309556": 33
    }
  },
  {
    "path": "src/test/java/seedu/atas/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void taskListTest_GetListSize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void taskListTest_AddTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 25
    }
  },
  {
    "path": "src/test/java/seedu/atas/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private PrintStream consoleOut;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private InputStream consoleIn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private final String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public UiTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        consoleOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        consoleIn \u003d System.in;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testDivider() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testUi.printDividerLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.DIVIDER + lineSeparator, testOutput.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testWelcomeMessage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testUi.printWelcomeMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.LOGO + lineSeparator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + Messages.DIVIDER + lineSeparator, testOutput.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testGetUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayInputStream testInput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String resultUserIn;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String exampleUserIn \u003d \"testing 123          \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String expectedUserIn \u003d exampleUserIn.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testInput \u003d new ByteArrayInputStream(exampleUserIn.getBytes());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(testInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            resultUserIn \u003d testUi.getUserInput();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(consoleIn);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(expectedUserIn, resultUserIn);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(Messages.PROMPT_FOR_USER_INPUT, testOutput.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testShowToUser() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ByteArrayOutputStream testOutput;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String exampleUserIn \u003d \"testing line 1\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String exampleUserIn2 \u003d \"testing line 2\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String exampleUserIn3 \u003d \"testing line 3\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String expectedUserIn \u003d exampleUserIn + lineSeparator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + exampleUserIn2 + lineSeparator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + exampleUserIn3 + lineSeparator;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(new PrintStream(testOutput));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            testUi.showToUser(exampleUserIn, exampleUserIn2, exampleUserIn3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setOut(consoleOut);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            System.setIn(consoleIn);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(expectedUserIn, testOutput.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 100
    }
  },
  {
    "path": "src/test/java/tasks/AssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment newAssignment \u003d new Assignment(\"TP\", \"CS2113T\",  Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment nullAssignment \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_getModule() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getModule(), \"CS2113T\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getModule(), null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getModule());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_getDateAndTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getDateAndTime(), null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getDateAndTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_getIsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullAssignment.getIsDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_SetDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_GetComments() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getComments(), \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getComments());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_GetStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_GetName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getName(),\"TP\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void assignmentTest_ToString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[A][X] project meeting (by: Fri 20 Mar 2020 09:00 | mod: CS2113T)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator() + Messages.NEWLINE_INDENT"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.toString(), printedString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 69
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    Event newEvent \u003d new Event(\"project meeting\", \"NUS SOC\", Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Parser.parseDate(\"20/03/20 1100\"), \"My Very Long Long Long Long Long Comment\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    Event nullEvent \u003d new Event(null,null,null, null,null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author joelczk"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void eventTest_getLocation() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getLocation(), \"NUS SOC\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getLocation(), null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getLocation());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void eventTest_getDateAndTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getDateAndTime(), null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getDateAndTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void getEndDateAndTime_expectedUsage_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 1100\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getEndDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getDateAndTime(), null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getDateAndTime());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void eventTest_getIsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newEvent.getIsDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullEvent.getIsDone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void eventTest_setDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newEvent.getIsDone());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void eventTest_getComments() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getComments(), \"My Very Long Long Long Long Long Comment\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getComments());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void eventTestGetStatusIcon() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getName(),\"project meeting\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[E][X] project meeting (at: NUS SOC | Fri 20 Mar 2020 09:00 - 11:00)\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + System.lineSeparator() + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.toString(), printedString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 6,
      "joelczk": 75,
      "Keith-JK": 1
    }
  },
  {
    "path": "src/test/java/tasks/RepeatEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309556"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309556"
        },
        "content": "//@@author e0309556"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309556"
        },
        "content": "public class RepeatEventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static TaskList testTaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    private static Ui testUi;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Initializing tasklisk, ui and event to be added and tested for all test cases."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testUi \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Event testEvent \u003d new Event(\"Daily Work\", \"CS2113T\", Parser.parseDate(\"31/01/20 0800\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                Parser.parseDate(\"31/01/20 1200\"), \"testing\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Assignment testAssign \u003d new Assignment(\"Daily Work\", \"CS2113T\", Parser.parseDate(\"20/03/20 0000\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"testing\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList.addTask(testAssign);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    //whatIsBeingTested_descriptionOfTestInputs_expectedOutcome"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void testAssignment_setToRepeat_invalidEventRepeatErrorMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(1, 1, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(testRepeatCommand.execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"Daily Work is not an event. Please choose an event.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void numOfPeriod_getNumOfPeriod_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getNumOfPeriod(), 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void typeOfPeriod_getTypeOfPeriod_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getTypeOfPeriod(), \"d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_todayDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getDate(), LocalDateTime.now().toLocalDate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_nextWeekDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.WEEKLY_ICON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate taskDate \u003d repeatEvent.getOriginalDateAndTime().toLocalDate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getDate(), taskDate.plusWeeks("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                repeatEvent.getPeriodCounter() * repeatEvent.getNumOfPeriod()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_nextMonthDate() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.MONTHLY_ICON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate taskOriginalDate \u003d repeatEvent.getOriginalDateAndTime().toLocalDate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getDate(), taskOriginalDate.plusMonths("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                repeatEvent.getPeriodCounter() * repeatEvent.getNumOfPeriod()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_nextYearDate() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.YEARLY_ICON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate taskOriginalDate \u003d repeatEvent.getOriginalDateAndTime().toLocalDate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getDate(), taskOriginalDate.plusYears("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                repeatEvent.getPeriodCounter() * repeatEvent.getNumOfPeriod()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Check that RepeatEvent does not break upon changes in numOfPeriod and typeOfPeriod"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * i.e using repeat command multiple times"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     * Set date to 8 days ago. Then set repeat at 1w. Then set repeat to 1d. The NextDateTime should be next week."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingTask_changeRepeatPeriod_nextWeekDate() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate testDate \u003d LocalDateTime.now().minusWeeks(1).minusDays(1).toLocalDate();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalTime testTime \u003d LocalTime.of(8, 30);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDateTime testDateTime \u003d LocalDateTime.of(testDate, testTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        Event testEvent \u003d new Event(\"8 days ago\", \"CS2113T\", testDateTime, testDateTime.plusHours(4),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309556"
        },
        "content": "                \"testing\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        // Set to 1w"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(2, 1, RepeatCommand.WEEKLY_ICON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        // Set to 1d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand \u003d new RepeatCommand(2, 1, RepeatCommand.DAILY_ICON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        repeatEvent \u003d (RepeatEvent) testTaskList.getTask(2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getPeriodCounter(), 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        assertEquals(repeatEvent.getNextDateTime(), LocalDateTime.of(LocalDate.now().plusWeeks(1), testTime));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    public void repeatingTask_CheckDateOfEndOfMonth_lastDayOfMonthDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        // Make arrays 1-based indexing for easy comparison."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        int[] endOfMonth \u003d {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        int[] endOfMonthLeapYear \u003d {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, RepeatCommand.MONTHLY_ICON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        RepeatEvent repeatEvent \u003d (RepeatEvent) testTaskList.getTask(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        LocalDate eventDate \u003d repeatEvent.getDate();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        int year \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        // Check if this year is a leap year"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        if (((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            assertEquals(eventDate.getDayOfMonth(), endOfMonthLeapYear[eventDate.getMonthValue()]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309556"
        },
        "content": "            assertEquals(eventDate.getDayOfMonth(), endOfMonth[eventDate.getMonthValue()]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309556": 143
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/Assignment 3 m/CS2102 d/13/03/20 1800 c/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/Assignment 3 m/CS2102 d/13/03/20 1800 c/5%"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/OP1 m/CS2101 d/01/01/20 0000 c/15%"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/midterms l/MPSH1A d/13/03/20 1800 - 2030 c/20%"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/Countdown l/TimeSquare d/13/03/21 1800 - 2300 c/new year new me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "clear done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list upcoming events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list incomplete assignments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "search t/all n/OP1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "search t/ALL n/                         OP1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "searchd t/ASSIGNMENT n/           OP1 d/                01/01/20"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "search"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "searchd t/ n/ d/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/Countdown l/TimeSquare d/13/03/22 1800 - 2300 c/new year new me"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "clear all"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "joelczk": 22
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "jichngan": 1
    }
  }
]
