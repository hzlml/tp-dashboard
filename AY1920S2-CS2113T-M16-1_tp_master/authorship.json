[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "group \u0027seedu.atas\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    mainClassName \u003d \"seedu.atas.Atas\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.atas.Atas\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    archiveBaseName \u003d \"atas\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    archiveVersion \u003d \"2.0.0\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 4,
      "-": 38,
      "E0309556": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Keith | [Github](https://github.com/Keith-JK) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Joel Chang | [Github](https://github.com/joelczk) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jeremy Lai | [Github](https://github.com/lwxymere) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ji Cheng | [Github](https://github.com/jichngan) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Qi Ren | [Github](https://github.com/e0309556) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "-": 4,
      "E0309556": 3,
      "jichngan": 1
    }
  },
  {
    "path": "src/main/java/command/AssignmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class AssignmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_COMMAND_WORD \u003d \"assignment\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String assignmentName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs an AssignmentCommand object with the parameters provided."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param assignmentName String containing name of Assignment"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param moduleName String containing name of module Assignment belongs to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param deadline LocalDateTime object containing the deadline of Assignment"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Assignment with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public AssignmentCommand(String assignmentName, String moduleName, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Creates new Assignment, adds to TaskList, print Ui messages."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Task newAssignment \u003d new Assignment(assignmentName, moduleName, deadline, comments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isRepeatTask(taskList, newAssignment)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.REPEAT_TASK_ERROR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newAssignment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newAssignment, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 17,
      "joelczk": 1,
      "Keith-JK": 26,
      "E0309556": 6
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommand  extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String ALL_CLEAR_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearAllParam  \u003d \"all\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearDoneParam \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearParam;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs the clear command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ClearCommand(String clearParam) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.clearParam \u003d clearParam;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        switch (clearParam \u003d\u003d null ? ALL_CLEAR_COMMAND : clearParam) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case (clearAllParam):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return clearAll(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case (clearDoneParam):"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return clearDone(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.CLEAR_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Clears all the tasks in the taskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list storing all the tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return messages for user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult clearAll(TaskList taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.clearList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert taskList.getListSize() \u003d\u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.CLEAR_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Get all the index of tasks that have been completed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of index of completed tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ArrayList\u003cInteger\u003e getCompletedIndex(TaskList taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cInteger\u003e doneIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getIsDone()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                doneIndex.add(count);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return doneIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes all the completed tasks and displays user messages."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list storing all the tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return user messages"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult clearDone(TaskList taskList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int originalTaskSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cInteger\u003e doneIndex \u003d getCompletedIndex(taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else if (doneIndex.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_DONE_CLEAR_ERROR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskList.deleteAllDoneTask(doneIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert taskList.getListSize() \u003d\u003d originalTaskSize - doneIndex.size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.CLEAR_DONE_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 81,
      "Keith-JK": 2,
      "E0309556": 2
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Executes the specific command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract CommandResult execute(TaskList taskList, Ui ui); //"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // todo: take TaskList, Ui, Storage as parameters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Obtain a range of numbers that is valid for usage on taskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList The interested list in TaskManager to find the range of values"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return A string with the range of valid numbers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String getRangeOfValidIndex(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        int maxTasks \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return String.format(Messages.RANGE_OF_VALID_TASK_INDEX_MSG, maxTasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Checks for duplicate task within tasklist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param tasklist TaskList to be checked against"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param addedTask new Task that needs to be checked"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return True if there already exists a task within tasklist. Otherwise, false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected Boolean isRepeatTask(TaskList tasklist, Task addedTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasklist.getTaskArray()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task.equals(addedTask)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 6,
      "joelczk": 1,
      "E0309556": 34,
      "jichngan": 1
    }
  },
  {
    "path": "src/main/java/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Result from running the Command to be shown to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise the input to be shown to user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param feedbackToUser String to be shown to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 17
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DELETE_COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected int deleteIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs a DeleteCommand with the parameters supplied."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param index index of task to be deleted"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.deleteIndex \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task taskToBeDeleted \u003d taskList.getTask(deleteIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.DELETE_SUCCESS_MESSAGE, taskToBeDeleted.getName()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert deleteIndex \u003c\u003d 0 || deleteIndex \u003e taskList.getListSize() - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 18,
      "joelczk": 10,
      "Keith-JK": 1,
      "E0309556": 5
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DONE_COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected int doneIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs a DoneCommand with parameters supplied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param index index in the ArrayList to be marked done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.doneIndex \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task taskToBeMarkDone \u003d taskList.getTask(doneIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (taskToBeMarkDone.getIsDone()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                return new CommandResult(Messages.COMPLETED_TASK_ERROR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskList.markTaskAsDone(doneIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.DONE_SUCCESS_MESSAGE, taskToBeMarkDone.getName()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 20,
      "joelczk": 1,
      "Keith-JK": 9,
      "E0309556": 7
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jichngan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EDIT_COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String ASSIGNMENT_COMMAND \u003d \"assignment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //Regex for Assignment Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final Pattern ASSIGNMENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003cassignmentName\u003e[^/]+)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+m/\\\\s*(?\u003cmoduleName\u003e[^/]+)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //Regex for Event Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final Pattern EVENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003ceventName\u003e[^/]+)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+l/\\\\s*(?\u003clocation\u003e[^/]+)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4}\\\\s*-\\\\s*\\\\d{4})\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    protected int editIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for EditCommand class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editIndex Integer of task index to be edited"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public EditCommand(int editIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Executes the edit command function."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Takes in a new input from the user and formats input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Replaces task from the tasklist at index specified by user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return CommandResult object based on result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.EDIT_PROMPT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.DIVIDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String commandType \u003d userInput.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            case ASSIGNMENT_COMMAND:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                Task editedAssignment \u003d editAssignment(userInput, ui);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.editTask(editIndex, editedAssignment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedAssignment));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            case EVENT_COMMAND:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                Task editedEvent \u003d editEvent(userInput, ui);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.editTask(editIndex, editedEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedEvent));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(Messages.UNKNOWN_COMMAND_ERROR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Creates an assignment object by formatting the string supplied by user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param userInput String supplied by user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Formats output to display error messages to user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Assignment object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public Assignment editAssignment(String userInput, Ui ui) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        final Matcher matcher \u003d ASSIGNMENT_PARAMETERS_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.ASSIGN_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            dateTime \u003d Parser.parseDate(matcher.group(\"dateTime\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String assignmentName \u003d Parser.capitalize(matcher.group(\"assignmentName\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String moduleName \u003d matcher.group(\"moduleName\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String comments \u003d Parser.capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new Assignment(assignmentName, moduleName, dateTime, comments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Creates an event object by formatting the string supplied by user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param userInput String supplied by user"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Formats output to display error messages to user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public Event editEvent(String userInput, Ui ui) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        final Matcher matcher \u003d EVENT_PARAMETERS_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.EVENT_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime startDateTime \u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime endDateTime \u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String startEndDateTime \u003d matcher.group(\"dateTime\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String[] dateTimeTokens \u003d startEndDateTime.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String[] timeTokens \u003d dateTimeTokens[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            startDateTime \u003d Parser.parseDate(dateTimeTokens[0] + \" \" + timeTokens[0].trim());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            endDateTime \u003d Parser.parseDate(dateTimeTokens[0] + \" \" + timeTokens[1].trim());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.START_END_DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!endDateTime.isAfter(startDateTime)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.INCORRECT_START_END_TIME_ERROR);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String eventName \u003d Parser.capitalize(matcher.group(\"eventName\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String location \u003d matcher.group(\"location\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String comments \u003d Parser.capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new Event(eventName, location, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jichngan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jichngan": 151
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventLocation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs EventCommand with the supplied parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventName String containing name of event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventLocation String containing location of event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param startDateTime LocalDateTime containing the starting date and time of event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param endDateTime LocalDateTime containing the ending date and time of event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Event with"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public EventCommand(String eventName, String eventLocation, LocalDateTime startDateTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        LocalDateTime endDateTime, String comments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newEvent \u003d new Event(eventName, eventLocation, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isRepeatTask(taskList, newEvent)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.REPEAT_TASK_ERROR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newEvent, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 25,
      "joelczk": 1,
      "Keith-JK": 17,
      "E0309556": 5
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EXIT_COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Executes the Exit command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Checks whether the program should terminate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return true if the program should exit, false otherwise"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 13,
      "Keith-JK": 17
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String HELP_COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints to user the help message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(Messages.HELP_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "Keith-JK": 17
    }
  },
  {
    "path": "src/main/java/command/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructor to deal with incorrect commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param description String of the wrong command input by user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public IncorrectCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(Messages.INCORRECT_COMMAND_ERROR, description));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 13,
      "joelczk": 5,
      "Keith-JK": 1,
      "E0309556": 3
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private final String listParam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String ALL_TASK_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String TODAY_COMMAND \u003d \"today\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String WEEK_COMMAND \u003d \"week\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String UPCOMING_EVENT_COMMAND \u003d \"upcoming events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String INCOMPLETE_ASSIGN_COMMAND \u003d \"incomplete assignments\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for ListCommand Class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param listParam String containing user input on type of listing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ListCommand(String listParam) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.listParam \u003d listParam;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e allTaskList \u003d taskList.getTaskArray();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        // to deal with null being passed as input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        switch (listParam \u003d\u003d null ? ALL_TASK_COMMAND : listParam) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (TODAY_COMMAND):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTasksByDays(0)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (WEEK_COMMAND):"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTasksByDays(7)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (UPCOMING_EVENT_COMMAND):"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getUpcomingEventArray()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (INCOMPLETE_ASSIGN_COMMAND):"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getIncompleteAssignArray()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (ALL_TASK_COMMAND):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTaskArray()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.LIST_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Formats String of tasks with standard task listing message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param taskList ArrayList object with tasks to be printed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Formatted string of tasks and printing message"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String showListTasks(ArrayList\u003cTask\u003e allTaskList, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            //If there are no tasks found within the provided taskList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return (Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String stringFromArrayList \u003d stringTaskList(allTaskList, taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (String.format(Messages.SHOW_TASKLIST_MESSAGE, System.lineSeparator(), stringFromArrayList));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Converts ArrayList object into string to be printed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param allTaskList Use ArrayList object with all tasks added in it to obtain its original index."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param selectedTaskList ArrayList object with tasks to be printed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Formatted string of tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String stringTaskList(ArrayList\u003cTask\u003e allTaskList, ArrayList\u003cTask\u003e selectedTaskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        StringBuilder stringFromArrayList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert selectedTaskList.size() \u003e 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert allTaskList.size() \u003e 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Task lastTask \u003d selectedTaskList.get(selectedTaskList.size() - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert lastTask !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : selectedTaskList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            stringFromArrayList.append(String.format(\"%3d. %s\", allTaskList.indexOf(task) + 1, task.toString()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task.equals(lastTask)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            stringFromArrayList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return stringFromArrayList.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 9,
      "joelczk": 1,
      "E0309556": 53,
      "jichngan": 20
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCH_COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String searchParam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String allTasks \u003d \"all\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String eventTasks \u003d \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String assignmentTasks \u003d \"assignment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public SearchCommand(String searchParam, String taskType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.searchParam \u003d searchParam.toLowerCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an arrayList of all the tasks that matches the search query."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList object containing all the tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return arrayList of all tasks that match the search query"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAllTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskArray();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all event objects that matches the search query."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList object containing all the tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all event objects that matches the search query"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryEvents(TaskList taskList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e events \u003d taskList.getEventsArray();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert events.size() \u003d\u003d taskList.getEventsArray().size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task event: events) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (event.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all assignments objects that matches the search query."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList objects containing all assignment tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all assignment object that matches the search query"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAssignments(TaskList taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e assignments \u003d taskList.getAssignmentsArray();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert assignments.size() \u003d\u003d taskList.getAssignmentsArray().size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task assignment: assignments) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (assignment.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(assignment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * prints out the search query."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList containing the results of the search query"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private void printResultsList(ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            System.out.println(String.format(Messages.EMPTY_SEARCH_RESULTS_ERROR));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert results.size() \u003e 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            int position \u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            System.out.println(\"Here are the search results:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            for (Task task: results) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                System.out.println(position + \". \" + task.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                position++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.EMPTY_TASKLIST_MESSAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case allTasks:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e results \u003d getSearchQueryAllTasks(taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            printResultsList(results);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.SEARCH_SUCCESS_MESSAGE, results.size()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case eventTasks:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e eventResults \u003d getSearchQueryEvents(taskList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            printResultsList(eventResults);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.SEARCH_SUCCESS_MESSAGE, eventResults.size()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case assignmentTasks:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e assignmentResults \u003d getSearchQueryAssignments(taskList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            printResultsList(assignmentResults);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.SEARCH_SUCCESS_MESSAGE, assignmentResults.size()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_SEARCH_FORMAT));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 116
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Container for all default messages printed to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Start up and Exit Print Messages"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \" _______        _______        _______        _______ \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"|   _   |      |       |      |   _   |      |       |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"|  |_|  |      |_     _|      |  |_|  |      |  _____|\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"|       |        |   |        |       |      | |_____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"|       | ___    |   |   ___  |       | ___  |_____  |\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"|   _   ||   |   |   |  |   | |   _   ||   |  _____| |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"|__| |__||___|   |___|  |___| |__| |__||___| |_______|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Exiting A.T.A.S\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Common Print Messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DIVIDER \u003d \"_______________________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NEWLINE_INDENT \u003d \"     \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String COMMENTS_INDENT \u003d \"            notes: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Help Print Messages"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/yy HHmm\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String START_END_DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/yy HHmm - HHmm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_FORMAT_HELP \u003d \"Add Event: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"event n/[EVENT NAME] l/[LOCATION] d/[dd/MM/yy HHmm - HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_FORMAT_HELP \u003d \"Add Assignment: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"assignment n/[ASSIGNMENT NAME] m/[MODULE NAME] d/[dd/MM/yy HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DONE_FORMAT_HELP \u003d \"Mark Task as Done: done [TASK NUMBER]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DELETE_FORMAT_HELP \u003d \"Delete a Task: delete [TASK NUMBER]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_FORMAT_HELP \u003d \"List All Tasks: list\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_TODAY_FORMAT_HELP \u003d \"List Today\u0027s Tasks: list today\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_WEEK_FORMAT_HELP \u003d \"List This Week\u0027s Tasks: list week\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_UPCOMING_EVENT_FORMAT_HELP \u003d \"List Upcoming Events: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"list upcoming events\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_INCOMPLETE_ASSIGN_FORMAT_HELP \u003d \"List Incomplete Assignments: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"list incomplete assignments\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_FORMAT_HELP \u003d \"Clear all tasks: clear all\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_DONE_FORMAT_HELP \u003d \"Clear all completed tasks: clear done\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCH_FORMAT_HELP \u003d \"Search for tasks: search t/[TASK TYPE] n/[TASK NAME]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String EXIT_FORMAT_HELP \u003d \"Exit ATAS: exit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String HELP_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            \"Following is the list of commands available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"1.  Help Format: help\" + System.lineSeparator()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"2.  \" + ASSIGNMENT_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"3.  \" + EVENT_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"4.  \" + LIST_TODAY_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"5.  \" + LIST_WEEK_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"6.  \" + LIST_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"7.  \" + LIST_INCOMPLETE_ASSIGN_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"8.  \" + LIST_UPCOMING_EVENT_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    + \"9.  \" + DONE_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"10. \" + CLEAR_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"11. \" + CLEAR_DONE_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"12. \" + DELETE_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"13. \" + SEARCH_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"13. \" + EXIT_FORMAT_HELP;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Command Print Messages"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ADD_SUCCESS_MESSAGE \u003d \"Added task:\" + System.lineSeparator() + NEWLINE_INDENT"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"%s\" + System.lineSeparator() + \"Now you have %d task%s in the list!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EMPTY_TASKLIST_MESSAGE \u003d \"No tasks were found\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String SHOW_TASKLIST_MESSAGE \u003d \"Here are the relevant tasks:%s%s\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DONE_SUCCESS_MESSAGE \u003d \"[%s] has been marked done!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DELETE_SUCCESS_MESSAGE \u003d \"[%s] has been deleted!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_SUCCESS_MESSAGE \u003d \"All tasks have been deleted\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_DONE_SUCCESS_MESSAGE \u003d \"All completed tasks have been removed\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCH_SUCCESS_MESSAGE \u003d \"There are a total of %d result(s) found\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EDIT_SUCCESS_MESSAGE \u003d \"Task edited successfully:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + NEWLINE_INDENT + \"%s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EDIT_PROMPT \u003d \"Please edit your chosen task\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Others"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String NO_TASKS_MSG \u003d \"You have no tasks at the moment\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String RANGE_OF_VALID_TASK_INDEX_MSG \u003d \"1 to %1$s\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Error Messages"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String INCORRECT_COMMAND_ERROR \u003d \"Oh no. %s\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String UNKNOWN_COMMAND_ERROR \u003d \"Unknown command entered\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DATE_INCORRECT_OR_INVALID_ERROR \u003d \"Wrong date format or invalid date provided\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + System.lineSeparator() + DATE_FORMAT_HELP;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String START_END_DATE_INCORRECT_OR_INVALID_ERROR \u003d \"Wrong date format or invalid date provided\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + START_END_DATE_FORMAT_HELP;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String NUM_FORMAT_ERROR \u003d \"Please provide an integer as the command parameter\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String INVALID_ID_ERROR \u003d \"Please provide a valid task number from %1$s\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMPLETED_TASK_ERROR \u003d \"Task is already completed\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String REPEAT_TASK_ERROR \u003d \"Please use a different name. Task already exists in list\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EMPTY_DONE_CLEAR_ERROR \u003d \"There are no completed tasks at the moment\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String INCORRECT_START_END_TIME_ERROR \u003d \"The end time should come after the start time\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String INCORRECT_STORAGE_FORMAT_ERROR \u003d \"The local save file is of an unknown format. \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"Exit now using \u003cCtrl C\u003e to manually fix the save file, \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"or the save file will be overwritten with the new session data\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NO_SAVE_FILE_MESSAGE \u003d \"No existing save file found. A new save file will be created\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String SAVE_FAILED_MESSAGE \u003d \"Oh no. Something went wrong while saving, please try again later\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ASSIGN_INCORRECT_FORMAT_ERROR \u003d \"Incorrect format for Assignment Command\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + ASSIGNMENT_FORMAT_HELP;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String EVENT_INCORRECT_FORMAT_ERROR \u003d \"Incorrect format for Event Command\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + EVENT_FORMAT_HELP;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String LIST_INCORRECT_FORMAT_ERROR \u003d \"Invalid argument for List Command\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DONE_INSUFFICIENT_ARGS_ERROR \u003d \"Insufficient arguments for Done Command\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + DONE_FORMAT_HELP;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DELETE_INSUFFICIENT_ARGS_ERROR \u003d \"Insufficient arguments for Delete Command\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + System.lineSeparator() + DELETE_FORMAT_HELP;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_INCORRECT_FORMAT_ERROR \u003d \"Invalid argument for Clear Command\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EMPTY_SEARCH_RESULTS_ERROR \u003d \"There are no matching tasks for the search query\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String INVALID_SEARCH_FORMAT \u003d \"Invalid Argument for Search Command\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCH_INSUFFICIENT_ARGS \u003d \"Insufficient argument for Search Command\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + System.lineSeparator() + SEARCH_FORMAT_HELP;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 26,
      "joelczk": 36,
      "Keith-JK": 21,
      "E0309556": 17,
      "jichngan": 11
    }
  },
  {
    "path": "src/main/java/exceptions/AtasException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class AtasException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public AtasException(String errorMsg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Formats the string that is return from the exception thrown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String with default error message for this error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"ERROR: \" + super.getMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "jichngan": 2,
      "E0309556": 11
    }
  },
  {
    "path": "src/main/java/seedu/atas/Atas.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Atas {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Instantiate Ui and TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Atas() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            this.taskList \u003d storage.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (AtasException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(e.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(Messages.NO_SAVE_FILE_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Starts Duke Process."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void run() throws AtasException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Run loop until exit command is received."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void runLoop() throws AtasException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        while (!ExitCommand.isExit()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            CommandResult result \u003d command.execute(taskList, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(result.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            trySaveTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            ui.showToUser(Messages.DIVIDER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private void trySaveTaskList() throws AtasException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(Messages.SAVE_FAILED_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static void main(String[] args) throws AtasException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        new Atas().run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 38,
      "joelczk": 5,
      "Keith-JK": 19,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/atas/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add assignment command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern ASSIGNMENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+n/\\\\s*(?\u003cassignmentName\u003e[^/]+)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+m/\\\\s*(?\u003cmoduleName\u003e[^/]+)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add event command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern EVENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+n/\\\\s*(?\u003ceventName\u003e[^/]+)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+l/\\\\s*(?\u003clocation\u003e[^/]+)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4}\\\\s*-\\\\s*\\\\d{4})\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //regex for search command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final Pattern SEARCH_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            \"(?\u003csearch\u003e[^/]+)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"\\\\s+t/\\\\s*(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a Command object depending on the command input by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param fullCommand line input by the user, which represents a command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Command depending on user input, with the appropriate arguments set"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Command parseCommand(String fullCommand) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String commandType \u003d fullCommand.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case HelpCommand.HELP_COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return prepareHelpCommand(fullCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case AssignmentCommand.ASSIGNMENT_COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareAssignmentCommand(fullCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case DeleteCommand.DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case ClearCommand.CLEAR_COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return prepareClearCommand(fullCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case DoneCommand.DONE_COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDoneCommand(fullCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case EventCommand.EVENT_COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareEventCommand(fullCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case ListCommand.LIST_COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareListCommand(fullCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case SearchCommand.SEARCH_COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return prepareSearchCommand(fullCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        case EditCommand.EDIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return prepareEditCommand(fullCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case ExitCommand.EXIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return prepareExitCommand(fullCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.UNKNOWN_COMMAND_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a LocalDateTime object based on an input String with the format INPUT_DATE_FORMAT."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param dateTimeString String representing a date with the format dd/MM/yy HHmm"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDateTime representing the date and time specified in dateTimeString"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static LocalDateTime parseDate(String dateTimeString)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        // handle issue where there are multiple spaces between the date and the time"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] dateAndTime \u003d dateTimeString.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String formattedDateTimeString \u003d dateAndTime[0] + \" \" + dateAndTime[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return LocalDateTime.parse(formattedDateTimeString, INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareAssignmentCommand(String fullCommand) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d ASSIGNMENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.ASSIGN_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            dateTime \u003d parseDate(matcher.group(\"dateTime\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String assignmentName \u003d capitalize(matcher.group(\"assignmentName\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String moduleName \u003d matcher.group(\"moduleName\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String comments \u003d capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new AssignmentCommand(assignmentName, moduleName, dateTime, comments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareSearchCommand(String fullCommand) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        final Matcher matcher \u003d SEARCH_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new IncorrectCommand(Messages.SEARCH_INSUFFICIENT_ARGS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskType \u003d matcher.group(\"taskType\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskName \u003d matcher.group(\"name\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return new SearchCommand(taskName, taskType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 1 || tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int deleteIndex;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            deleteIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DELETE_INSUFFICIENT_ARGS_ERROR);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DeleteCommand(deleteIndex);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 1 || tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int doneIndex;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            doneIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DONE_INSUFFICIENT_ARGS_ERROR);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DoneCommand(doneIndex);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareEventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d EVENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.EVENT_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String startEndDateTime \u003d matcher.group(\"dateTime\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String[] dateTimeTokens \u003d startEndDateTime.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String[] timeTokens \u003d dateTimeTokens[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            startDateTime \u003d parseDate(dateTimeTokens[0] + \" \" + timeTokens[0].trim());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            endDateTime \u003d parseDate(dateTimeTokens[0] + \" \" + timeTokens[1].trim());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.START_END_DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!endDateTime.isAfter(startDateTime)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.INCORRECT_START_END_TIME_ERROR);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String eventName \u003d capitalize(matcher.group(\"eventName\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String location \u003d matcher.group(\"location\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String comments \u003d capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new EventCommand(eventName, location, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            // check if list has no parameters"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new ListCommand(tokens[1]);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareClearCommand(String fullCommand) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String[] tokens \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (tokens.length  \u003d\u003d 1) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new ClearCommand(null);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return new ClearCommand(tokens[1]);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareExitCommand(String fullCommand) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert fullCommand.trim().equals(ExitCommand.EXIT_COMMAND_WORD);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareHelpCommand(String fullCommand) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert fullCommand.trim().equals(HelpCommand.HELP_COMMAND_WORD);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static Command prepareEditCommand(String fullCommand) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        int editIndex;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            editIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new IncorrectCommand(Messages.DONE_INSUFFICIENT_ARGS_ERROR);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new EditCommand(editIndex);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Capitalizes the first alphabet of a string."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param str String to be capitalized"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Capitalized string"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static String capitalize(String str) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (str \u003d\u003d null || str.isEmpty()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return str;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return str.substring(0, 1).toUpperCase() + str.substring(1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 150,
      "joelczk": 40,
      "Keith-JK": 22,
      "jichngan": 22,
      "E0309556": 9
    }
  },
  {
    "path": "src/main/java/seedu/atas/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected static final String DEFAULT_FILEPATH \u003d \"./atasData.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected final String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Reads data from the local save file specified by filePath, and returns the corresponding TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return TaskList containing all tasks in the save file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws AtasException if the save file format is incorrect"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IOException if no save file is found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public TaskList load() throws AtasException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Scanner scanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String encodedTask \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Task task \u003d decodeTask(encodedTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            assert task !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private Task decodeTask(String encodedTask) throws AtasException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String taskType \u003d encodedTask.substring(0, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            case Assignment.ASSIGNMENT_ICON:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                task \u003d Assignment.decodeTask(encodedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            case Event.EVENT_ICON:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                task \u003d Event.decodeTask(encodedTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                throw new AtasException(Messages.INCORRECT_STORAGE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throw new AtasException(Messages.INCORRECT_STORAGE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Saves the taskList\u0027s current state into a local file located at filePath."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param taskList TaskList to be stored"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IOException if an IO error occurs in FileWriter methods"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        for (Task task : taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            sj.add(task.encodeTask());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        fileWriter.write(sj.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 81
    }
  },
  {
    "path": "src/main/java/seedu/atas/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for TaskList class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Instantiate a new ArrayList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for size of ArrayList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList size"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for ArrayList of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList of tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArray() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for the current Local Date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Formats Local Date into \"dd/MM/yyyy\" format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return LocalDate object of the formatted current Date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currentDateObj \u003d LocalDate.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        DateTimeFormatter formattedDateObj \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String currentDate \u003d currentDateObj.format(formattedDateObj);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate formattedCurrDate \u003d LocalDate.parse(currentDate, formattedDateObj);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return formattedCurrDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter method for tasks depending of days from today."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param days Integer representing number of days from today"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList object containing all tasks from indicated days from today"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByDays(int days) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert days \u003e\u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currDate \u003d getCurrentDate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate daysIndicated \u003d currDate.plusDays(days);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            assert taskList.size() \u003c\u003d tasks.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            if (currDate.compareTo(taskDate) \u003c\u003d 0 \u0026\u0026 taskDate.compareTo(daysIndicated) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter method for tasks that are events and in the future."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList object containing all future events."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getUpcomingEventArray() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDateTime currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            LocalDateTime taskDateTime \u003d task.getDateAndTime();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task instanceof Event \u0026\u0026 taskDateTime.compareTo(currDateTime) \u003e 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                eventList.add(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter method for tasks that are assignments and not marked done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList object containing all incomplete assignments"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getIncompleteAssignArray() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e assignList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task instanceof Assignment \u0026\u0026 !task.getIsDone()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                assignList.add(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return assignList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Getter for all events tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList object containing all events"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ArrayList\u003cTask\u003e getEventsArray() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                eventList.add(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter method for Task with the provided index in TaskList."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param index index of Task to return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return Task object with corresponding index"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Task getTask(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Getter for all assignment tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList object containing all assignments"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ArrayList\u003cTask\u003e getAssignmentsArray() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e assignmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                assignmentList.add(task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return assignmentList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds a task to TaskList."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param task task object to be added"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Set the Task corresponding to index specified as done."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param doneIndex index of Task to be marked done"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of size of current TaskList"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void markTaskAsDone(int doneIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        tasks.get(doneIndex).setDone();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.get(doneIndex).getIsDone() \u003d\u003d true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Delete tasks according to the index specified by user."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param deleteIndex index of task to be deleted"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of the size of current Tasklist"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void deleteTask(int deleteIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.remove(deleteIndex);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.size() \u003d\u003d size - 1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Edits task according to the index specified by user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Edited task replaces the index of the old task."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editIndex Integer of index of task to be edited"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editedTask Edited task object to be replaced in ArrayList"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @throws IndexOutOfBoundsException Thrown when index is out of range of the current TaskList"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editTask(int editIndex, Task editedTask) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        tasks.set(editIndex, editedTask);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes all the tasks in the list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Deletes the all tasks specified by doneIndex."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param doneIndex ArrayList of indexes to be removed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void deleteAllDoneTask(ArrayList\u003cInteger\u003e doneIndex) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        doneIndex.sort(Comparator.reverseOrder());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int index : doneIndex) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            deleteTask(index);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jichngan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 48,
      "Keith-JK": 33,
      "jichngan": 87,
      "E0309556": 34
    }
  },
  {
    "path": "src/main/java/seedu/atas/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a line divider."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints welcome messages."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.println(\"Hello from\\n\" + Messages.LOGO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.println(Messages.HELP_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a prompt to user and returns the next line of user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return String of user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        out.print(\"\u003e \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Prints all messages with a newline in between each message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param messages strings to be shown to the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void showToUser(String... messages) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            out.println(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "Keith-JK": 32,
      "E0309556": 17
    }
  },
  {
    "path": "src/main/java/tasks/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class Assignment extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_ICON \u003d \"A\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Assignment object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of Assignment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param module module for Assignment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param deadline deadline of Assignment"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments for Assignment"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public Assignment(String name, String module, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + ASSIGNMENT_ICON + \"]\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + deadline.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | mod: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + module"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(ASSIGNMENT_ICON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(module);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(deadline.format(Parser.INPUT_DATE_FORMAT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(comments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Converts an encoded Assignment back to an Assignment object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param encodedTask Assignment encoded using encodedTask()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Assignment with the correct attributes set"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if encoded deadline cannot be parsed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if encodedTask is not a String returned by calling encodeTask() on"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *              an Assignment"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Assignment decodeTask(String encodedTask)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\"\\\\\" + STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens[0].equals(ASSIGNMENT_ICON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String name \u003d tokens[2];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String module \u003d tokens[3];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime deadline \u003d Parser.parseDate(tokens[4]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d tokens[5];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 6;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment assignment \u003d new Assignment(name, module, deadline, comments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            assignment.setDone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return assignment;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 78,
      "joelczk": 19,
      "Keith-JK": 1
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_ICON \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime startDateAndTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime endDateAndTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Event object constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of Event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param location location of Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param startDateTime starting date and time of Event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param endDateTime ending date and time of Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments for the Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Event(String name, String location, LocalDateTime startDateTime, LocalDateTime endDateTime,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                 String comments) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.startDateAndTime \u003d startDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.endDateAndTime \u003d endDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime.toLocalTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending date and time of the event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDateTime object representing the end time and date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getEndDateAndTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending date of the event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDate object representing the end date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending time of the event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalTime object representing the end time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime.toLocalTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + EVENT_ICON + \"]\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + location"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + startDateAndTime.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + endDateAndTime.format(Parser.PRINT_TIME_FORMAT)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(EVENT_ICON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(location);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(startDateAndTime.format(Parser.INPUT_DATE_FORMAT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(endDateAndTime.format(Parser.INPUT_DATE_FORMAT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(comments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Converts an encoded Event back to an Event object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param encodedTask Event encoded using encodedTask()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Event with the correct attributes set"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if encoded startDateAndTime or endDateAndTime cannot be parsed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if encodedTask is not a String returned by calling encodeTask() on"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *              an Event"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Event decodeTask(String encodedTask)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\"\\\\\" + STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens[0].equals(EVENT_ICON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String name \u003d tokens[2];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String location \u003d tokens[3];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime startDateAndTime \u003d Parser.parseDate(tokens[4]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime endDateAndTime \u003d Parser.parseDate(tokens[5]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d tokens[6];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 7;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event event \u003d new Event(name, location, startDateAndTime, endDateAndTime, comments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            event.setDone();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 114,
      "joelczk": 16,
      "Keith-JK": 1
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String STORAGE_DELIMITER \u003d \"|\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Task object representing a Event or Assignment object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of event or assignment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments to the event or assignment"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Task(String name, String comments) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDateTime getDateAndTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalTime getTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns symbol representing if task is completed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return return tick if task is completed, else return cross"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[/]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[X]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return String.format(\"%s %s\", getStatusIcon(), name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public boolean equals(Object addedTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (this \u003d\u003d addedTask) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (addedTask \u003d\u003d null || getClass() !\u003d addedTask.getClass()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert ((addedTask.getClass() \u003d\u003d Assignment.class) || (addedTask.getClass() \u003d\u003d Event.class));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Task task \u003d (Task) addedTask;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return name.equals(task.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Encodes a task for local storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return String that represents the encoded task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract String encodeTask();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 17,
      "joelczk": 44,
      "Keith-JK": 8,
      "E0309556": 13
    }
  },
  {
    "path": "src/test/java/command/AssignmentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        AssignmentCommand testAssignmentCommand \u003d new AssignmentCommand("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"assignment\", \"CS2113T\", Parser.parseDate(\"20/03/20 0900\"), \"yes\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testAssignmentCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 7,
      "joelczk": 14
    }
  },
  {
    "path": "src/test/java/command/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Initialize hard-coded test cases for testing purposes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ClearCommandTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime1 \u003d LocalDateTime.parse(date1, dateTimeFormatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime2 \u003d LocalDateTime.parse(date2, dateTimeFormatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime3 \u003d LocalDateTime.parse(date3, dateTimeFormatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime4 \u003d LocalDateTime.parse(date4, dateTimeFormatter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment testCaseTwo \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseThree \u003d new Assignment(null,null,null,null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event testCaseSix \u003d new Event(null,null,null, null,null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearAll_filledList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"all\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.CLEAR_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearAll_emptyList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(filledTaskList.getListSize(),6);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"all\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_filledList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.markTaskAsDone(2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.markTaskAsDone(4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.CLEAR_DONE_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_filledList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_DONE_CLEAR_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_EmptyList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 16,
      "joelczk": 77
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testDelete_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testDelete_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.deleteTask(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 24,
      "Keith-JK": 2
    }
  },
  {
    "path": "src/test/java/command/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"meeting\", \"Singapore\", Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                Parser.parseDate(\"20/03/20 1100\"), null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testEventCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 8,
      "joelczk": 14
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        CommandResult testResult \u003d Parser.parseCommand(ExitCommand.EXIT_COMMAND_WORD).execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult compareResult \u003d new CommandResult(Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.getClass(), compareResult.getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.feedbackToUser, Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(ExitCommand.isExit());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 5,
      "Keith-JK": 18
    }
  },
  {
    "path": "src/test/java/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static TaskList filledTasklist;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static TaskList emptyTasklist;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static TaskList filledWeeklyTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime currDateTime1 \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime currDateTime2 \u003d LocalDateTime.now().plusSeconds(60);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime oneWeekDateTime1 \u003d currDateTime1.plusDays(7);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime oneWeekDateTime2 \u003d currDateTime2.plusDays(7);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrButSameDayDateTime1 \u003d currDateTime1.plusSeconds(30);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrButSameDayDateTime2 \u003d currDateTime1.plusSeconds(300);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String beforeCurrDateTimeString1 \u003d \"13/02/20 1800\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String beforeCurrDateTimeString2 \u003d \"13/02/20 2030\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrDateTimeString1 \u003d \"01/01/21 0000\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrDateTimeString2 \u003d \"01/01/21 0259\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime beforeCurrDateTime1 \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(beforeCurrDateTimeString1, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime beforeCurrDateTime2 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(beforeCurrDateTimeString2, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrDateTime1 \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(afterCurrDateTimeString1, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrDateTime2 \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(afterCurrDateTimeString2, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String currDateTimeStringForPrint1 \u003d currDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String currDateTimeStringForPrint2 \u003d currDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String nextWeekDateTimeStringForPrint1 \u003d oneWeekDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String nextWeekDateTimeStringForPrint2 \u003d oneWeekDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrButSameDayStringForPrint1 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            afterCurrButSameDayDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrButSameDayStringForPrint2 \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            afterCurrButSameDayDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String expectedOutputFromFilledTasklist \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  1. [A][/] Assignment 3 (by: Thu 13 Feb 2020 18:00 | mod: CS2109)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  2. [A][X] Quiz 1 (by: Fri 01 Jan 2021 00:00 | mod: CS2173)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"15%\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  3. [E][X] midterms (at: MPSH1A | Thu 13 Feb 2020 18:00 - 20:30)\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static String expectedOutputFromUpcomingEvent \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static String expectedOutputFromIncompleteAssign \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  2. [A][X] Quiz 1 (by: Fri 01 Jan 2021 00:00 | mod: CS2173)\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"15%\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String expectedOutputFromListToday \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  1. [A][X] Assignment 1 (by: \" + currDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 1 Notes\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  2. [E][X] Event 1 (at: Classroom | \" + currDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + currDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 1 Notes\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String expectedOutputFromListWeek \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  1. [A][X] Assignment 1 (by: \" + currDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 1 Notes\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  2. [E][X] Event 1 (at: Classroom | \" + currDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + currDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 1 Notes\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  3. [A][X] Assignment 2 (by: \" + nextWeekDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 2 Notes\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  4. [E][X] Event 2 (at: Classroom | \" + nextWeekDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + nextWeekDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 2 Notes\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        emptyTasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment assignBeforeCurrDateTime \u003d new Assignment(\"Assignment 3\", \"CS2109\", beforeCurrDateTime1, \"-\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment assignAfterCurrDateTime \u003d new Assignment(\"Quiz 1\", \"CS2173\", afterCurrDateTime1, \"15%\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event eventBeforeCurrDateTime \u003d new Event(\"midterms\", \"MPSH1A\", beforeCurrDateTime1, beforeCurrDateTime2, \"-\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event eventAfterCurrDateTime \u003d new Event(\"Countdown\", \"TimeSquare\", afterCurrDateTime1,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                afterCurrDateTime2, \"new year new me\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event eventOnSameDayAfterCurrTime \u003d new Event(\"Bathe\", \"Toilet\", afterCurrButSameDayDateTime1,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                afterCurrButSameDayDateTime2, \"-\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(assignBeforeCurrDateTime);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(assignAfterCurrDateTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(eventBeforeCurrDateTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(eventAfterCurrDateTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(eventOnSameDayAfterCurrTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.markTaskAsDone(0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment currDateTimeAssignment \u003d new Assignment(\"Assignment 1\", \"CS2113\", currDateTime1,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                \"Assignment 1 Notes\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event currDateTimeEvent \u003d new Event(\"Event 1\", \"Classroom\", currDateTime1, currDateTime2, \"Event 1 Notes\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment nextWeekAssignment \u003d new Assignment(\"Assignment 2\", \"CS2113\", oneWeekDateTime1,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                \"Assignment 2 Notes\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event nextWeekEvent \u003d new Event(\"Event 2\", \"Classroom\", oneWeekDateTime1, oneWeekDateTime2, \"Event 2 Notes\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(currDateTimeAssignment);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(currDateTimeEvent);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(nextWeekAssignment);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(nextWeekEvent);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_emptyList_emptyListMsg() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(Messages.EMPTY_TASKLIST_MESSAGE,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(null).execute(emptyTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_filledList_incompleteAssignOnly() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromIncompleteAssign,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(\"incomplete assignments\").execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_filledList_allTaskListMsg() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromFilledTasklist,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(null).execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_filledList_upcomingEventsOnly() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromUpcomingEvent,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(\"upcoming events\").execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void printList_filledWeeklyList_todayTasks() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(expectedOutputFromListToday,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                new ListCommand(\"today\").execute(filledWeeklyTaskList,ui).feedbackToUser);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void printList_filledWeeklyList_weeklyTasks() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(expectedOutputFromListWeek,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                new ListCommand(\"week\").execute(filledWeeklyTaskList,ui).feedbackToUser);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 59,
      "Keith-JK": 1,
      "E0309556": 84,
      "jichngan": 39
    }
  },
  {
    "path": "src/test/java/command/MarkAsDoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class MarkAsDoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(testTaskList.getTask(0).getIsDone());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.markTaskAsDone(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 21,
      "Keith-JK": 2
    }
  },
  {
    "path": "src/test/java/command/SearchTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Initialize hard-coded test cases."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public SearchTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime1 \u003d LocalDateTime.parse(date1, dateTimeFormatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime2 \u003d LocalDateTime.parse(date2, dateTimeFormatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime3 \u003d LocalDateTime.parse(date3, dateTimeFormatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime4 \u003d LocalDateTime.parse(date4, dateTimeFormatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseTwo \u003d new Assignment(\"Assignment 5\", \"CS2102\", testDateTime1, \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseThree \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseSix \u003d new Event(\"mid\", \"MPSH1A\", testDateTime1, testDateTime2, \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteEmptyTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"all\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"assignment\").execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"event\").execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteInvalidSearchFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"abcd\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.INVALID_SEARCH_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteEvent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"midterms\", \"event\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.SEARCH_SUCCESS_MESSAGE, 1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"mid\", \"event\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.SEARCH_SUCCESS_MESSAGE, 2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteAssignment() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"assignment 3\", \"assignment\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.SEARCH_SUCCESS_MESSAGE,1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"assignment\", \"assignment\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.SEARCH_SUCCESS_MESSAGE,2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecute_emptyResults() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"event\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.SEARCH_SUCCESS_MESSAGE, 0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"assignment\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.SEARCH_SUCCESS_MESSAGE, 0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"all\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                String.format(Messages.SEARCH_SUCCESS_MESSAGE, 0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 95
    }
  },
  {
    "path": "src/test/java/seedu/atas/AtasTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "class AtasTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/atas/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Date Tests. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormat_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20 2359\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormatWithSpaces_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20       2359\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_invalidDateTime_throwDateTimeParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/02/20 1111\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"20/02/20 2500\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/O2/2O 1111\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_incorrectFormat_throwIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"22/02/20\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"1800\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Unknown Command Tests. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void testUnknownCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(\"foo 2\").execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.UNKNOWN_COMMAND_ERROR));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Assignment Command Tests. */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(AssignmentCommand.ASSIGNMENT_COMMAND_WORD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name m/cs2113T d/22/01/20 1800 c/comments\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                AssignmentCommand.ASSIGNMENT_COMMAND_WORD + \"  \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"m/   cs2113T  \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800 \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_missingParameters_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(AssignmentCommand.ASSIGNMENT_COMMAND_WORD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/ASS m/cs1010 d/30/02/20 1111\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.ASSIGN_INCORRECT_FORMAT_ERROR));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Event Command Tests. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(EventCommand.EVENT_COMMAND_WORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name l/somewhere ah d/22/01/20 1800 - 2030 c/comment\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.EVENT_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"l/   somewhere over the rainbow   \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800  -   2030   \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_missingComment_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(EventCommand.EVENT_COMMAND_WORD"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/EVE l/LOC d/30/02/20 1111 - 2222 c/\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.EVENT_INCORRECT_FORMAT_ERROR));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_startTimeAfterEndTime_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(EventCommand.EVENT_COMMAND_WORD"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/EVE l/LOC d/30/02/20 2222 - 1111 c/none\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.INCORRECT_START_END_TIME_ERROR));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Delete Command Tests. */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.DELETE_INSUFFICIENT_ARGS_ERROR));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.NUM_FORMAT_ERROR));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Done Command Tests. */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.DONE_INSUFFICIENT_ARGS_ERROR));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.NUM_FORMAT_ERROR));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Help Command Tests. */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseHelpCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(HelpCommand.HELP_COMMAND_WORD);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** List Command Tests. */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseListCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" today\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" week\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" incomplete assignments\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" upcoming events\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Exit Command Tests. */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseExitCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ExitCommand.EXIT_COMMAND_WORD);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 184,
      "Keith-JK": 24
    }
  },
  {
    "path": "src/test/java/seedu/atas/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetListSize() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 22
    }
  },
  {
    "path": "src/test/java/tasks/AssignmentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment newAssignment \u003d new Assignment(\"TP\", \"CS2113T\",  Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment nullAssignment \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetModule() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getModule(), \"CS2113T\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getModule(), null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getModule());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetDateAndTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getDateAndTime(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getDateAndTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetIsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullAssignment.getIsDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetComments() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getComments(), \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getComments());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getName(),\"TP\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[A][X] project meeting (by: Fri 20 Mar 2020 09:00 | mod: CS2113T)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator() + Messages.NEWLINE_INDENT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.toString(), printedString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 67
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    Event newEvent \u003d new Event(\"project meeting\", \"NUS SOC\", Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Parser.parseDate(\"20/03/20 1100\"), \"My Very Long Long Long Long Long Comment\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    Event nullEvent \u003d new Event(null,null,null, null,null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetLocation() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getLocation(), \"NUS SOC\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getLocation(), null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getLocation());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetDateAndTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getDateAndTime(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getDateAndTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void getEndDateAndTime_expectedUsage_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 1100\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(newEvent.getEndDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertNotEquals(newEvent.getDateAndTime(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertNull(nullEvent.getDateAndTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetIsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newEvent.getIsDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullEvent.getIsDone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newEvent.getIsDone());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetComments() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getComments(), \"My Very Long Long Long Long Long Comment\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getComments());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getName(),\"project meeting\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[E][X] project meeting (at: NUS SOC | Fri 20 Mar 2020 09:00 - 11:00)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + System.lineSeparator() + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.toString(), printedString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 14,
      "joelczk": 64,
      "Keith-JK": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/Assignment 3 m/CS2102 d/13/03/20 1800 c/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/Assignment 3 m/CS2102 d/13/03/20 1800 c/5%"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/OP1 m/CS2101 d/01/01/20 0000 c/15%"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/midterms l/MPSH1A d/13/03/20 1800 - 2030 c/20%"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/Countdown l/TimeSquare d/13/03/21 1800 - 2300 c/new year new me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "clear done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list upcoming events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list incomplete assignments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "search t/all n/OP1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/Countdown l/TimeSquare d/13/03/22 1800 - 2300 c/new year new me"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "clear all"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "joelczk": 18
    }
  }
]
