[
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Keith | [Github](https://github.com/Keith-JK) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Joel Chang | [Github](https://github.com/joelczk) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jeremy Lai | [Github](https://github.com/lwxymere) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ji Cheng | [Github](https://github.com/jichngan) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Qi Ren | [Github](https://github.com/e0309556) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "-": 4,
      "E0309556": 3,
      "jichngan": 1
    }
  },
  {
    "path": "src/main/java/command/AssignmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class AssignmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_COMMAND_WORD \u003d \"assignment\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String assignmentName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs an AssignmentCommand object with the parameters provided."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param assignmentName String containing name of Assignment"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param moduleName String containing name of module Assignment belongs to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param deadline LocalDateTime object containing the deadline of Assignment"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Assignment with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public AssignmentCommand(String assignmentName, String moduleName, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Creates new Assignment, adds to TaskList, print Ui messages."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Task newAssignment \u003d new Assignment(assignmentName, moduleName, deadline, comments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newAssignment);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newAssignment, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 15,
      "joelczk": 1,
      "Keith-JK": 28,
      "E0309556": 3
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommand  extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs the clear command to empty TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.NO_TASKS_MSG));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.clearList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.CLEAR_SUCCESS_MESSAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 25
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Executes the specific command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract CommandResult execute(TaskList taskList, Ui ui); //"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // todo: take TaskList, Ui, Storage as parameters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Obtain a range of numbers that is valid for usage on taskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList The interested list in TaskManager to find the range of values"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return A string with the range of valid numbers."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String getRangeOfValidIndex(TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        int maxTasks \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return String.format(Messages.RANGE_OF_VALID_TASK_INDEX_MSG, maxTasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lwxymere": 5,
      "joelczk": 1,
      "Keith-JK": 1,
      "E0309556": 17,
      "jichngan": 3
    }
  },
  {
    "path": "src/main/java/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Result from running the Command to be shown to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise the input to be shown to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param feedbackToUser String to be shown to user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Getter for the boolean value of isExit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return boolean isExit"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Returns a CommandResult object with boolean isExit set to true."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with modified isExit"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult setExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 19,
      "E0309556": 17
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DELETE_COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected int deleteIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs a DeleteCommand with the parameters supplied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param index index of task to be deleted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.deleteIndex \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task taskToBeDeleted \u003d taskList.getTask(deleteIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.DELETE_SUCCESS_MESSAGE, taskToBeDeleted.getName()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 17,
      "joelczk": 9,
      "Keith-JK": 3,
      "E0309556": 5
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DONE_COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected int doneIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs a DoneCommand with parameters supplied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param index index in the ArrayList to be marked done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.doneIndex \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task taskToBeMarkDone \u003d taskList.getTask(doneIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (taskToBeMarkDone.getIsDone()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                return new CommandResult(Messages.COMPLETED_TASK_ERROR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskList.markTaskAsDone(doneIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.DONE_SUCCESS_MESSAGE, taskToBeMarkDone.getName()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 18,
      "joelczk": 1,
      "Keith-JK": 11,
      "E0309556": 7
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventLocation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs EventCommand with the supplied parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventName String containing name of event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventLocation String containing location of event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime LocalDateTime containing date and time of event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Event with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public EventCommand(String eventName, String eventLocation, LocalDateTime dateTime, String comments) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Task newEvent \u003d new Event(eventName, eventLocation, dateTime, comments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newEvent, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 14,
      "joelczk": 1,
      "Keith-JK": 24,
      "E0309556": 2
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EXIT_COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Executes the Exit command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(Messages.EXIT_MESSAGE).setExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "Keith-JK": 19
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String HELP_COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints to user the help message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(Messages.HELP_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "Keith-JK": 19
    }
  },
  {
    "path": "src/main/java/command/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructor to deal with incorrect commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param description String of the wrong command input by user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public IncorrectCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(Messages.INCORRECT_COMMAND_ERROR, description));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 11,
      "joelczk": 5,
      "Keith-JK": 3,
      "E0309556": 3
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private final String listParam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String TODAY_COMMAND \u003d \"today\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String WEEK_COMMAND \u003d \"week\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String UPCOMING_EVENT_COMMAND \u003d \"upcoming events\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String INCOMPLETE_ASSIGN_COMMAND \u003d \"incomplete assignments\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for ListCommand Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param listParam String containing user input on type of listing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ListCommand(String listParam) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.listParam \u003d listParam;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        // to deal with null being passed as input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        switch (listParam \u003d\u003d null ? \"\" : listParam) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (TODAY_COMMAND):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(showListTasks(taskList.getTasksByDays(0)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (WEEK_COMMAND):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(showListTasks(taskList.getTasksByDays(7)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (UPCOMING_EVENT_COMMAND):"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(taskList.getUpcomingEventArray()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (INCOMPLETE_ASSIGN_COMMAND):"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(taskList.getIncompleteAssignArray()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(taskList.getTaskArray()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Formats String of tasks with standard task listing message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param taskList ArrayList object with tasks to be printed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Formatted string of tasks and printing message"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String showListTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            //If there are no tasks found within the provided taskList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return (Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String stringFromArrayList \u003d stringTaskList(taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (String.format(Messages.SHOW_TASKLIST_MESSAGE, System.lineSeparator(), stringFromArrayList));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Converts ArrayList object into string to be printed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param taskList ArrayList object with tasks to be printed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Formatted string of tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String stringTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        StringBuilder stringFromArrayList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            stringFromArrayList.append(String.format(\"%3d. %s\", i + 1, taskList.get(i).toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                stringFromArrayList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return stringFromArrayList.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 8,
      "joelczk": 1,
      "Keith-JK": 1,
      "E0309556": 38,
      "jichngan": 25
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Container for all default messages printed to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Generic Print Messages"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \" _______        _______        _______        _______ \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"|   _   |      |       |      |   _   |      |       |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"|  |_|  |      |_     _|      |  |_|  |      |  _____|\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"|       |        |   |        |       |      | |_____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"|       | ___    |   |   ___  |       | ___  |_____  |\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"|   _   ||   |   |   |  |   | |   _   ||   |  _____| |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + \"|__| |__||___|   |___|  |___| |__| |__||___| |_______|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DIVIDER \u003d \"_______________________________________________________________________\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Exiting A.T.A.S\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NEWLINE_INDENT \u003d \"     \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // Help Messages"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/yy HHmm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_FORMAT_HELP \u003d \"Add Event: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"event n/[EVENT NAME] l/[LOCATION] d/[dd/MM/yy HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_FORMAT_HELP \u003d \"Add Assignment: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"assignment n/[ASSIGNMENT NAME] m/[MODULE NAME] d/[dd/MM/yy HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DONE_FORMAT_HELP \u003d \"Mark Task as Done: done [TASK NUMBER]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DELETE_FORMAT_HELP \u003d \"Delete a Task: delete [TASK NUMBER]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_FORMAT_HELP \u003d \"List All Tasks: list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_TODAY_FORMAT_HELP \u003d \"List Today\u0027s Tasks: list today\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_WEEK_FORMAT_HELP \u003d \"List This Week\u0027s Tasks: list week\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_UPCOMING_EVENT_FORMAT_HELP \u003d \"List Upcoming Events: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"list upcoming events\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String LIST_INCOMPLETE_ASSIGN_FORMAT_HELP \u003d \"List Incomplete Assignments: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"list incomplete assignments\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_FORMAT_HELP \u003d \"Clear all tasks: clear\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String HELP_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            \"Following is the list of commands available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"1.  Help Format: help\" + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"2.  \" + ASSIGNMENT_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"3.  \" + EVENT_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"4.  \" + LIST_TODAY_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"5.  \" + LIST_WEEK_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"6.  \" + LIST_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"7.  \" + LIST_INCOMPLETE_ASSIGN_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"8.  \" + LIST_UPCOMING_EVENT_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + \"9.  \" + DONE_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + \"10.  \" + CLEAR_FORMAT_HELP + System.lineSeparator()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + \"12. \" + DELETE_FORMAT_HELP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Command Print Messages"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ADD_SUCCESS_MESSAGE \u003d \"Added task:\" + System.lineSeparator() + NEWLINE_INDENT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"%s\" + System.lineSeparator() + \"Now you have %d task%s in the list!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DELETE_SUCCESS_MESSAGE \u003d \"[%s] has been deleted!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DONE_SUCCESS_MESSAGE \u003d \"[%s] has been marked done!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String INCORRECT_COMMAND_ERROR \u003d \"Oh no. %s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EMPTY_TASKLIST_MESSAGE \u003d \"No tasks were found\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String SHOW_TASKLIST_MESSAGE \u003d \"Here are the relevant tasks:%s%s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_SUCCESS_MESSAGE \u003d \"All tasks have been deleted\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Error Messages"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String UNKNOWN_COMMAND_ERROR \u003d \"Unknown command entered\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ASSIGN_INCORRECT_FORMAT_ERROR \u003d \"Incorrect format for Assignment Command\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + ASSIGNMENT_FORMAT_HELP;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String EVENT_INCORRECT_FORMAT_ERROR \u003d \"Incorrect format for Event Command\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + EVENT_FORMAT_HELP;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String DATE_INCORRECT_OR_INVALID_ERROR \u003d \"Wrong date format or invalid date provided\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + DATE_FORMAT_HELP;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String NUM_FORMAT_ERROR \u003d \"Please provide an integer as the command parameter\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DELETE_INSUFFICIENT_ARGS_ERROR \u003d \"Insufficient arguments for Delete Command\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + DELETE_FORMAT_HELP;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String DONE_INSUFFICIENT_ARGS_ERROR \u003d \"Insufficient arguments for Done Command\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + DONE_FORMAT_HELP;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String INVALID_ID_ERROR \u003d \"Please provide a valid task number from %1$s\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NO_TASKS_MSG \u003d \"You have no tasks at the moment\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String RANGE_OF_VALID_TASK_INDEX_MSG \u003d \"1 to %1$s\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMPLETED_TASK_ERROR \u003d \"Task is already completed\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 23,
      "joelczk": 5,
      "Keith-JK": 24,
      "E0309556": 19,
      "jichngan": 10
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Formats the string that is return from the exception thrown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String with default error message for this error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return \"INVALID CMD ERROR: \" + super.getMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "E0309556": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Instantiate Ui and TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Starts Duke Process."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Run loop until exit command is received."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void runLoop() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult result \u003d new CommandResult(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        while (!result.isExit()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            result \u003d command.execute(taskList, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(result.feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            ui.showToUser(Messages.DIVIDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 13,
      "Keith-JK": 23,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add assignment command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern ASSIGNMENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+n/\\\\s*(?\u003cassignmentName\u003e[^/]+)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+m/\\\\s*(?\u003cmoduleName\u003e[^/]+)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e[^/]+)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add event command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern EVENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+n/\\\\s*(?\u003ceventName\u003e[^/]+)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+l/\\\\s*(?\u003clocation\u003e[^/]+)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e[^/]+)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a Command object depending on the command input by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param fullCommand line input by the user, which represents a command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Command depending on user input, with the appropriate arguments set"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Command parseCommand(String fullCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String commandType \u003d fullCommand.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case HelpCommand.HELP_COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case AssignmentCommand.ASSIGNMENT_COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareAssignmentCommand(fullCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case DeleteCommand.DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case ClearCommand.CLEAR_COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return prepareClearCommand(fullCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case DoneCommand.DONE_COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDoneCommand(fullCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case EventCommand.EVENT_COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareEventCommand(fullCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case ListCommand.LIST_COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareListCommand(fullCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        case ExitCommand.EXIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.UNKNOWN_COMMAND_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a LocalDateTime object based on an input String with the format INPUT_DATE_FORMAT."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param dateTimeString String representing a date with the format dd/MM/yy HHmm"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDateTime representing the date and time specified in dateTimeString"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static LocalDateTime parseDate(String dateTimeString)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        // handle issue where there are multiple spaces between the date and the time"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] dateAndTime \u003d dateTimeString.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String formattedDateTimeString \u003d dateAndTime[0] + \" \" + dateAndTime[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return LocalDateTime.parse(formattedDateTimeString, INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareAssignmentCommand(String fullCommand) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d ASSIGNMENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.ASSIGN_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            dateTime \u003d parseDate(matcher.group(\"dateTime\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String assignmentName \u003d matcher.group(\"assignmentName\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String moduleName \u003d matcher.group(\"moduleName\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d matcher.group(\"comments\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new AssignmentCommand(assignmentName, moduleName, dateTime, comments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int deleteIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            deleteIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DELETE_INSUFFICIENT_ARGS_ERROR);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DeleteCommand(deleteIndex);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int doneIndex;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            doneIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DONE_INSUFFICIENT_ARGS_ERROR);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DoneCommand(doneIndex);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareEventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d EVENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.EVENT_INCORRECT_FORMAT_ERROR);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            dateTime \u003d parseDate(matcher.group(\"dateTime\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String eventName \u003d matcher.group(\"eventName\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String location \u003d matcher.group(\"location\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d matcher.group(\"comments\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new EventCommand(eventName, location, dateTime, comments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            // check if list has no parameters"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new ListCommand(tokens[1]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareClearCommand(String fullCommand) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 139,
      "joelczk": 14,
      "Keith-JK": 4,
      "E0309556": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jichngan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for TaskList class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Instantiate a new ArrayList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for size of ArrayList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList size"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for ArrayList of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArray() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for the current Local Date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Formats Local Date into \"dd/MM/yyyy\" format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return LocalDate object of the formatted current Date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currentDateObj \u003d LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        DateTimeFormatter formattedDateObj \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String currentDate \u003d currentDateObj.format(formattedDateObj);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate formattedCurrDate \u003d LocalDate.parse(currentDate, formattedDateObj);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return formattedCurrDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter method for tasks depending of days from today."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param days Integer representing number of days from today"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList object containing all tasks from indicated days from today"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByDays(int days) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currDate \u003d getCurrentDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate daysIndicated \u003d currDate.plusDays(days);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            if (currDate.compareTo(taskDate) \u003c\u003d 0 \u0026\u0026 taskDate.compareTo(daysIndicated) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter method for tasks that are events and in the future."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList object containing all future events."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getUpcomingEventArray() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDate currDate \u003d getCurrentDate();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task instanceof Event \u0026\u0026 taskDate.compareTo(currDate) \u003e 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                eventList.add(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter method for tasks that are assignments and not marked done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList object containing all incomplete assignments"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getIncompleteAssignArray() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e assignList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task instanceof Assignment \u0026\u0026 !task.getIsDone()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                assignList.add(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return assignList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter method for Task with the provided index in TaskList."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param index index of Task to return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return Task object with corresponding index"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Task getTask(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds a task to TaskList."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param task task object to be added"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Set the Task corresponding to index specified as done."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param doneIndex index of Task to be marked done"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of size of current TaskList"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void markTaskAsDone(int doneIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        tasks.get(doneIndex).setDone();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Delete tasks according to the index specified by user."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param deleteIndex index of task to be deleted"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of the size of current Tasklist"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void deleteTask(int deleteIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.remove(deleteIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes all the tasks in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jichngan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 16,
      "Keith-JK": 21,
      "jichngan": 73,
      "E0309556": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a line divider."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints welcome messages."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.println(\"Hello from\\n\" + Messages.LOGO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a prompt to user and returns the next line of user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return String of user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        out.print(\"\u003e \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Prints all messages with a newline in between each message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param messages strings to be shown to the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void showToUser(String... messages) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            out.println(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "Keith-JK": 33,
      "E0309556": 16
    }
  },
  {
    "path": "src/main/java/tasks/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class Assignment extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_ICON \u003d \"A\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Assignment object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of Assignment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param module module for Assignment"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param deadline deadline of Assignment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments for Assignment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public Assignment(String name, String module, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + ASSIGNMENT_ICON + \"]\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + deadline.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | mod: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + module"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + Messages.NEWLINE_INDENT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 40,
      "joelczk": 19
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.lang.reflect.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_ICON \u003d \"E\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Event object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param location location of Event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param dateTime date and time of Event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments for the Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public Event(String name, String location, LocalDateTime dateTime, String comments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.dateAndTime \u003d dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return dateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return dateAndTime.toLocalTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + EVENT_ICON + \"]\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + location"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + dateAndTime.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + Messages.NEWLINE_INDENT"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 42,
      "joelczk": 19
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Task object representing a Event or Assignment object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of event or assignment"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments to the event or assignment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Task(String name, String comments) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDateTime getDateAndTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalTime getTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns symbol representing if task is completed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return return tick if task is completed, else return cross"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[/]\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[X]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return String.format(\"%s %s\", getStatusIcon(), name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 9,
      "joelczk": 44,
      "Keith-JK": 8
    }
  },
  {
    "path": "src/test/java/command/AssignmentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        AssignmentCommand testAssignmentCommand \u003d new AssignmentCommand("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"assignment\", \"CS2113T\", Parser.parseDate(\"20/03/20 0900\"), \"yes\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testAssignmentCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 5,
      "joelczk": 16
    }
  },
  {
    "path": "src/test/java/command/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Initialize hard-coded test cases for testing purposes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String dateOne \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String dateTwo \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTimeOne \u003d LocalDateTime.parse(dateOne, dateTimeFormatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTimeTwo \u003d LocalDateTime.parse(dateTwo, dateTimeFormatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTimeOne, \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseTwo \u003d new Assignment(\"OP1\", \"CS2101\", testDateTimeTwo, \"15%\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseThree \u003d new Assignment(null,null,null,null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTimeOne, \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTimeTwo, \"new year new me\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseSix \u003d new Event(null,null,null,null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testClear_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.clearList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(filledTaskList.getListSize(),0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testClear_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList.clearList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(emptyTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testClear_successMessage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand().execute(filledTaskList, ui).feedbackToUser, Messages.CLEAR_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testClear_failureMessage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand().execute(emptyTaskList, ui).feedbackToUser, Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 77
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testDelete_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testDelete_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.deleteTask(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 25,
      "Keith-JK": 2
    }
  },
  {
    "path": "src/test/java/command/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"meeting\", \"Singapore\", Parser.parseDate(\"20/03/20 0900\"), null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testEventCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 5,
      "joelczk": 16
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        CommandResult testResult \u003d Parser.parseCommand(ExitCommand.EXIT_COMMAND_WORD).execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult compareResult \u003d new CommandResult(Messages.EXIT_MESSAGE).setExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.getClass(), compareResult.getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.feedbackToUser, Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(testResult.isExit());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "Keith-JK": 22
    }
  },
  {
    "path": "src/test/java/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "//whatIsBeingTested_descriptionOfTestInputs_expectedOutcome"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static TaskList filledTasklist;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static TaskList emptyTasklist;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Assignment testCaseOne;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Assignment testCaseTwo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Event testCaseThree;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Event testCaseFour;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String expectedOutputFromFilledTasklist \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  1. [A][X] Assignment 3 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + Messages.NEWLINE_INDENT + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  2. [A][X] OP1 (by: Wed 01 Jan 2020 00:00 | mod: CS2101)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + Messages.NEWLINE_INDENT + \"15%\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  3. [E][X] midterms (at: MPSH1A | Fri 13 Mar 2020 18:00)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + Messages.NEWLINE_INDENT + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Wed 01 Jan 2020 00:00)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + Messages.NEWLINE_INDENT + \"new year new me\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        emptyTasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String dateOne \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String dateTwo \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDateTime testDateTimeOne \u003d LocalDateTime.parse(dateOne, dateTimeFormatter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDateTime testDateTimeTwo \u003d LocalDateTime.parse(dateTwo, dateTimeFormatter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTimeOne, \" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Assignment testCaseTwo \u003d new Assignment(\"OP1\", \"CS2101\", testDateTimeTwo, \"15%\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Event testCaseThree \u003d new Event(\"midterms\", \"MPSH1A\", testDateTimeOne, \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Event testCaseFour \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTimeTwo, \"new year new me\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(testCaseOne);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(testCaseThree);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(testCaseFour);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_emptyList_emptyListMsg() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(Messages.EMPTY_TASKLIST_MESSAGE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(null).execute(emptyTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_filledList_filledListMsg() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromFilledTasklist,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(null).execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 10,
      "E0309556": 70
    }
  },
  {
    "path": "src/test/java/command/MarkAsDoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class MarkAsDoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(testTaskList.getTask(0).getIsDone());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.markTaskAsDone(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 22,
      "Keith-JK": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Date Tests. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormat_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20 2359\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormatWithSpaces_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20       2359\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_invalidDateTime_throwDateTimeParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/02/20 1111\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"20/02/20 2500\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/O2/2O 1111\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_incorrectFormat_throwIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"22/02/20\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"1800\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Unknown Command Tests. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void testUnknownCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(\"foo 2\").execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.UNKNOWN_COMMAND_ERROR));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Assignment Command Tests. */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(AssignmentCommand.ASSIGNMENT_COMMAND_WORD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name m/cs2113T d/22/01/20 1800 c/comments\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                AssignmentCommand.ASSIGNMENT_COMMAND_WORD + \"  \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"m/   cs2113T  \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800 \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_missingParameters_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(AssignmentCommand.ASSIGNMENT_COMMAND_WORD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/ASS m/cs1010 d/30/02/20 1111\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.ASSIGN_INCORRECT_FORMAT_ERROR));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Event Command Tests. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(EventCommand.EVENT_COMMAND_WORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name l/somewhere ah d/22/01/20 1800 c/comment\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                EventCommand.EVENT_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"l/   somewhere over the rainbow   \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800  \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_missingParameters_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(EventCommand.EVENT_COMMAND_WORD + \" n/EVE l/LOC d/30/02/20 1111 c/\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.EVENT_INCORRECT_FORMAT_ERROR));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Delete Command Tests. */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.DELETE_INSUFFICIENT_ARGS_ERROR));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.DELETE_COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.NUM_FORMAT_ERROR));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Done Command Tests. */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.DONE_INSUFFICIENT_ARGS_ERROR));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.DONE_COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.NUM_FORMAT_ERROR));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Help Command Tests. */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseHelpCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(HelpCommand.HELP_COMMAND_WORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** List Command Tests. */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseListCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" today\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" week\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" incomplete assignments\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.LIST_COMMAND_WORD + \" upcoming events\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Exit Command Tests. */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseExitCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ExitCommand.EXIT_COMMAND_WORD);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 174,
      "Keith-JK": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetListSize() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 23
    }
  },
  {
    "path": "src/test/java/tasks/AssignmentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment newAssignment \u003d new Assignment(\"TP\", \"CS2113T\",  Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment nullAssignment \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetModule() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getModule(), \"CS2113T\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getModule(), null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getModule());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetDateAndTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getDateAndTime(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getDateAndTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetIsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullAssignment.getIsDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetComments() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getComments(), \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getComments());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getName(),\"TP\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[A][X] project meeting (by: Fri 20 Mar 2020 09:00 | mod: CS2113T)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator() + Messages.NEWLINE_INDENT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.toString(), printedString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 68
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Event newEvent \u003d new Event(\"project meeting\", \"NUS SOC\", Parser.parseDate(\"20/03/20 0900\"), \"My Very Long Long \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + \"Long Long Long Comment\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Event nullEvent \u003d new Event(null,null,null,null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetLocation() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getLocation(), \"NUS SOC\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getLocation(), null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getLocation());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetDateAndTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getDateAndTime(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getDateAndTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetIsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newEvent.getIsDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullEvent.getIsDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newEvent.getIsDone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetComments() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getComments(), \"My Very Long Long Long Long Long Comment\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getComments());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getName(),\"project meeting\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[E][X] project meeting (at: NUS SOC | Fri 20 Mar 2020 09:00)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator() + Messages.NEWLINE_INDENT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.toString(), printedString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 68
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1
    }
  }
]
