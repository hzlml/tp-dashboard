[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "group \u0027seedu.atas\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    mainClassName \u003d \"seedu.atas.Atas\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.atas.Atas\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    archiveBaseName \u003d \"atas\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    archiveVersion \u003d \"2.0.0\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 4,
      "-": 38,
      "E0309556": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Keith | [Github](https://github.com/Keith-JK) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Joel Chang | [Github](https://github.com/joelczk) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jeremy Lai | [Github](https://github.com/lwxymere) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ji Cheng | [Github](https://github.com/jichngan) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Qi Ren | [Github](https://github.com/e0309556) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "-": 4,
      "E0309556": 3,
      "jichngan": 1
    }
  },
  {
    "path": "src/main/java/command/AssignmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class AssignmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignment\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Add Assignment: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"assignment n/[ASSIGNMENT NAME] m/[MODULE NAME] d/[dd/MM/yy HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String assignmentName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs an AssignmentCommand object with the parameters provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param assignmentName String containing name of Assignment"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param moduleName String containing name of module Assignment belongs to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param deadline LocalDateTime object containing the deadline of Assignment"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Assignment with"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public AssignmentCommand(String assignmentName, String moduleName, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Creates new Assignment, adds to TaskList, print Ui messages."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Task newAssignment \u003d new Assignment(assignmentName, moduleName, deadline, comments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isRepeatTask(taskList, newAssignment)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.SAME_TASK_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newAssignment);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newAssignment, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 16,
      "joelczk": 1,
      "Keith-JK": 26,
      "E0309556": 9
    }
  },
  {
    "path": "src/main/java/command/CalendarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // ANSI text colour scheme"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLACK \u003d \"\\u001B[30m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RED \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_GREEN \u003d \"\\u001B[32m\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_YELLOW \u003d \"\\u001B[33m\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLUE \u003d \"\\u001B[34m\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_PURPLE \u003d \"\\u001B[35m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_CYAN \u003d \"\\u001B[36m\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_WHITE \u003d \"\\u001B[37m\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // ANSI background colour scheme"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLACK_BACKGROUND \u003d \"\\u001B[40m\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RED_BACKGROUND \u003d \"\\u001B[41m\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_GREEN_BACKGROUND \u003d \"\\u001B[42m\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_YELLOW_BACKGROUND \u003d \"\\u001B[43m\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLUE_BACKGROUND \u003d \"\\u001B[44m\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_PURPLE_BACKGROUND \u003d \"\\u001B[45m\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_CYAN_BACKGROUND \u003d \"\\u001B[46m\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_WHITE_BACKGROUND \u003d \"\\u001B[47m\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String STARTING_BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String PAD \u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // Calendar dimensions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MAX_CALENDAR_ROWS \u003d 30;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int CALENDAR_BOX_HEIGHT \u003d 6;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // sizing of each Calendar box"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MAX_CALENDAR_BOX_WIDTH \u003d 20;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DATE_PADDING_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int EMPTY_BOX_PADDING \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int CONTENT_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Get a Calendar view: calendar d/[dd/MM/YY]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CalendarCommand(LocalDate date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Executes the Calendar command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String calendarView \u003d buildMonthCalendar(date, taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(calendarView);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Build and return the calendar view in String format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime date provided to base calendar view on"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles tasks operations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return String object that contains the calendar view"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private String buildMonthCalendar(LocalDate dateTime, TaskList taskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calibrateCalendar(dateTime, calendar);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int year       \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int month      \u003d calendar.get(Calendar.MONTH); // Jan \u003d 0, dec \u003d 11"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assert month \u003d\u003d (dateTime.getMonthValue() - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int dayOfMonth \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assert dayOfMonth \u003d\u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int startingDayOfWeek \u003d calendar.get(Calendar.DAY_OF_WEEK); // get day of week {1 \u003d sunday, 7 \u003d saturday}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int weekOfYear \u003d calendar.get(Calendar.WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int weekOfMonth \u003d calendar.get(Calendar.WEEK_OF_MONTH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int daysInMonth \u003d calendar.getActualMaximum(Calendar.DAY_OF_MONTH); // maximum no. days in given month"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e monthlyTaskList \u003d getTasksByYearMonth(dateTime, taskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        StringBuilder calendarView \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarTitle(calendar, calendarView);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarLegend(calendarView);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarBody(startingDayOfWeek, daysInMonth, monthlyTaskList, calendarView);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return calendarView.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Sets the calendar to the given date."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime user specified date to base calendar on"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendar Calendar object that calendar view is based of on"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void calibrateCalendar(LocalDate dateTime, Calendar calendar) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int givenDay \u003d dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int givenMonth \u003d dateTime.getMonthValue();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        int givenYear \u003d dateTime.getYear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.YEAR, givenYear);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.MONTH, givenMonth - 1); // month starts from 0 - 11"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.DATE, givenDay);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        // set the day to the first day of given month"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Gets an ArrayList of Tasks that falls within the given date."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param dateTime dateTime object given by user"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles tasks operations"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return ArrayList of tasks that falls within given date"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByYearMonth(LocalDate dateTime, TaskList taskList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.from(dateTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate endOfMonth \u003d yearMonth.atEndOfMonth();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate startOfMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return taskList.getTasksByRange(startOfMonth, endOfMonth);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Formats and appends the calendar body to calendarView."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startingDayOfWeek the starting day of the first week of given month"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param daysInMonth maximum number of days in the given month"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param monthlyTaskList ArrayList of tasks that falls within the given month"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private void addCalendarBody(int startingDayOfWeek, int daysInMonth,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                                 ArrayList\u003cTask\u003e monthlyTaskList, StringBuilder calendarView) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int calendarRow \u003d 0; calendarRow \u003c\u003d MAX_CALENDAR_ROWS; calendarRow++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (calendarRow % CALENDAR_BOX_HEIGHT \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                addCalendarBorder(calendarView);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            // starting border for each calendar row"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addCalendarStartBorder(calendarView);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            for (int calendarBoxIndex \u003d 1; calendarBoxIndex \u003c\u003d DAYS_IN_WEEK; calendarBoxIndex++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                int currentDayRepresented \u003d Math.floorDiv(calendarRow, CALENDAR_BOX_HEIGHT)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        * DAYS_IN_WEEK + calendarBoxIndex - startingDayOfWeek + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                // print empty calendar box"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                if (currentDayRepresented \u003c\u003d 0 || currentDayRepresented \u003e daysInMonth) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    addEmptyCalendarBody(calendarView);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                // print date of calendar"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                if (calendarRow % CALENDAR_BOX_HEIGHT \u003d\u003d 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    addCalendarDate(calendarView, currentDayRepresented);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                boolean hasPrintedTask \u003d false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                for (Task task : monthlyTaskList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    if (task.getDate().getDayOfMonth() \u003d\u003d currentDayRepresented) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        hasPrintedTask \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        addTaskToCalendar(monthlyTaskList, calendarView, task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                if (!hasPrintedTask) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                    addEmptyCalendarBody(calendarView);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            addCalendarNewLine(calendarView);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarNewLine(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(System.lineSeparator());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends and formats Tasks to the calendarView."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param monthlyTaskList ArrayList of tasks that falls within the given month"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param task task that is being appended to calendarView"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addTaskToCalendar(ArrayList\u003cTask\u003e monthlyTaskList, StringBuilder calendarView, Task task) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int taskListSize \u003d monthlyTaskList.size();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String taskDetails \u003d task.getTime().format(Parser.PRINT_TIME_FORMAT) + task.getName();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (taskDetails.length() \u003e CONTENT_WIDTH) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskDetails \u003d taskDetails.substring(0, CONTENT_WIDTH);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_RED).append(taskDetails).append(ANSI_RESET);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_GREEN).append(taskDetails).append(ANSI_RESET);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        monthlyTaskList.remove(task);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assert monthlyTaskList.size() \u003d\u003d taskListSize - 1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(PAD.repeat(CONTENT_WIDTH - taskDetails.length())).append(BORDER);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a starting border to the Calendar."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarStartBorder(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(STARTING_BORDER);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends an empty calendar slot to the calendarView."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addEmptyCalendarBody(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(PAD.repeat(EMPTY_BOX_PADDING)).append(BORDER);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends and formats the date to add to calendarView."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param currentDayRepresented day of month to append to calendarView"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarDate(StringBuilder calendarView, int currentDayRepresented) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(PAD.repeat(DATE_PADDING_WIDTH)).append(ANSI_CYAN)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(currentDayRepresented).append(ANSI_RESET);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (currentDayRepresented \u003c 10) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(PAD + BORDER);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(BORDER);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a legend for the calendar."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarLegend(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String[] days \u003d {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarBorder(calendarView);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarStartBorder(calendarView);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int dayRepresented \u003d 0; dayRepresented \u003c DAYS_IN_WEEK; dayRepresented++) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(PAD.repeat(CONTENT_WIDTH - days[dayRepresented].length()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_CYAN).append(days[dayRepresented]).append(ANSI_RESET).append(BORDER);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        addCalendarNewLine(calendarView);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a title to the calendar."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendar Calendar object that calendar view is based of on"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarTitle(Calendar calendar, StringBuilder calendarView) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(ANSI_RED + \"Assignments are represented in red\" + ANSI_RESET)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(ANSI_GREEN + \"Events are represented in green\" + ANSI_RESET)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(ANSI_YELLOW).append(new SimpleDateFormat(\"MMMM YYYY\").format(calendar.getTime()))"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(ANSI_RESET).append(System.lineSeparator());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Appends a horizontal border for the calendarView."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param calendarView StringBuilder object that is used to format the calendar view"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addCalendarBorder(StringBuilder calendarView) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        calendarView.append(BORDER.repeat(MAX_CALENDAR_BOX_WIDTH * DAYS_IN_WEEK + 1))"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 1,
      "Keith-JK": 280,
      "E0309556": 2
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String CLEAR_ALL_COMMAND_USAGE \u003d \"- Clear All Tasks: clear all\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String CLEAR_DONE_COMMAND_USAGE \u003d \"- Clear All Completed Tasks: clear done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Clear commands that are available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + CLEAR_ALL_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + CLEAR_DONE_COMMAND_USAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static final String ALL_CLEAR_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearAllParam  \u003d \"all\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearDoneParam \u003d \"done\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected final String clearParam;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs the clear command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ClearCommand(String clearParam) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.clearParam \u003d clearParam;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        switch (clearParam \u003d\u003d null ? ALL_CLEAR_COMMAND : clearParam) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case (clearAllParam):"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return clearAll(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case (clearDoneParam):"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return clearDone(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    Parser.capitalize(COMMAND_WORD), COMMAND_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Clears all the tasks in the taskList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list storing all the tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return messages for user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult clearAll(TaskList taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.clearList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert taskList.getListSize() \u003d\u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.CLEAR_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Get all the index of tasks that have been completed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of index of completed tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ArrayList\u003cInteger\u003e getCompletedIndex(TaskList taskList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cInteger\u003e doneIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getIsDone()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                doneIndex.add(count);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return doneIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes all the completed tasks and displays user messages."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList list storing all the tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return user messages"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult clearDone(TaskList taskList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int originalTaskSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cInteger\u003e doneIndex \u003d getCompletedIndex(taskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else if (doneIndex.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_DONE_CLEAR_ERROR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskList.deleteAllDoneTask(doneIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert taskList.getListSize() \u003d\u003d originalTaskSize - doneIndex.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.CLEAR_DONE_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 79,
      "Keith-JK": 2,
      "E0309556": 12
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Executes the specific command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract CommandResult execute(TaskList taskList, Ui ui); //"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // todo: take TaskList, Ui, Storage as parameters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Obtain a range of numbers that is valid for usage on taskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList The interested list in TaskManager to find the range of values"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return A string with the range of valid numbers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String getRangeOfValidIndex(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        int maxTasks \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return String.format(Messages.RANGE_OF_VALID_TASK_INDEX_MSG, maxTasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Checks for duplicate task within tasklist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param tasklist TaskList to be checked against"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param addedTask new Task that needs to be checked"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return True if there already exists a task within tasklist. Otherwise, false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected Boolean isRepeatTask(TaskList tasklist, Task addedTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasklist.getTaskArray()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task.equals(addedTask)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 6,
      "joelczk": 1,
      "E0309556": 34,
      "jichngan": 1
    }
  },
  {
    "path": "src/main/java/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Result from running the Command to be shown to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise the input to be shown to user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param feedbackToUser String to be shown to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 17
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Delete a Task: delete [TASK NUMBER]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected int deleteIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs a DeleteCommand with the parameters supplied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param index index of task to be deleted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.deleteIndex \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task taskToBeDeleted \u003d taskList.getTask(deleteIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            taskList.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.DELETE_SUCCESS_MESSAGE, taskToBeDeleted.getName()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            assert deleteIndex \u003c\u003d 0 || deleteIndex \u003e taskList.getListSize() - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 17,
      "joelczk": 10,
      "Keith-JK": 1,
      "E0309556": 7
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Mark Task as Done: done [TASK NUMBER]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected int doneIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs a DoneCommand with parameters supplied."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param index index in the ArrayList to be marked done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.doneIndex \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task taskToBeMarkDone \u003d taskList.getTask(doneIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (taskToBeMarkDone.getIsDone()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                return new CommandResult(Messages.COMPLETED_TASK_ERROR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskList.markTaskAsDone(doneIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.DONE_SUCCESS_MESSAGE, taskToBeMarkDone.getName()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 19,
      "joelczk": 1,
      "Keith-JK": 9,
      "E0309556": 9
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jichngan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String ASSIGNMENT_COMMAND \u003d \"assignment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Edit Task: edit [TASK NUMBER]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //Regex for Assignment Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final Pattern ASSIGNMENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003cassignmentName\u003e[^/]+)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+m/\\\\s*(?\u003cmoduleName\u003e[^/]+)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    //Regex for Event Command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static final Pattern EVENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003ceventName\u003e[^/]+)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+l/\\\\s*(?\u003clocation\u003e[^/]+)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4}\\\\s*-\\\\s*\\\\d{4})\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    protected int editIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for EditCommand class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editIndex Integer of task index to be edited"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public EditCommand(int editIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Executes the edit command function."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Takes in a new input from the user and formats input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Replaces task from the tasklist at index specified by user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Ui object that interacts with user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return CommandResult object based on result"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.EDIT_PROMPT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.DIVIDER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String commandType \u003d userInput.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            case ASSIGNMENT_COMMAND:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                Task editedAssignment \u003d editAssignment(userInput, ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.editTask(editIndex, editedAssignment);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedAssignment));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            case EVENT_COMMAND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                Task editedEvent \u003d editEvent(userInput, ui);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.editTask(editIndex, editedEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(String.format(Messages.EDIT_SUCCESS_MESSAGE, editedEvent));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                return new CommandResult(Messages.UNKNOWN_COMMAND_ERROR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                    getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Creates an assignment object by formatting the string supplied by user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param userInput String supplied by user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Formats output to display error messages to user"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Assignment object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public Assignment editAssignment(String userInput, Ui ui) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        final Matcher matcher \u003d ASSIGNMENT_PARAMETERS_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            ui.showToUser(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    Parser.capitalize(AssignmentCommand.COMMAND_WORD), AssignmentCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            dateTime \u003d Parser.parseDate(matcher.group(\"dateTime\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String assignmentName \u003d Parser.capitalize(matcher.group(\"assignmentName\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String moduleName \u003d matcher.group(\"moduleName\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String comments \u003d Parser.capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new Assignment(assignmentName, moduleName, dateTime, comments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Creates an event object by formatting the string supplied by user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param userInput String supplied by user"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param ui Formats output to display error messages to user"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public Event editEvent(String userInput, Ui ui) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        final Matcher matcher \u003d EVENT_PARAMETERS_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            ui.showToUser(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    Parser.capitalize(EventCommand.COMMAND_WORD), EventCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime startDateTime \u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDateTime endDateTime \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String startEndDateTime \u003d matcher.group(\"dateTime\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String[] dateTimeTokens \u003d startEndDateTime.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            String[] timeTokens \u003d dateTimeTokens[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            startDateTime \u003d Parser.parseDate(dateTimeTokens[0] + \" \" + timeTokens[0].trim());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            endDateTime \u003d Parser.parseDate(dateTimeTokens[0] + \" \" + timeTokens[1].trim());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.START_END_DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        if (!endDateTime.isAfter(startDateTime)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            ui.showToUser(Messages.INCORRECT_START_END_TIME_ERROR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String eventName \u003d Parser.capitalize(matcher.group(\"eventName\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String location \u003d matcher.group(\"location\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String comments \u003d Parser.capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new Event(eventName, location, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jichngan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jichngan": 146,
      "E0309556": 5
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Add Event: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"event n/[EVENT NAME] l/[LOCATION] d/[dd/MM/yy HHmm - HHmm] c/[COMMENTS]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String eventLocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Constructs EventCommand with the supplied parameters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventName String containing name of event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param eventLocation String containing location of event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param startDateTime LocalDateTime containing the starting date and time of event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param endDateTime LocalDateTime containing the ending date and time of event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param comments String containing extra comments user might want to tag Event with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public EventCommand(String eventName, String eventLocation, LocalDateTime startDateTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        LocalDateTime endDateTime, String comments) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newEvent \u003d new Event(eventName, eventLocation, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isRepeatTask(taskList, newEvent)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.SAME_TASK_ERROR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int listSize \u003d taskList.getListSize();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new CommandResult(String.format(Messages.ADD_SUCCESS_MESSAGE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                newEvent, listSize, listSize \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 24,
      "joelczk": 1,
      "Keith-JK": 17,
      "E0309556": 8
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Exit ATAS: exit\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Executes the Exit command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CommandResult(Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Checks whether the program should terminate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return true if the program should exit, false otherwise"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 12,
      "Keith-JK": 17,
      "E0309556": 3
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Help Format: help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static int counter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Create HelpCommand object and initialize counter to 1."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        counter \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String convertIndexToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String indexToString \u003d String.format(\"%3d. \", counter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        counter +\u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return indexToString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String getAllCommandUsage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return \"Following is the list of commands available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + AssignmentCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + EventCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + ListCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + DoneCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                + convertIndexToString() + EditCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + DeleteCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + ClearCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + RepeatCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + SearchCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + convertIndexToString() + SearchdCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + CalendarCommand.COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + convertIndexToString() + ExitCommand.COMMAND_USAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints to user the help message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param taskList TaskList object that handles adding Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param ui       Ui object that interacts with user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return CommandResult object with acknowledgment message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(getAllCommandUsage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "joelczk": 1,
      "Keith-JK": 15,
      "E0309556": 32,
      "jichngan": 1
    }
  },
  {
    "path": "src/main/java/command/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructor to deal with incorrect commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param description String of the wrong command input by user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public IncorrectCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(Messages.INCORRECT_COMMAND_ERROR, description));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 13,
      "joelczk": 5,
      "Keith-JK": 1,
      "E0309556": 3
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String LIST_ALL_COMMAND_USAGE \u003d \"- List All Tasks: list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String LIST_TODAY_COMMAND_USAGE \u003d \"- List Today\u0027s Tasks: list today\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String LIST_WEEK_COMMAND_USAGE \u003d \"- List This Week\u0027s Tasks: list week\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String LIST_UPCOMING_EVENT_COMMAND_USAGE \u003d \"- List Upcoming Events: list upcoming events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String LIST_INCOMPLETE_ASSIGN_COMMAND_USAGE \u003d \"- List Incomplete Assignments: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"list incomplete assignments\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"List commands that are available:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_ALL_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_TODAY_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_WEEK_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_UPCOMING_EVENT_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + LIST_INCOMPLETE_ASSIGN_COMMAND_USAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private final String listParam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String ALL_TASK_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String TODAY_COMMAND \u003d \"today\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static final String WEEK_COMMAND \u003d \"week\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String UPCOMING_EVENT_COMMAND \u003d \"upcoming events\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String INCOMPLETE_ASSIGN_COMMAND \u003d \"incomplete assignments\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for ListCommand Class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param listParam String containing user input on type of listing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ListCommand(String listParam) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.listParam \u003d listParam;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e allTaskList \u003d taskList.getTaskArray();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        // to deal with null being passed as input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        switch (listParam \u003d\u003d null ? ALL_TASK_COMMAND : listParam) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (TODAY_COMMAND):"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTasksByDays(0)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (WEEK_COMMAND):"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTasksByDays(7)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (UPCOMING_EVENT_COMMAND):"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getUpcomingEventArray()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (INCOMPLETE_ASSIGN_COMMAND):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getIncompleteAssignArray()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case (ALL_TASK_COMMAND):"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(showListTasks(allTaskList, taskList.getTaskArray()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    Parser.capitalize(COMMAND_WORD), COMMAND_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Formats String of tasks with standard task listing message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param taskList ArrayList object with tasks to be printed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Formatted string of tasks and printing message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String showListTasks(ArrayList\u003cTask\u003e allTaskList, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            //If there are no tasks found within the provided taskList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return (Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String stringFromArrayList \u003d stringTaskList(allTaskList, taskList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (String.format(Messages.LIST_TASKLIST_MESSAGE, System.lineSeparator(), stringFromArrayList));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Converts ArrayList object into string to be printed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param allTaskList Use ArrayList object with all tasks added in it to obtain its original index."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param selectedTaskList ArrayList object with tasks to be printed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Formatted string of tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String stringTaskList(ArrayList\u003cTask\u003e allTaskList, ArrayList\u003cTask\u003e selectedTaskList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        StringBuilder stringFromArrayList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert selectedTaskList.size() \u003e 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert allTaskList.size() \u003e 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Task lastTask \u003d selectedTaskList.get(selectedTaskList.size() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert lastTask !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : selectedTaskList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            stringFromArrayList.append(String.format(\"%3d. %s\", allTaskList.indexOf(task) + 1, task.toString()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task.equals(lastTask)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            stringFromArrayList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return stringFromArrayList.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 8,
      "joelczk": 1,
      "E0309556": 69,
      "jichngan": 20
    }
  },
  {
    "path": "src/main/java/command/RepeatCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String DAILY_ICON \u003d \"d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String WEEKLY_ICON \u003d \"w\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String MONTHLY_ICON \u003d \"m\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String YEARLY_ICON \u003d \"y\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String DAILY_STRING \u003d \"day\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String WEEKLY_STRING \u003d \"week\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String MONTHLY_STRING \u003d \"month\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String YEARLY_STRING \u003d \"year\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String REPEAT_EVENT_COMMAND_USAGE \u003d \"- Make event recur: repeat id/[EVENT INDEX] \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"p/[NUM OF PERIOD][TYPE OF PERIOD]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String NO_REPEAT_EVENT_COMMAND_USAGE \u003d \"- Stop event recur: repeat id/[EVENT INDEX] p/0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"Repeat commands that are available: (Available Periods are: d, w, m, y)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + REPEAT_EVENT_COMMAND_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + Messages.NEWLINE_INDENT + NO_REPEAT_EVENT_COMMAND_USAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private int eventIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private int numOfPeriod;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String typeOfPeriod;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Construct a RepeatCommand class to initialize eventIndex, numOfPeriod and typeOfPeriod."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param eventIndex index of the event that is being changed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param numOfPeriod number of period before event repeats"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param typeOfPeriod type of period which event repeats - could be daily, weekly, monthly or yearly"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public RepeatCommand(int eventIndex, int numOfPeriod, String typeOfPeriod) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.numOfPeriod \u003d numOfPeriod;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.typeOfPeriod \u003d typeOfPeriod;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String iconToString(String type) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case(DAILY_ICON):"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return DAILY_STRING;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case(WEEKLY_ICON):"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return WEEKLY_STRING;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case(MONTHLY_ICON):"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return MONTHLY_STRING;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case(YEARLY_ICON):"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return YEARLY_STRING;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task task \u003d taskList.getTask(eventIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            //set to not repeat if numOfPeriod \u003d 0, ignoring typeOfPeriod"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (numOfPeriod \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                ((Event) task).setNoRepeat();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                return new CommandResult(String.format(Messages.STOP_REPEATING_SUCCESS_MESSAGE, task.getName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            //set to repeat otherwise"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                ((Event) task).setRepeat(numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                return new CommandResult(String.format(Messages.REPEATING_SUCCESS_MESSAGE, task.getName(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        numOfPeriod \u003d\u003d 1 ? \"\" : numOfPeriod + \" \", iconToString(typeOfPeriod),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        numOfPeriod \u003c\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.REPEAT_ASSIGN_ERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.INVALID_ID_ERROR, getRangeOfValidIndex(taskList)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 81
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Search for tasks: search t/[TASK TYPE] n/[TASK NAME]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String allTasks \u003d \"all\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String eventTasks \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String assignmentTasks \u003d \"assignment\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String searchParam;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public SearchCommand(String searchParam, String taskType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.searchParam \u003d searchParam.toLowerCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an arrayList of all the tasks that matches the search query."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList object containing all the tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return arrayList of all tasks that match the search query"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAllTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskArray();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all event objects that matches the search query."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList object containing all the tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all event objects that matches the search query"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryEvents(TaskList taskList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e events \u003d taskList.getEventsArray();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert events.size() \u003d\u003d taskList.getEventsArray().size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task event: events) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (event.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all assignments objects that matches the search query."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList objects containing all assignment tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all assignment object that matches the search query"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAssignments(TaskList taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e assignments \u003d taskList.getAssignmentsArray();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert assignments.size() \u003d\u003d taskList.getAssignmentsArray().size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task assignment: assignments) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (assignment.getName().toLowerCase().contains(searchParam)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(assignment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns list of search queries."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList containing the results of search query"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return list of search queries"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String searchList(ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert results.size() \u003e 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int position \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        StringBuilder searchString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: results) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            searchString.append(String.format(\"%3d.%s\", position, task.toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            position++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns String format of search queries."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList of the results of search queries."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return String format of search queries"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String resultsList(ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return (Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return (searchList(results));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case allTasks:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e results \u003d getSearchQueryAllTasks(taskList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(results));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case eventTasks:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e eventResults \u003d getSearchQueryEvents(taskList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(eventResults));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case assignmentTasks:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e assignmentResults \u003d getSearchQueryAssignments(taskList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(assignmentResults));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    Parser.capitalize(COMMAND_WORD), COMMAND_USAGE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 118,
      "E0309556": 10
    }
  },
  {
    "path": "src/main/java/command/SearchdCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchdCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchd\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Search for tasks according to date: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + \"search t/[TASK TYPE] n/[TASK NAME] d/[DD/MM/YY]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String allTasks \u003d \"all\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String eventTasks \u003d \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected static final String assignmentTasks \u003d \"assignment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String searchParam;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Constructs a Searchd command with the parameters supplied."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskType types of tasks user is searching for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param searchParam query that user wants to find"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param date date that user wants to look for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public SearchdCommand(String taskType, String searchParam, LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.searchParam \u003d searchParam.toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an arrayList of all the tasks that matches the search query."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList object containing all the tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return arrayList of all tasks that match the search query"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAllTasks(TaskList taskList, LocalDate date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskArray();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task.getName().toLowerCase().contains(searchParam) \u0026\u0026 task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all event objects that matches the search query."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList object containing all the tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all event objects that matches the search query"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryEvents(TaskList taskList, LocalDate date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e events \u003d taskList.getEventsArray();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert events.size() \u003d\u003d taskList.getEventsArray().size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task event: events) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (event.getName().toLowerCase().contains(searchParam) \u0026\u0026 event.getDate().equals(date)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns an ArrayList of all assignments objects that matches the search query."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param taskList taskList objects containing all assignment tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList of all assignment object that matches the search query"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private ArrayList\u003cTask\u003e getSearchQueryAssignments(TaskList taskList, LocalDate date) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e assignments \u003d taskList.getAssignmentsArray();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert assignments.size() \u003d\u003d taskList.getAssignmentsArray().size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task assignment: assignments) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (assignment.getName().toLowerCase().contains(searchParam) \u0026\u0026 assignment.getDate().equals(date)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                results.add(assignment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns list of search queries."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList containing the results of search query"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return list of search queries"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String searchList(ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert results.size() \u003e 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int position \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        StringBuilder searchString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: results) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            searchString.append(String.format(\"%3d.%s\", position, task.toString()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            position++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns String format of search queries."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param results ArrayList of the results of search queries."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return String format of search queries"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String resultsList(ArrayList\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return (Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return (searchList(results));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case allTasks:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e results \u003d getSearchQueryAllTasks(taskList, date);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(results));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case eventTasks:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e eventResults \u003d getSearchQueryEvents(taskList, date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(eventResults));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case assignmentTasks:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            ArrayList\u003cTask\u003e assignmentResults \u003d getSearchQueryAssignments(taskList, date);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(resultsList(assignmentResults));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new CommandResult(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    Parser.capitalize(COMMAND_WORD), COMMAND_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 138
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Container for all default messages printed to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Start up and Exit Print Messages"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \" _______        _______        _______        _______ \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|   _   |      |       |      |   _   |      |       |\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|  |_|  |      |_     _|      |  |_|  |      |  _____|\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|       |        |   |        |       |      | |_____ \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|       | ___    |   |   ___  |       | ___  |_____  |\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|   _   ||   |   |   |  |   | |   _   ||   |  _____| |\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + \"|__| |__||___|   |___|  |___| |__| |__||___| |_______|\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                    + System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Exiting A.T.A.S\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Common Print Messages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DIVIDER \u003d \"_______________________________________________________________________\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NEWLINE_INDENT \u003d \"     \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String COMMENTS_INDENT \u003d \"            notes: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String REPEAT_EVENT_WITH_COMMENTS_INDENT \u003d \"      [%s]  notes: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String PROMPT_FOR_USER_INPUT \u003d \"\u003e \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    // Help Print Messages"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/yy HHmm\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String START_END_DATE_FORMAT_HELP \u003d \"Date Format: dd/MM/yy HHmm - HHmm\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Command Success Messages"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ADD_SUCCESS_MESSAGE \u003d \"Added task:\" + System.lineSeparator() + NEWLINE_INDENT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"%s\" + System.lineSeparator() + \"Now you have %d task%s in the list!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EMPTY_TASKLIST_MESSAGE \u003d \"No tasks were found\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NO_TODAY_TASKS_MESSAGE \u003d \"You have no tasks for today!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String LIST_TODAY_TASKS_MESSAGE \u003d \"Here are the tasks you have for today\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String LIST_TASKLIST_MESSAGE \u003d \"Here are the relevant tasks:%s%s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DONE_SUCCESS_MESSAGE \u003d \"[%s] has been marked done!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DELETE_SUCCESS_MESSAGE \u003d \"[%s] has been deleted!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_SUCCESS_MESSAGE \u003d \"All tasks have been deleted\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String CLEAR_DONE_SUCCESS_MESSAGE \u003d \"All completed tasks have been removed\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String SEARCH_SUCCESS_MESSAGE \u003d \"Here are the search results:\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String EDIT_SUCCESS_MESSAGE \u003d \"Task edited successfully:\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + NEWLINE_INDENT + \"%s.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String REPEATING_SUCCESS_MESSAGE \u003d \"[%s] will repeat every %s%s%s.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String STOP_REPEATING_SUCCESS_MESSAGE \u003d \"[%s] will no longer repeat.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String EDIT_PROMPT \u003d \"Please edit your chosen task.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Common Error Messages"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String INCORRECT_COMMAND_ERROR \u003d \"Oh no. %s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String UNKNOWN_COMMAND_ERROR \u003d \"Unknown command entered\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String DATE_INCORRECT_OR_INVALID_ERROR \u003d \"Wrong date format or invalid date provided\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            + System.lineSeparator() + DATE_FORMAT_HELP;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String START_END_DATE_INCORRECT_OR_INVALID_ERROR \u003d \"Wrong date format or invalid date provided\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator() + START_END_DATE_FORMAT_HELP;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String NUM_FORMAT_ERROR \u003d \"Please provide an integer as the command parameter\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String INVALID_ID_ERROR \u003d \"Please provide a valid task number from %1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String RANGE_OF_VALID_TASK_INDEX_MSG \u003d \"1 to %1$s\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    //Error message when fail Parser pattern checking"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String INCORRECT_FORMAT_ERROR \u003d \"Incorrect format for %s Command\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + \"%s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    //Error message when checking of arguments"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String INCORRECT_ARGUMENT_ERROR \u003d \"Invalid arguments for %s Command\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + \"%s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    // Unique Error Messages"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String NO_TASKS_MSG \u003d \"You have no tasks at the moment\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String COMPLETED_TASK_ERROR \u003d \"Task is already completed\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String SAME_TASK_ERROR \u003d \"Please use a different name. Task already exists in list\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EMPTY_DONE_CLEAR_ERROR \u003d \"There are no completed tasks at the moment\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String REPEAT_ASSIGN_ERROR \u003d \"Please choose an event.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    //Saving Error Messages"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String INCORRECT_START_END_TIME_ERROR \u003d \"The end time should come after the start time\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String INCORRECT_STORAGE_FORMAT_ERROR \u003d \"The local save file is of an unknown format. \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"Exit now using \u003cCtrl C\u003e to manually fix the save file, \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"or the save file will be overwritten with the new session data\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String NO_SAVE_FILE_MESSAGE \u003d \"No existing save file found. A new save file will be created\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String SAVE_FAILED_MESSAGE \u003d \"Oh no. Something went wrong while saving, please try again later\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final String EMPTY_SEARCH_RESULTS_ERROR \u003d \"There are no matching tasks for the search query\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 29,
      "joelczk": 18,
      "Keith-JK": 3,
      "E0309556": 36,
      "jichngan": 1
    }
  },
  {
    "path": "src/main/java/exceptions/AtasException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class AtasException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public AtasException(String errorMsg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Formats the string that is return from the exception thrown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String with default error message for this error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"ERROR: \" + super.getMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "jichngan": 2,
      "E0309556": 11
    }
  },
  {
    "path": "src/main/java/seedu/atas/Atas.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Atas {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Instantiate Ui and TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Atas() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            this.taskList \u003d storage.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            updateEventDate(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (AtasException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(e.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(Messages.NO_SAVE_FILE_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Starts Atas Process."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        showTodayTasksIfAny();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Run loop until exit command is received."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void runLoop() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        while (!ExitCommand.isExit()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            CommandResult result \u003d command.execute(taskList, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(result.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            trySaveTaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            ui.showToUser(Messages.DIVIDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void trySaveTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            ui.showToUser(Messages.SAVE_FAILED_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void updateEventDate(TaskList taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                ((Event) task).updateDateAndTime();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private void showTodayTasksIfAny() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        ArrayList\u003cTask\u003e todayTasks \u003d taskList.getTasksByDays(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String todayTasksString \u003d new ListCommand(null).showListTasks(taskList.getTaskArray(), todayTasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        // edit result to show a message more suited for a welcome screen"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (todayTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            todayTasksString \u003d Messages.NO_TODAY_TASKS_MESSAGE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            todayTasksString \u003d todayTasksString.substring(todayTasksString.indexOf(System.lineSeparator()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            todayTasksString \u003d Messages.LIST_TODAY_TASKS_MESSAGE + todayTasksString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        ui.showToUser(todayTasksString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Main entry-point for the seedu.atas.Atas application."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        new Atas().run();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 54,
      "joelczk": 1,
      "Keith-JK": 18,
      "-": 5,
      "E0309556": 16,
      "jichngan": 2
    }
  },
  {
    "path": "src/main/java/seedu/atas/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.IncorrectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import command.SearchdCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.CalendarCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final DateTimeFormatter PRINT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH\u0027:\u0027mm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_ONLY_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add assignment command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern ASSIGNMENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+n/\\\\s*(?\u003cassignmentName\u003e[^/]+)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+m/\\\\s*(?\u003cmoduleName\u003e[^/]+)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4})\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    // regex for an add event command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final Pattern EVENT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            \"(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+n/\\\\s*(?\u003ceventName\u003e[^/]+)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+l/\\\\s*(?\u003clocation\u003e[^/]+)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2}\\\\s+\\\\d{4}\\\\s*-\\\\s*\\\\d{4})\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"\\\\s+c/\\\\s*(?\u003ccomments\u003e.+)$\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //regex for search command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final Pattern SEARCH_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            \"(?\u003csearch\u003e[^/]+)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"\\\\s+t/\\\\s*(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003cname\u003e[^/]+)\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    //regex for Searchd command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final Pattern SEARCHD_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            \"(?\u003csearch\u003e[^/]+)\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"\\\\s+t/\\\\s*(?\u003ctaskType\u003e[^/]+)\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"\\\\s+n/\\\\s*(?\u003ctaskName\u003e[^/]+)\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdateTime\u003e\\\\d{2}/\\\\d{2}/\\\\d{2})\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    //regex for repeat command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final Pattern REPEAT_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"(?\u003crepeat\u003e[^/]+)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"\\\\s+id/\\\\s*(?\u003ceventIndex\u003e\\\\d+)\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"\\\\s+p/\\\\s*(?\u003cnumOfPeriod\u003e\\\\d+)\" + \"(?\u003ctypeOfPeriod\u003e[dwmy])?\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    //regex for calendar command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final Pattern CALENDAR_PARAMETERS_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            \"(?\u003ccalendar\u003e[^/]+)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"\\\\s+d/\\\\s*(?\u003cdate\u003e\\\\d{2}/\\\\d{2}/\\\\d{2})\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a Command object depending on the command input by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param fullCommand line input by the user, which represents a command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Command depending on user input, with the appropriate arguments set"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Command parseCommand(String fullCommand) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String commandType \u003d fullCommand.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return prepareHelpCommand(fullCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case AssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareAssignmentCommand(fullCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return prepareClearCommand(fullCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareDoneCommand(fullCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareEventCommand(fullCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return prepareListCommand(fullCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return prepareSearchCommand(fullCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        case SearchdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return prepareSearchdCommand(fullCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return prepareEditCommand(fullCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case RepeatCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return prepareRepeatCommand(fullCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return prepareCalendarCommand(fullCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return prepareExitCommand(fullCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.UNKNOWN_COMMAND_ERROR);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Returns a LocalDateTime object based on an input String with the format INPUT_DATE_FORMAT."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param dateTimeString String representing a date with the format dd/MM/yy HHmm"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDateTime representing the date and time specified in dateTimeString"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException    if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if dateTimeString does not follow INPUT_DATE_FORMAT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static LocalDateTime parseDate(String dateTimeString)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        // handle issue where there are multiple spaces between the date and the time"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] dateAndTime \u003d dateTimeString.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String formattedDateTimeString \u003d dateAndTime[0] + \" \" + dateAndTime[1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return LocalDateTime.parse(formattedDateTimeString, INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareAssignmentCommand(String fullCommand) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d ASSIGNMENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(AssignmentCommand.COMMAND_WORD), AssignmentCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            dateTime \u003d parseDate(matcher.group(\"dateTime\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String assignmentName \u003d capitalize(matcher.group(\"assignmentName\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String moduleName \u003d matcher.group(\"moduleName\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String comments \u003d capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new AssignmentCommand(assignmentName, moduleName, dateTime, comments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareSearchCommand(String fullCommand) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        final Matcher matcher \u003d SEARCH_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(SearchCommand.COMMAND_WORD), SearchCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskType \u003d matcher.group(\"taskType\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskName \u003d matcher.group(\"name\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return new SearchCommand(taskName, taskType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareSearchdCommand(String fullCommand) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        final Matcher matcher \u003d SEARCHD_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                    capitalize(SearchdCommand.COMMAND_WORD), SearchdCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskType \u003d matcher.group(\"taskType\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String taskName \u003d matcher.group(\"taskName\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String stringDate \u003d matcher.group(\"dateTime\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            date \u003d LocalDate.parse(stringDate, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new SearchdCommand(taskType, taskName, date);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new IncorrectCommand(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 1 || tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int deleteIndex;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            deleteIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(DeleteCommand.COMMAND_WORD), DeleteCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DeleteCommand(deleteIndex);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareDoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 1 || tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        int doneIndex;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            doneIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(DoneCommand.COMMAND_WORD), DoneCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new DoneCommand(doneIndex);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareEventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        final Matcher matcher \u003d EVENT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    Parser.capitalize(EventCommand.COMMAND_WORD), EventCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String startEndDateTime \u003d matcher.group(\"dateTime\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String[] dateTimeTokens \u003d startEndDateTime.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String[] timeTokens \u003d dateTimeTokens[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            startDateTime \u003d parseDate(dateTimeTokens[0] + \" \" + timeTokens[0].trim());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            endDateTime \u003d parseDate(dateTimeTokens[0] + \" \" + timeTokens[1].trim());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.START_END_DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (!endDateTime.isAfter(startDateTime)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new IncorrectCommand(Messages.INCORRECT_START_END_TIME_ERROR);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String eventName \u003d capitalize(matcher.group(\"eventName\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String location \u003d matcher.group(\"location\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String comments \u003d capitalize(matcher.group(\"comments\"));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return new EventCommand(eventName, location, startDateTime, endDateTime, comments);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static Command prepareListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            // check if list has no parameters"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new ListCommand(tokens[1].trim());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Command prepareClearCommand(String fullCommand) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String[] tokens \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return new ClearCommand(null);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tokens.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return new ClearCommand(tokens[1]);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareExitCommand(String fullCommand) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert fullCommand.trim().equals(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (fullCommand.equals(ExitCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(ExitCommand.COMMAND_WORD), ExitCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareHelpCommand(String fullCommand) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert fullCommand.trim().equals(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (fullCommand.equals(HelpCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(HelpCommand.COMMAND_WORD), HelpCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static Command prepareEditCommand(String fullCommand) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String[] tokens \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        int editIndex;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            editIndex \u003d Integer.parseInt(tokens[1].trim()) - 1;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(DoneCommand.COMMAND_WORD), DoneCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return new EditCommand(editIndex);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Command prepareRepeatCommand(String fullCommand) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        final Matcher matcher \u003d REPEAT_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(RepeatCommand.COMMAND_WORD), RepeatCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(matcher.group(\"eventIndex\")) - 1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            int numOfPeriod \u003d Integer.parseInt(matcher.group(\"numOfPeriod\"));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String typeOfPeriod \u003d matcher.group(\"typeOfPeriod\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (numOfPeriod !\u003d 0 \u0026\u0026 typeOfPeriod \u003d\u003d null) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        capitalize(RepeatCommand.COMMAND_WORD), RepeatCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new RepeatCommand(eventIndex, numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            //Error will be caught by Matcher from the regex above"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(Messages.NUM_FORMAT_ERROR);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Command prepareCalendarCommand(String fullCommand) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final Matcher matcher \u003d CALENDAR_PARAMETERS_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    capitalize(CalendarCommand.COMMAND_WORD), CalendarCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            date \u003d LocalDate.parse(matcher.group(\"date\").trim(), INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return new IncorrectCommand(Messages.DATE_INCORRECT_OR_INVALID_ERROR);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return new CalendarCommand(date);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Capitalizes the first alphabet of a string."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param str String to be capitalized"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return Capitalized string"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static String capitalize(String str) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (str \u003d\u003d null || str.isEmpty()) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            return str;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return str.substring(0, 1).toUpperCase() + str.substring(1);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 139,
      "joelczk": 54,
      "Keith-JK": 42,
      "E0309556": 90,
      "jichngan": 20
    }
  },
  {
    "path": "src/main/java/seedu/atas/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import exceptions.AtasException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected static final String DEFAULT_FILEPATH \u003d \"./atasData.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected final String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Reads data from the local save file specified by filePath, and returns the corresponding TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return TaskList containing all tasks in the save file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws AtasException if the save file format is incorrect"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IOException if no save file is found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public TaskList load() throws AtasException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Scanner scanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            String encodedTask \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Task task \u003d decodeTask(encodedTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            assert task !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private Task decodeTask(String encodedTask) throws AtasException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String taskType \u003d encodedTask.substring(0, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            case Assignment.ASSIGNMENT_ICON:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                task \u003d Assignment.decodeTask(encodedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            case Event.EVENT_ICON:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                task \u003d Event.decodeTask(encodedTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                throw new AtasException(Messages.INCORRECT_STORAGE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throw new AtasException(Messages.INCORRECT_STORAGE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Saves the taskList\u0027s current state into a local file located at filePath."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param taskList TaskList to be stored"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IOException if an IO error occurs in FileWriter methods"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        for (Task task : taskList.getTaskArray()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            sj.add(task.encodeTask());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        fileWriter.write(sj.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 81
    }
  },
  {
    "path": "src/main/java/seedu/atas/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Default constructor for TaskList class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Instantiate a new ArrayList object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for size of ArrayList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList size"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for ArrayList of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList of tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArray() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter for the current Local Date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Formats Local Date into \"dd/MM/yyyy\" format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return LocalDate object of the formatted current Date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currentDateObj \u003d LocalDate.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        DateTimeFormatter formattedDateObj \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        String currentDate \u003d currentDateObj.format(formattedDateObj);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate formattedCurrDate \u003d LocalDate.parse(currentDate, formattedDateObj);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return formattedCurrDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter method for tasks depending of days from today."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param days Integer representing number of days from today"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @return ArrayList object containing all tasks from indicated days from today"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByDays(int days) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert days \u003e\u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate currDate \u003d getCurrentDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        LocalDate daysIndicated \u003d currDate.plusDays(days);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            assert taskList.size() \u003c\u003d tasks.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            if (currDate.compareTo(taskDate) \u003c\u003d 0 \u0026\u0026 taskDate.compareTo(daysIndicated) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter method for tasks that are events and in the future."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList object containing all future events."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getUpcomingEventArray() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDateTime currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            LocalDateTime taskDateTime \u003d task.getDateAndTime();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task instanceof Event \u0026\u0026 taskDateTime.compareTo(currDateTime) \u003e 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                eventList.add(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter method for tasks that are assignments and not marked done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList object containing all incomplete assignments"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getIncompleteAssignArray() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e assignList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (task instanceof Assignment \u0026\u0026 !task.getIsDone()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                assignList.add(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return assignList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Getter for all events tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList object containing all events"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ArrayList\u003cTask\u003e getEventsArray() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                eventList.add(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Getter method for Task with the provided index in TaskList."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param index index of Task to return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return Task object with corresponding index"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Task getTask(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Getter for all assignment tasks."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return ArrayList object containing all assignments"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ArrayList\u003cTask\u003e getAssignmentsArray() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ArrayList\u003cTask\u003e assignmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                assignmentList.add(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return assignmentList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Adds a task to TaskList."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param task task object to be added"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Set the Task corresponding to index specified as done."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param doneIndex index of Task to be marked done"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of size of current TaskList"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void markTaskAsDone(int doneIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        tasks.get(doneIndex).setDone();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.get(doneIndex).getIsDone() \u003d\u003d true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Delete tasks according to the index specified by user."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param deleteIndex index of task to be deleted"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @throws IndexOutOfBoundsException throws when index is out of range of the size of current Tasklist"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void deleteTask(int deleteIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.remove(deleteIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.size() \u003d\u003d size - 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Edits task according to the index specified by user."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Edited task replaces the index of the old task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editIndex Integer of index of task to be edited"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @param editedTask Edited task object to be replaced in ArrayList"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * @throws IndexOutOfBoundsException Thrown when index is out of range of the current TaskList"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editTask(int editIndex, Task editedTask) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        tasks.set(editIndex, editedTask);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Deletes all the tasks in the list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assert tasks.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Deletes the all tasks specified by doneIndex."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param doneIndex ArrayList of indexes to be removed"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void deleteAllDoneTask(ArrayList\u003cInteger\u003e doneIndex) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        doneIndex.sort(Comparator.reverseOrder());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int index : doneIndex) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            deleteTask(index);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Getter for tasks that falls within the provided time period."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param startOfRange LocalDate representing start of time period"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @param endOfRange LocalDate representing end of time period"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return ArrayList of tasks that falls withing time period"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksByRange(LocalDate startOfRange, LocalDate endOfRange) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            assert taskArrayList.size() \u003c\u003d tasks.size();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            if (startOfRange.compareTo(taskDate) \u003c\u003d 0 \u0026\u0026 endOfRange.compareTo(taskDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                taskArrayList.add(task);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return taskArrayList;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jichngan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 48,
      "Keith-JK": 50,
      "jichngan": 85,
      "E0309556": 34
    }
  },
  {
    "path": "src/main/java/seedu/atas/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a line divider."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints welcome messages."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        out.println(Messages.LOGO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Prints a prompt to user and returns the next line of user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * @return String of user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        out.print(Messages.PROMPT_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Prints all messages with a newline in between each message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param messages strings to be shown to the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void showToUser(String... messages) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            out.println(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "Keith-JK": 32,
      "E0309556": 15
    }
  },
  {
    "path": "src/main/java/tasks/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class Assignment extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String ASSIGNMENT_ICON \u003d \"A\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Assignment object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of Assignment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param module module for Assignment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param deadline deadline of Assignment"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments for Assignment"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public Assignment(String name, String module, LocalDateTime deadline, String comments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return deadline.toLocalTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + ASSIGNMENT_ICON + \"]\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + deadline.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | mod: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + module"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public boolean equals(Object addedTask) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return super.equals(addedTask)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                \u0026\u0026 this.getModule().equals(((Assignment) addedTask).getModule());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(ASSIGNMENT_ICON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(module);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(deadline.format(Parser.INPUT_DATE_FORMAT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(comments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Converts an encoded Assignment back to an Assignment object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param encodedTask Assignment encoded using encodedTask()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Assignment with the correct attributes set"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if encoded deadline cannot be parsed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if encodedTask is not a String returned by calling encodeTask() on"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *              an Assignment"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Assignment decodeTask(String encodedTask)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\"\\\\\" + STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens[0].equals(ASSIGNMENT_ICON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String name \u003d tokens[2];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String module \u003d tokens[3];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime deadline \u003d Parser.parseDate(tokens[4]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String comments \u003d tokens[5];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens.length \u003d\u003d 6;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment assignment \u003d new Assignment(name, module, deadline, comments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            assignment.setDone();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return assignment;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 78,
      "joelczk": 19,
      "Keith-JK": 1,
      "E0309556": 6
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String EVENT_ICON \u003d \"E\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime startDateAndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    protected LocalDateTime endDateAndTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected boolean isRepeat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected int numOfPeriod;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String typeOfPeriod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Event object constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of Event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param location location of Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param startDateTime starting date and time of Event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param endDateTime ending date and time of Event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments for the Event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Event(String name, String location, LocalDateTime startDateTime, LocalDateTime endDateTime,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                 String comments) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        super(name, comments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.startDateAndTime \u003d startDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        this.endDateAndTime \u003d endDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.isRepeat \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return startDateAndTime.toLocalTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending date and time of the event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDateTime object representing the end time and date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDateTime getEndDateAndTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending date of the event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalDate object representing the end date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime.toLocalDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Gets the ending time of the event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return LocalTime object representing the end time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return endDateAndTime.toLocalTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public int getNumOfPeriod() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return numOfPeriod;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getTypeOfPeriod() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return typeOfPeriod;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public boolean getIsRepeat() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return isRepeat;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Set event as repeating event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param numOfPeriod number of periods before event repeats"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param typeOfPeriod type of period which event repeats - could be daily, weekly, monthly or yearly"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void setRepeat(int numOfPeriod, String typeOfPeriod) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.isRepeat \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.numOfPeriod \u003d numOfPeriod;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.typeOfPeriod \u003d typeOfPeriod;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Set event to not repeating anymore."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void setNoRepeat() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.isRepeat \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.numOfPeriod \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.typeOfPeriod \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Update date of event to the next upcoming date (after today) if the recurring event"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * has already occurred."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void updateDateAndTime() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (this.isRepeat) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            switch (typeOfPeriod) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            case (RepeatCommand.DAILY_ICON):"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                updateDateByDays(numOfPeriod);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            case (RepeatCommand.WEEKLY_ICON):"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                updateDateByDays(numOfPeriod * 7);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            case (RepeatCommand.MONTHLY_ICON):"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                updateDateByMonth(numOfPeriod);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            case (RepeatCommand.YEARLY_ICON):"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                updateDateByYear(numOfPeriod);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Update date of event if it is a daily recurring event."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param numOfPeriod num of days before it recurs"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void updateDateByDays(int numOfPeriod) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDateTime currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            startDateAndTime \u003d startDateAndTime.plusDays(numOfPeriod);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            endDateAndTime \u003d endDateAndTime.plusDays(numOfPeriod);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } while (startDateAndTime.compareTo(currDateTime) \u003c 0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Update date of event if it is a monthly recurring event."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param numOfPeriod num of months before it recurs"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void updateDateByMonth(int numOfPeriod) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDateTime currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            startDateAndTime \u003d startDateAndTime.plusMonths(numOfPeriod);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            endDateAndTime \u003d endDateAndTime.plusMonths(numOfPeriod);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } while (startDateAndTime.compareTo(currDateTime) \u003c 0);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Update date of event if it is a yearly recurring event."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param numOfPeriod num of years before it recurs"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void updateDateByYear(int numOfPeriod) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDateTime currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            startDateAndTime \u003d startDateAndTime.plusYears(numOfPeriod);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            endDateAndTime \u003d endDateAndTime.plusYears(numOfPeriod);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } while (startDateAndTime.compareTo(currDateTime) \u003c 0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String repeatToStringAndComment() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isRepeat) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String repeatString \u003d String.valueOf(numOfPeriod) + typeOfPeriod;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return String.format(Messages.REPEAT_EVENT_WITH_COMMENTS_INDENT, repeatString);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return Messages.COMMENTS_INDENT;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return \"[\" + EVENT_ICON + \"]\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + location"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + startDateAndTime.format(Parser.PRINT_DATE_FORMAT)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + endDateAndTime.format(Parser.PRINT_TIME_FORMAT)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                + repeatToStringAndComment()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + comments;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(EVENT_ICON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(name);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(location);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(startDateAndTime.format(Parser.INPUT_DATE_FORMAT));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(endDateAndTime.format(Parser.INPUT_DATE_FORMAT));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        sj.add(isRepeat ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        sj.add(Integer.toString(numOfPeriod));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        sj.add(typeOfPeriod);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        sj.add(comments);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Converts an encoded Event back to an Event object."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @param encodedTask Event encoded using encodedTask()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return Event with the correct attributes set"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws DateTimeParseException if encoded startDateAndTime or endDateAndTime cannot be parsed"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @throws IndexOutOfBoundsException if encodedTask is not a String returned by calling encodeTask() on"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     *              an Event"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static Event decodeTask(String encodedTask)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\"\\\\\" + STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assert tokens[0].equals(EVENT_ICON);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String name \u003d tokens[2];"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String location \u003d tokens[3];"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime startDateAndTime \u003d Parser.parseDate(tokens[4]);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime endDateAndTime \u003d Parser.parseDate(tokens[5]);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        boolean isRepeat \u003d Boolean.parseBoolean(tokens[6]);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        int numOfPeriod \u003d Integer.parseInt(tokens[7]);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String typeOfPeriod \u003d tokens[8];"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String comments \u003d tokens[9];"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert tokens.length \u003d\u003d 10;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event event \u003d new Event(name, location, startDateAndTime, endDateAndTime, comments);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isRepeat) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            event.setRepeat(numOfPeriod, typeOfPeriod);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            event.setDone();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 112,
      "joelczk": 16,
      "E0309556": 120
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public static final String STORAGE_DELIMITER \u003d \"|\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    protected String comments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Task object representing a Event or Assignment object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param name name of event or assignment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @param comments comments to the event or assignment"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public Task(String name, String comments) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDateTime getDateAndTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract LocalTime getTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Returns symbol representing if task is completed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * @return return tick if task is completed, else return cross"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[/]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            return \"[X]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return String.format(\"%s %s\", getStatusIcon(), name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public boolean equals(Object addedTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (this \u003d\u003d addedTask) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (addedTask \u003d\u003d null || getClass() !\u003d addedTask.getClass()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assert ((addedTask.getClass() \u003d\u003d Assignment.class) || (addedTask.getClass() \u003d\u003d Event.class));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Task task \u003d (Task) addedTask;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return name.equals(task.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * Encodes a task for local storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     * @return String that represents the encoded task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public abstract String encodeTask();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 17,
      "joelczk": 44,
      "Keith-JK": 8,
      "E0309556": 13
    }
  },
  {
    "path": "src/test/java/command/AssignmentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        AssignmentCommand testAssignmentCommand \u003d new AssignmentCommand("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"assignment\", \"CS2113T\", Parser.parseDate(\"20/03/20 0900\"), \"yes\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testAssignmentCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 7,
      "joelczk": 14
    }
  },
  {
    "path": "src/test/java/command/CalendarCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_ONLY_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static CalendarCommand testCalendarCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static TaskList testTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Ui testUi;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testLocalDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testLocalDate1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static LocalDate testLocalDate2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Calendar testCalendar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static StringBuilder testBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // ANSI text colour scheme"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLACK \u003d \"\\u001B[30m\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RED \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_GREEN \u003d \"\\u001B[32m\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_YELLOW \u003d \"\\u001B[33m\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLUE \u003d \"\\u001B[34m\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_PURPLE \u003d \"\\u001B[35m\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_CYAN \u003d \"\\u001B[36m\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_WHITE \u003d \"\\u001B[37m\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // ANSI background colour scheme"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLACK_BACKGROUND \u003d \"\\u001B[40m\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_RED_BACKGROUND \u003d \"\\u001B[41m\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_GREEN_BACKGROUND \u003d \"\\u001B[42m\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_YELLOW_BACKGROUND \u003d \"\\u001B[43m\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_BLUE_BACKGROUND \u003d \"\\u001B[44m\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_PURPLE_BACKGROUND \u003d \"\\u001B[45m\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_CYAN_BACKGROUND \u003d \"\\u001B[46m\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public static final String ANSI_WHITE_BACKGROUND \u003d \"\\u001B[47m\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String STARTING_BORDER \u003d ANSI_PURPLE + \"*\" + ANSI_RESET;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final String PAD \u003d \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Assignment testCaseTwo \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static Event testCaseFour \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // Calendar dimensions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MAX_CALENDAR_ROWS \u003d 30;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int CALENDAR_BOX_HEIGHT \u003d 6;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    // sizing of each Calendar box"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int MAX_CALENDAR_BOX_WIDTH \u003d 20;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int DATE_PADDING_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 3;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int EMPTY_BOX_PADDING \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    private static final int CONTENT_WIDTH \u003d MAX_CALENDAR_BOX_WIDTH - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     * Setup Commands, Calendar before each test."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testUi \u003d new Ui();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String date1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String date2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String date3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String date4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime testDateTime1 \u003d LocalDateTime.parse(date1, dateTimeFormatter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime testDateTime2 \u003d LocalDateTime.parse(date2, dateTimeFormatter);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime testDateTime3 \u003d LocalDateTime.parse(date3, dateTimeFormatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        LocalDateTime testDateTime4 \u003d LocalDateTime.parse(date4, dateTimeFormatter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseTwo \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final Event testCaseThree \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCaseFour \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testDate \u003d \"01/01/20\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testDate1 \u003d \"13/03/20\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testDate2 \u003d \"02/02/20\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testLocalDate \u003d LocalDate.parse(testDate, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testLocalDate1 \u003d LocalDate.parse(testDate1, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testLocalDate2 \u003d LocalDate.parse(testDate2, INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand \u003d new CalendarCommand(testLocalDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalibrateCalendar() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.calibrateCalendar(testLocalDate, testCalendar);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendar.get(Calendar.MONTH), testLocalDate.getMonthValue() - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendar.get(Calendar.YEAR), testLocalDate.getYear());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testCalendar.get(Calendar.DAY_OF_MONTH), 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testGetTaskByYearMonth() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate, testTaskList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(resultList.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList1 \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate1, testTaskList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(resultList1.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e resultList2 \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate2, testTaskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(resultList2.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testStartBorder() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarStartBorder(testBuilder);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), STARTING_BORDER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalendarNewLine() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarNewLine(testBuilder);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), System.lineSeparator());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddTaskToCalendar() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.calibrateCalendar(testLocalDate, testCalendar);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        ArrayList\u003cTask\u003e arrayList \u003d testCalendarCommand.getTasksByYearMonth(testLocalDate, testTaskList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addTaskToCalendar(arrayList, testBuilder, testCaseTwo);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(arrayList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String taskDetails \u003d testCaseTwo.getTime().format(Parser.PRINT_TIME_FORMAT) + testCaseTwo.getName();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        if (taskDetails.length() \u003e CONTENT_WIDTH) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            taskDetails \u003d taskDetails.substring(0, CONTENT_WIDTH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d ANSI_RED + taskDetails + ANSI_RESET"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + PAD.repeat((CONTENT_WIDTH - taskDetails.length())) + BORDER;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddCalendarBorder() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarBorder(testBuilder);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d BORDER.repeat(MAX_CALENDAR_BOX_WIDTH * DAYS_IN_WEEK + 1) + System.lineSeparator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddEmptyBody() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addEmptyCalendarBody(testBuilder);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d PAD.repeat(EMPTY_BOX_PADDING) + BORDER;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testAddCalendarDate() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int testDaySingleDigit \u003d 9;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        final int testDayDoubleDigit \u003d 30;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarDate(testBuilder, testDaySingleDigit);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d PAD.repeat(DATE_PADDING_WIDTH) + ANSI_CYAN"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + testDaySingleDigit + ANSI_RESET + PAD + BORDER;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testString, testBuilder.toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        // reset string builder"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testBuilder.delete(0, testBuilder.length());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarDate(testBuilder, testDayDoubleDigit);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString2 \u003d PAD.repeat(DATE_PADDING_WIDTH) + ANSI_CYAN"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + testDayDoubleDigit + ANSI_RESET + BORDER;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalendarLegend() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarLegend(testBuilder);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        StringBuilder calendarView \u003d new StringBuilder();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String[] days \u003d {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarBorder(calendarView);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarStartBorder(calendarView);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        for (int dayRepresented \u003d 0; dayRepresented \u003c DAYS_IN_WEEK; dayRepresented++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(PAD.repeat(CONTENT_WIDTH - days[dayRepresented].length()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            calendarView.append(ANSI_CYAN).append(days[dayRepresented]).append(ANSI_RESET).append(BORDER);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarNewLine(calendarView);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), calendarView.toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testCalendarTitle() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.calibrateCalendar(testLocalDate, testCalendar);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testCalendarCommand.addCalendarTitle(testCalendar, testBuilder);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String testString \u003d ANSI_RED + \"Assignments are represented in red\" + ANSI_RESET + System.lineSeparator();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testString +\u003d ANSI_GREEN + \"Events are represented in green\" + ANSI_RESET + System.lineSeparator();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        String dayFormat \u003d new SimpleDateFormat(\"MMMM YYYY\").format(testCalendar.getTime());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        testString +\u003d ANSI_YELLOW + dayFormat + ANSI_RESET + System.lineSeparator();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testBuilder.toString(), testString);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Keith-JK": 217
    }
  },
  {
    "path": "src/test/java/command/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Initialize hard-coded test cases for testing purposes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public ClearCommandTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String date4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime1 \u003d LocalDateTime.parse(date1, dateTimeFormatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime2 \u003d LocalDateTime.parse(date2, dateTimeFormatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime3 \u003d LocalDateTime.parse(date3, dateTimeFormatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateTime4 \u003d LocalDateTime.parse(date4, dateTimeFormatter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment testCaseTwo \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseThree \u003d new Assignment(null,null,null,null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event testCaseSix \u003d new Event(null,null,null, null,null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearAll_filledList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"all\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.CLEAR_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearAll_emptyList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(filledTaskList.getListSize(),6);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"all\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.NO_TASKS_MSG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_filledList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.markTaskAsDone(2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.markTaskAsDone(4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.CLEAR_DONE_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_filledList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_DONE_CLEAR_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void clearDone_EmptyList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new ClearCommand(\"done\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 16,
      "joelczk": 77
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testDelete_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.deleteTask(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testDelete_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.deleteTask(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 24,
      "Keith-JK": 2
    }
  },
  {
    "path": "src/test/java/command/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jichngan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jichngan"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringOne \u003d \"12/03/20 1600\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringTwo \u003d \"12/03/20 1800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringThree \u003d \"13/03/20 1600\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String dateStringFour \u003d \"13/03/20 1800\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateOne \u003d LocalDateTime.parse(dateStringOne, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateTwo \u003d LocalDateTime.parse(dateStringTwo, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateThree \u003d LocalDateTime.parse(dateStringThree, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static LocalDateTime dateFour \u003d LocalDateTime.parse(dateStringFour, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     * Initialise TaskList for testing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jichngan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment firstAssignment \u003d new Assignment(\"one\", \"cs2113\", dateOne, \"None\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment secondAssignment \u003d new Assignment(\"two\", \"cs2113\", dateOne, \"None\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event firstEvent \u003d new Event(\"meeting one\", \"cs2113\", dateOne, dateTwo,\"None\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event secondEvent \u003d new Event(\"meeting two\", \"cs2113\", dateThree, dateFour,\"None\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(firstAssignment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(secondAssignment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(firstEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.addTask(secondEvent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editAssignment_filledList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment editedAssignment \u003d new Assignment(\"three\", \"cs2113\", dateOne, \"None\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.editTask(0, editedAssignment);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(filledTaskList.getTask(0), editedAssignment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editEvent_filledList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Event editedEvent \u003d new Event(\"meeting three\", \"cs2113\", dateOne, dateTwo, \"None\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledTaskList.editTask(2, editedEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(filledTaskList.getTask(2), editedEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void editTask_filledList_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        Assignment editedAssignment \u003d new Assignment(\"three\", \"cs2113\", dateOne, \"None\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e filledTaskList.editTask(5, editedAssignment));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jichngan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jichngan": 69
    }
  },
  {
    "path": "src/test/java/command/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                \"meeting\", \"Singapore\", Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                Parser.parseDate(\"20/03/20 1100\"), null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testEventCommand.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(),1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 8,
      "joelczk": 14
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void testExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        CommandResult testResult \u003d Parser.parseCommand(ExitCommand.COMMAND_WORD).execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        CommandResult compareResult \u003d new CommandResult(Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.getClass(), compareResult.getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(testResult.feedbackToUser, Messages.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(ExitCommand.isExit());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "Keith-JK": 18,
      "E0309556": 1
    }
  },
  {
    "path": "src/test/java/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.MethodOrderer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.TestMethodOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Test in alphanumeric order instead of random order to ensure that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * testing function \"repeatingEvent_filledList_allTaskListMsg\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * is the last to run and will not affect the other hard coded test cases."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "@TestMethodOrder(MethodOrderer.Alphanumeric.class)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static TaskList filledTasklist;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static TaskList emptyTasklist;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static TaskList filledWeeklyTaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime currDateTime1 \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime currDateTime2 \u003d LocalDateTime.now().plusSeconds(60);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime oneWeekDateTime1 \u003d currDateTime1.plusDays(7);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime oneWeekDateTime2 \u003d currDateTime2.plusDays(7);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrButSameDayDateTime1 \u003d currDateTime1.plusSeconds(30);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrButSameDayDateTime2 \u003d currDateTime1.plusSeconds(300);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String beforeCurrDateTimeString1 \u003d \"13/02/20 1800\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String beforeCurrDateTimeString2 \u003d \"13/02/20 2030\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrDateTimeString1 \u003d \"01/01/21 0000\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrDateTimeString2 \u003d \"01/01/21 0259\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime beforeCurrDateTime1 \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(beforeCurrDateTimeString1, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime beforeCurrDateTime2 \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(beforeCurrDateTimeString2, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrDateTime1 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(afterCurrDateTimeString1, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static LocalDateTime afterCurrDateTime2 \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            LocalDateTime.parse(afterCurrDateTimeString2, Parser.INPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String currDateTimeStringForPrint1 \u003d currDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String currDateTimeStringForPrint2 \u003d currDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String nextWeekDateTimeStringForPrint1 \u003d oneWeekDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String nextWeekDateTimeStringForPrint2 \u003d oneWeekDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrButSameDayStringForPrint1 \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            afterCurrButSameDayDateTime1.format(Parser.PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String afterCurrButSameDayStringForPrint2 \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            afterCurrButSameDayDateTime2.format(Parser.PRINT_TIME_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    private static String expectedOutputFromFilledTasklist \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  1. [A][/] Assignment 3 (by: Thu 13 Feb 2020 18:00 | mod: CS2109)\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  2. [A][X] Quiz 1 (by: Fri 01 Jan 2021 00:00 | mod: CS2173)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"15%\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  3. [E][X] midterms (at: MPSH1A | Thu 13 Feb 2020 18:00 - 20:30)\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static String expectedOutputFromUpcomingEvent \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static String expectedOutputFromIncompleteAssign \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  2. [A][X] Quiz 1 (by: Fri 01 Jan 2021 00:00 | mod: CS2173)\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"15%\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String expectedOutputFromListToday \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  1. [A][X] Assignment 1 (by: \" + currDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 1 Notes\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  2. [E][X] Event 1 (at: Classroom | \" + currDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + currDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 1 Notes\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    private static String expectedOutputFromListWeek \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  1. [A][X] Assignment 1 (by: \" + currDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 1 Notes\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  2. [E][X] Event 1 (at: Classroom | \" + currDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + currDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 1 Notes\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  3. [A][X] Assignment 2 (by: \" + nextWeekDateTimeStringForPrint1 + \" | mod: CS2113)\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Assignment 2 Notes\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + \"  4. [E][X] Event 2 (at: Classroom | \" + nextWeekDateTimeStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            + nextWeekDateTimeStringForPrint2 + \")\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jichngan"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"Event 2 Notes\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static String expectedOutputFromFilledTasklistForRepeating \u003d \"Here are the relevant tasks:\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  1. [A][/] Assignment 3 (by: Thu 13 Feb 2020 18:00 | mod: CS2109)\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  2. [A][X] Quiz 1 (by: Fri 01 Jan 2021 00:00 | mod: CS2173)\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"15%\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  3. [E][X] midterms (at: MPSH1A | Thu 13 Aug 2020 18:00 - 20:30)\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + String.format(Messages.REPEAT_EVENT_WITH_COMMENTS_INDENT, \"6m\") + \"-\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  4. [E][X] Countdown (at: TimeSquare | Fri 01 Jan 2021 00:00 - 02:59)\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"new year new me\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + \"  5. [E][X] Bathe (at: Toilet | \" + afterCurrButSameDayStringForPrint1 + \" - \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + afterCurrButSameDayStringForPrint2 + \")\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator() + Messages.COMMENTS_INDENT + \"-\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        emptyTasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment assignBeforeCurrDateTime \u003d new Assignment(\"Assignment 3\", \"CS2109\", beforeCurrDateTime1, \"-\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment assignAfterCurrDateTime \u003d new Assignment(\"Quiz 1\", \"CS2173\", afterCurrDateTime1, \"15%\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event eventBeforeCurrDateTime \u003d new Event(\"midterms\", \"MPSH1A\", beforeCurrDateTime1, beforeCurrDateTime2, \"-\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event eventAfterCurrDateTime \u003d new Event(\"Countdown\", \"TimeSquare\", afterCurrDateTime1,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                afterCurrDateTime2, \"new year new me\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event eventOnSameDayAfterCurrTime \u003d new Event(\"Bathe\", \"Toilet\", afterCurrButSameDayDateTime1,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                afterCurrButSameDayDateTime2, \"-\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(assignBeforeCurrDateTime);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(assignAfterCurrDateTime);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(eventBeforeCurrDateTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(eventAfterCurrDateTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.addTask(eventOnSameDayAfterCurrTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        filledTasklist.markTaskAsDone(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment currDateTimeAssignment \u003d new Assignment(\"Assignment 1\", \"CS2113\", currDateTime1,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                \"Assignment 1 Notes\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event currDateTimeEvent \u003d new Event(\"Event 1\", \"Classroom\", currDateTime1, currDateTime2, \"Event 1 Notes\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Assignment nextWeekAssignment \u003d new Assignment(\"Assignment 2\", \"CS2113\", oneWeekDateTime1,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                \"Assignment 2 Notes\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Event nextWeekEvent \u003d new Event(\"Event 2\", \"Classroom\", oneWeekDateTime1, oneWeekDateTime2, \"Event 2 Notes\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(currDateTimeAssignment);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(currDateTimeEvent);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(nextWeekAssignment);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        filledWeeklyTaskList.addTask(nextWeekEvent);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_emptyList_emptyListMsg() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(Messages.EMPTY_TASKLIST_MESSAGE,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(null).execute(emptyTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_invalidArgs_errorMsg() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(\"Invalid arguments for List Command\" + System.lineSeparator() + ListCommand.COMMAND_USAGE,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(\"everything i want\").execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_filledList_incompleteAssignOnly() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromIncompleteAssign,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(\"incomplete assignments\").execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_filledList_allTaskListMsg() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromFilledTasklist,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(null).execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void printList_filledList_upcomingEventsOnly() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromUpcomingEvent,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(\"upcoming events\").execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void printList_filledWeeklyList_todayTasks() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(expectedOutputFromListToday,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                new ListCommand(\"today\").execute(filledWeeklyTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    public void printList_filledWeeklyList_weeklyTasks() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jichngan"
        },
        "content": "        assertEquals(expectedOutputFromListWeek,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jichngan"
        },
        "content": "                new ListCommand(\"week\").execute(filledWeeklyTaskList, ui).feedbackToUser);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jichngan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void repeatingEvent_filledList_allTaskListMsg() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(2, 6, \"m\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(filledTasklist, ui);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ((Event) filledTasklist.getTask(2)).updateDateAndTime();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(expectedOutputFromFilledTasklistForRepeating,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                new ListCommand(\"\").execute(filledTasklist, ui).feedbackToUser);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 59,
      "Keith-JK": 1,
      "E0309556": 125,
      "jichngan": 39
    }
  },
  {
    "path": "src/test/java/command/MarkAsDoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class MarkAsDoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(testTaskList.getTask(0).getIsDone());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testMarkAsDone_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testTaskList.markTaskAsDone(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 3,
      "joelczk": 21,
      "Keith-JK": 2
    }
  },
  {
    "path": "src/test/java/command/RepeatCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class RepeatCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Event testEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static TaskList testTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static Ui testUi;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *  Initializing tasklisk, ui and event to be added and tested for all test cases."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testUi \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent \u003d new Event(\"Daily Work\", \"CS2113T\", Parser.parseDate(\"20/03/20 0000\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                Parser.parseDate(\"20/03/20 1200\"), \"testing\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    //whatIsBeingTested_descriptionOfTestInputs_expectedOutcome"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void nonRecurringEvent_updateDateTime_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent.updateDateAndTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertNotEquals(testEvent.getIsRepeat(), true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void testAssignment_setToRepeat_invalidEventRepeatErrorMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Assignment testAssign \u003d new Assignment(\"Daily Work\", \"CS2113T\", Parser.parseDate(\"20/03/20 0000\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 \"testing\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testTaskList.addTask(testAssign);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(1, 1, \"d\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testRepeatCommand.execute(testTaskList, testUi).feedbackToUser, \"Please choose an event.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void numOfPeriod_getNumOfPeriod_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, \"d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent.updateDateAndTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getNumOfPeriod(), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void typeOfPeriod_getTypeOfPeriod_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, \"d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent.updateDateAndTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getTypeOfPeriod(), \"d\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_tomorrowDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, \"d\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent.updateDateAndTime();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getDate(), LocalDateTime.now().plusDays(1).toLocalDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_nextWeekDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, \"w\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDate taskDate \u003d testEvent.getDate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent.updateDateAndTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getDate(), taskDate.plusWeeks(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_nextMonthDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, \"m\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDate taskDate \u003d testEvent.getDate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent.updateDateAndTime();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getDate(), taskDate.plusMonths(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void repeatingTask_getDateOfRepeatTask_nextYearDate() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, \"y\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        LocalDate taskDate \u003d testEvent.getDate();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testEvent.updateDateAndTime();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getDate(), taskDate.plusYears(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void repeatingTask_setNoRepeat_taskNotRepeating() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(0, 1, \"y\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getIsRepeat(), true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testNoRepeatCommand \u003d new RepeatCommand(0, 0, null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        testNoRepeatCommand.execute(testTaskList, testUi);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testEvent.getIsRepeat(), false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void repeatingTask_invalidIndex_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String expectedOutput \u003d \"Please provide a valid task number from 1 to 1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        RepeatCommand testRepeatCommand \u003d new RepeatCommand(5, 1, \"y\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(testRepeatCommand.execute(testTaskList, testUi).feedbackToUser, expectedOutput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 118
    }
  },
  {
    "path": "src/test/java/command/SearchCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private StringBuilder searchString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Initialize hard-coded test cases."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public SearchCommandTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime1 \u003d LocalDateTime.parse(date1, dateTimeFormatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime2 \u003d LocalDateTime.parse(date2, dateTimeFormatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime3 \u003d LocalDateTime.parse(date3, dateTimeFormatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime4 \u003d LocalDateTime.parse(date4, dateTimeFormatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \"-\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseTwo \u003d new Assignment(\"Assignment 5\", \"CS2102\", testDateTime1, \"-\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseThree \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \"-\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseSix \u003d new Event(\"mid\", \"MPSH1A\", testDateTime1, testDateTime2, \"-\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String eventSingleResultString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[E][X] midterms (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String eventMultipleResultsString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[E][X] midterms (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  2.[E][X] mid (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String assignmentSingleResultString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[A][X] Assignment 3 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String assignmentMultipleResultsString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[A][X] Assignment 3 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  2.[A][X] Assignment 5 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteEmptyTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"all\").execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"assignment\").execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"event\").execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteInvalidSearchFormat() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"test\", \"abcd\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        Parser.capitalize(SearchCommand.COMMAND_WORD), SearchCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteOneEvent() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"midterms\", \"event\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                eventSingleResultString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteMultipleEvents() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"mid\", \"event\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                eventMultipleResultsString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteSingleAssignment() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"assignment 3\", \"assignment\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                assignmentSingleResultString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteMultipleAssignments() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"assignment\", \"assignment\").execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                assignmentMultipleResultsString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecute_emptyResults() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"event\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"assignment\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchCommand(\"abcd\", \"all\").execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 151,
      "E0309556": 3
    }
  },
  {
    "path": "src/test/java/command/SearchdCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import seedu.atas.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class SearchdCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_ONLY_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList filledTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static TaskList emptyTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private StringBuilder searchString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static String stringDate1 \u003d \"13/03/20\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private static LocalDate date1 \u003d LocalDate.parse(stringDate1,INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     * Initialize hard-coded test cases."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public SearchdCommandTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        emptyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date1 \u003d \"13/03/2020 18:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date2 \u003d \"13/03/2020 20:30\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date3 \u003d \"01/01/2020 00:00\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String date4 \u003d \"01/01/2020 02:59\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime1 \u003d LocalDateTime.parse(date1, dateTimeFormatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime2 \u003d LocalDateTime.parse(date2, dateTimeFormatter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime3 \u003d LocalDateTime.parse(date3, dateTimeFormatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateTime4 \u003d LocalDateTime.parse(date4, dateTimeFormatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseOne \u003d new Assignment(\"Assignment 3\", \"CS2102\", testDateTime1, \"-\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseTwo \u003d new Assignment(\"Assignment 5\", \"CS2102\", testDateTime1, \"-\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Assignment testCaseThree \u003d new Assignment(\"OP1\", \"CS2101\", testDateTime3, \"15%\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFour \u003d new Event(\"midterms\", \"MPSH1A\", testDateTime1, testDateTime2, \"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseFive \u003d new Event(\"Countdown\", \"TimeSquare\", testDateTime3, testDateTime4, \"new year new me\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        Event testCaseSix \u003d new Event(\"mid\", \"MPSH1A\", testDateTime1, testDateTime2, \"-\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseOne);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseTwo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseThree);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFour);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseFive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        filledTaskList.addTask(testCaseSix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String eventSingleResultString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[E][X] midterms (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String eventMultipleResultsString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[E][X] midterms (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  2.[E][X] mid (at: MPSH1A | Fri 13 Mar 2020 18:00 - 20:30)\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String assignmentSingleResultString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[A][X] Assignment 3 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    private String assignmentMultipleResultsString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(Messages.SEARCH_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  1.[A][X] Assignment 3 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"  2.[A][X] Assignment 5 (by: Fri 13 Mar 2020 18:00 | mod: CS2102)\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(\"            notes: -\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        searchString.append(System.lineSeparator());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        return searchString.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteEmptyTaskList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"test\", \"all\", date1).execute(emptyTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"test\", \"assignment\", date1).execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"test\", \"event\", date1).execute(emptyTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_TASKLIST_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteInvalidSearchFormat() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"test\", \"abcd\", date1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                        Parser.capitalize(SearchdCommand.COMMAND_WORD), SearchdCommand.COMMAND_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteOneEvent() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String stringDate1 \u003d \"13/03/20\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDate date1 \u003d LocalDate.parse(stringDate1,INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"event\",\"midterms\", date1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                eventSingleResultString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteMultipleEvents() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String stringDate1 \u003d \"13/03/20\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDate date1 \u003d LocalDate.parse(stringDate1,INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"event\", \"mid\", date1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                eventMultipleResultsString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteSingleAssignment() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        String stringDate1 \u003d \"13/03/20\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDate date1 \u003d LocalDate.parse(stringDate1,INPUT_DATE_ONLY_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"assignment\", \"assignment 3\", date1).execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                assignmentSingleResultString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecuteMultipleAssignments() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"assignment\", \"assignment\", date1).execute(filledTaskList,ui).feedbackToUser,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                assignmentMultipleResultsString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSearchExecute_emptyResults() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"event\",\"abcd\", date1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"assignment\", \"abcd\", date1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(new SearchdCommand(\"all\", \"abcd\", date1).execute(filledTaskList, ui).feedbackToUser,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                Messages.EMPTY_SEARCH_RESULTS_ERROR);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joelczk": 162,
      "E0309556": 2
    }
  },
  {
    "path": "src/test/java/seedu/atas/AtasTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "class AtasTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/atas/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.AssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.IncorrectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import command.RepeatCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import command.CalendarCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Date Tests. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormat_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20 2359\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_correctFormatWithSpaces_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Parser.parseDate(\"22/02/20       2359\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2020-02-22T23:59:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedDateTime, expectedDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_invalidDateTime_throwDateTimeParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/02/20 1111\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"20/02/20 2500\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e Parser.parseDate(\"32/O2/2O 1111\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDate_incorrectFormat_throwIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"22/02/20\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Parser.parseDate(\"1800\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Unknown Command Tests. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void testUnknownCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(Parser.parseCommand(\"foo 2\").execute(testTaskList, testUi).feedbackToUser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.UNKNOWN_COMMAND_ERROR));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Assignment Command Tests. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(AssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name m/cs2113T d/22/01/20 1800 c/comments\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                AssignmentCommand.COMMAND_WORD + \"  \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"m/   cs2113T  \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800 \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof AssignmentCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseAssignmentCommand_missingParameters_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(Parser.parseCommand(AssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/ASS m/cs1010 d/30/02/20 1111\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        Parser.capitalize(AssignmentCommand.COMMAND_WORD), AssignmentCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Event Command Tests. */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + \" n/name l/somewhere ah d/22/01/20 1800 - 2030 c/comment\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                EventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"n/   long long name   \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"l/   somewhere over the rainbow   \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"d/  22/01/20   1800  -   2030   \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \"c/  comments with spaces   \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        );"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue((parsedCommand instanceof EventCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_missingComment_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(Parser.parseCommand(EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/EVE l/LOC d/30/02/20 1111 - 2222 c/\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        Parser.capitalize(EventCommand.COMMAND_WORD), EventCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseEventCommand_startTimeAfterEndTime_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertEquals(Parser.parseCommand(EventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        + \" n/EVE l/LOC d/30/02/20 2222 - 1111 c/none\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                        .execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.INCORRECT_START_END_TIME_ERROR));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Delete Command Tests. */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        Parser.capitalize(DeleteCommand.COMMAND_WORD), DeleteCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDeleteCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DeleteCommand.COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.NUM_FORMAT_ERROR));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Done Command Tests. */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD + \" 123\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_extraWhitespacePresent_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD + \"    123    \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_missingParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, String.format(Messages.INCORRECT_ARGUMENT_ERROR,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        Parser.capitalize(DoneCommand.COMMAND_WORD), DoneCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseDoneCommand_invalidParameter_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(DoneCommand.COMMAND_WORD + \" abc\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.NUM_FORMAT_ERROR));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Help Command Tests. */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseHelpCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** List Command Tests. */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseListCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" today\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" week\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" incomplete assignments\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        parsedCommand \u003d Parser.parseCommand(ListCommand.COMMAND_WORD + \" upcoming events\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /** Repeat Command Tests. */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void parseRepeatCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/10d\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertTrue(parsedCommand instanceof RepeatCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommandInvalidPeriod \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/25ddd\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertFalse(parsedCommandInvalidPeriod instanceof RepeatCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertTrue(parsedCommandInvalidPeriod instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommandNoRepeat \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/0\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertTrue(parsedCommandNoRepeat instanceof RepeatCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommandEmptyPeriod \u003d Parser.parseCommand(RepeatCommand.COMMAND_WORD + \" id/1 p/5\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        assertTrue(parsedCommandEmptyPeriod instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    /** Exit Command Tests. */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void parseExitCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertTrue(parsedCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void parseCalendarCommand_expectedInput_success() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(CalendarCommand.COMMAND_WORD + \" d/01/01/20\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(parsedCommand instanceof  CalendarCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void parseCalendarCommand_failureMessage() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(CalendarCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, String.format(Messages.INCORRECT_FORMAT_ERROR,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                        Parser.capitalize(CalendarCommand.COMMAND_WORD), CalendarCommand.COMMAND_USAGE)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    public void parseCalendarCommand_DateIncorrect() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        Command parsedCommand \u003d Parser.parseCommand(CalendarCommand.COMMAND_WORD + \" d/00/00/00\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertTrue(parsedCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "        assertEquals(parsedCommand.execute(new TaskList(), new Ui()).feedbackToUser,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                String.format(Messages.INCORRECT_COMMAND_ERROR, Messages.DATE_INCORRECT_OR_INVALID_ERROR));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 159,
      "Keith-JK": 46,
      "E0309556": 48
    }
  },
  {
    "path": "src/test/java/seedu/atas/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "package seedu.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetListSize() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        Task newTask \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        testTaskList.addTask(newTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(testTaskList.getListSize(), 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 22
    }
  },
  {
    "path": "src/test/java/tasks/AssignmentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment newAssignment \u003d new Assignment(\"TP\", \"CS2113T\",  Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "            \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    Assignment nullAssignment \u003d new Assignment(null, null, null, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetModule() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getModule(), \"CS2113T\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getModule(), null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getModule());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetDateAndTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.getDateAndTime(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getDateAndTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetIsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullAssignment.getIsDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newAssignment.getIsDone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetComments() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getComments(), \"My Very Long Long Long Comments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getComments());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newAssignment.setDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newAssignment.getName(),\"TP\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullAssignment.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[A][X] project meeting (by: Fri 20 Mar 2020 09:00 | mod: CS2113T)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "                + System.lineSeparator() + Messages.NEWLINE_INDENT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newAssignment.toString(), printedString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 4,
      "joelczk": 67
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "import seedu.atas.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    Event newEvent \u003d new Event(\"project meeting\", \"NUS SOC\", Parser.parseDate(\"20/03/20 0900\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "            Parser.parseDate(\"20/03/20 1100\"), \"My Very Long Long Long Long Long Comment\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    Event nullEvent \u003d new Event(null,null,null, null,null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetLocation() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getLocation(), \"NUS SOC\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getLocation(), null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getLocation());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetDateAndTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 0900\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNotEquals(newEvent.getDateAndTime(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getDateAndTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    public void getEndDateAndTime_expectedUsage_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        LocalDateTime testDateAndTime \u003d Parser.parseDate(\"20/03/20 1100\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertEquals(newEvent.getEndDateAndTime(), testDateAndTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertNotEquals(newEvent.getDateAndTime(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        assertNull(nullEvent.getDateAndTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lwxymere"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetIsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(newEvent.getIsDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertFalse(nullEvent.getIsDone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertTrue(newEvent.getIsDone());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetComments() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getComments(), \"My Very Long Long Long Long Long Comment\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getComments());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(), \"[X]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        newEvent.setDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getStatusIcon(),\"[/]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.getName(),\"project meeting\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertNull(nullEvent.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joelczk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "        String printedString \u003d \"[E][X] project meeting (at: NUS SOC | Fri 20 Mar 2020 09:00 - 11:00)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Keith-JK"
        },
        "content": "                + System.lineSeparator() + Messages.COMMENTS_INDENT"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joelczk"
        },
        "content": "                + \"My Very Long Long Long Long Long Comment\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joelczk"
        },
        "content": "        assertEquals(newEvent.toString(), printedString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joelczk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joelczk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 14,
      "joelczk": 64,
      "Keith-JK": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joelczk"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/Assignment 3 m/CS2102 d/13/03/20 1800 c/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/Assignment 3 m/CS2102 d/13/03/20 1800 c/5%"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joelczk"
        },
        "content": "assignment n/OP1 m/CS2101 d/01/01/20 0000 c/15%"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/midterms l/MPSH1A d/13/03/20 1800 - 2030 c/20%"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/Countdown l/TimeSquare d/13/03/21 1800 - 2300 c/new year new me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joelczk"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joelczk"
        },
        "content": "clear done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joelczk"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list upcoming events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list incomplete assignments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joelczk"
        },
        "content": "search t/all n/OP1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joelczk"
        },
        "content": "event n/Countdown l/TimeSquare d/13/03/22 1800 - 2300 c/new year new me"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joelczk"
        },
        "content": "clear all"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joelczk"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lwxymere"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "lwxymere": 1,
      "joelczk": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jichngan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "jichngan": 1
    }
  }
]
