[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "group \u0027seedu.dietmanager\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    mainClassName \u003d \"seedu.dietmanager.DietManager\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    archiveBaseName \u003d \"DietManager\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    archiveVersion \u003d \"1.0.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 5,
      "-": 36
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan De Jun | [Github](https://github.com/dejunnn) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yu Xiang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lam Yue Wei | [Github](https://github.com/lamyuewei) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chenghao | [Github](https://github.com/DDzuikeai) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "lamyuewei": 1,
      "DDzuikeai": 1,
      "-": 4,
      "yuxianglim": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "# Developer Guide - Diet Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. [Design](#design)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. [Implementation](#implementation)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. [Product Scope](#product-scope)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. [User Stories](#user-stories)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "4. [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "5. [Glossary](#glossary)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "6. [Instructions for Manual Testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![ArchitectureDiagram](/docs/images/Architecture.png)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the Diet Manager Application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The components involved are given below:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`UI`: The user interface of the application"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`Storage`: Reads data from and writes data to the specified data files"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`Parser`: Reads the given user input and breaks it down into machine-readable code"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`Profile`: Stores and records the user\u0027s profile information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "The `Logic` component is responsible for:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Arranging the whole workflow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Deciding how functional components interact with each other. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "The Logic consists of the following class:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* DietManager-Arranges the main workflow of the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `UI` component is responsible for:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Receiving all command line inputs from the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Displaying all system outputs to the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The UI consists of the following classes: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `UI` - Reads user input and displays system output"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `MessageBank` - Stores all standard system output messages"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Storage` component is responsible for:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Managing the respective data files"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Storing all system logs generated from the application"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Storage consists of the following classes: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Storage` - Stores all user profile information in respective data files"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `AppLogger` - Stores all system logs generated from the application"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Parser component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Parser` component is responsible for:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Reading user input and breaking it down to machine-readable code"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Parser consists of the following classes: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Parser` - Breaks down inputs into machine-readable code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Profile component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Profile` component is responsible for:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Storing all user profile information"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Profile consists of the following classes: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Profile` - "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `DailyFoodRecord` - "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Food component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Food` component is responsible for:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Food consists of the following classes: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Food` - "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `FoodNutritionInfo` - "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### 1. [Proposed] Record Meal Feature"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### 1.1 Proposed implementation"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "The record feature is facilitated by `RecordMealCommand`. It extends `Command` and overrides `execute()` and `saveResults()`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Given below is an example usage scenario and how the record mechanism behaves at each step."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Step 1.  The `ui` object gets user input and sends it to the `parser`. The `parser` then parses the original input into a standard `command`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "and returns it. The command type is decided by the `commandPrompt`. The `RecordMealCommand` has `record-meal` as its commandPrompt. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During the process a new`RecordMealCommand` object will be generated and returned to the `Logic` component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![Step1. Generate command](/docs/images/Record_step1.png)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Step 2.  The `Logic` composition calls the `execute()` method of the `RecordMealCommand` object. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During the process of execution, the command object will generate a `ArrayList\u003cFood\u003e foodList`, which maintains all `Food` items listed in the user input. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "If a certain kind of `Food` can be found in the database of `FoodNuritionInfo`, then this food item will be fetched from the database. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Else a new food object will be generated simply with `foodName` without all the nutrition info."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During execution, the command object will try to get a `record` object of the class `DailyFoodRecord`. The date of record specified by the user. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "If no record of that day is found in profile, it will automatically generate a new record of that day. Then with `foodList` and `record`, can call "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "the method `record.recordMeals()`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "{To be finished by Chenghao}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "## Product Scope"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Students who are too busy with work to carefully monitor their eating habits, and are concerned about their health."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager aims to achieve the following:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Streamline the diet recording process "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Allow users to track and monitor their eating habits"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Provide personalised information and recommendations for the user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for Manual Testing"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 83,
      "DDzuikeai": 35,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/AppLogger.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class AppLogger {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final String LOGGER_FILE_NAME \u003d \"DietManagerLogger.log\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the InfoLogger to record information when running the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public AppLogger() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger \u003d Logger.getLogger(AppLogger.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.initialiseConsoleHandler();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.initialiseFileHandler();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Initialises the File Handler, and sets Log Level priority at FINE."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void initialiseFileHandler() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(LOGGER_FILE_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            fileHandler.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.logger.log(Level.SEVERE, \"File logger error.\", e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Initialises the Console Handler, and sets Log Level priority at INFO."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void initialiseConsoleHandler() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        //Console Handler - What appears in the console"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        consoleHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeFineLog(String message) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.FINE, message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeInfoLog(String message) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeWarningLog(String message) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.WARNING, message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeSevereLog(String message) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.SEVERE, message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void logExecuteProgramme() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, \"Starting Diet Manager\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void logExitProgramme() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, \"Exiting Diet Manager\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 79
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/DailyFoodRecord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class DailyFoodRecord {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cFood\u003e breakfast;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cFood\u003e lunch;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cFood\u003e dinner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Daily Food Record."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord(String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        breakfast \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        lunch \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        dinner \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Sets the date of the record."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Records the meals consumed into their respective categories."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void recordMeals(String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            breakfast.addAll(foodList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            lunch.addAll(foodList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            dinner.addAll(foodList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Food Record."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showDailyRecord() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.showBreakfast();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.showLunch();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.showDinner();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Breakfast Record."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showBreakfast() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : breakfast) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Lunch Record."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showLunch() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : lunch) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Dinner Record."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showDinner() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : dinner) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public boolean isDate(String date) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.date.equals(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Provide a ArrayList of all the foods consumed in a day."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return ArrayList of all the foods consumed in a day"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ArrayList\u003cFood\u003e getDailyFood() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        allDailyFood.addAll(breakfast);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        allDailyFood.addAll(lunch);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        allDailyFood.addAll(dinner);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Provide a ArrayList of the foods consumed in a specific time frame of a day."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return ArrayList of all the foods consumed in a day"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ArrayList\u003cFood\u003e getDailyFood(String timeFrame) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (timeFrame) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return breakfast;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return lunch;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return dinner;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Calculate the total recorded calories for all the meals."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional double of the calories intake if exist, and Optional empty otherwise."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getDailyCalories() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(Food::hasCaloriesData)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Food::getCalories)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Optional::get)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce(Double::sum);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Calculate the total recorded calories for meals in a specific time frame of a day ."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional double of the calories intake if exist, and Optional empty otherwise."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getDailyCalories(String timeFrame) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e foodInTimeFrame \u003d getDailyFood(timeFrame);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodInTimeFrame.stream().filter(Food::hasCaloriesData)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Food::getCalories)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Optional::get)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce(Double::sum);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the DailyFoodRecord has any Food with missing calories data."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return False if there exist food without calories, true otherwise."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isCaloriesPresent() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(food -\u003e !food.hasCaloriesData())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(food -\u003e false)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce((first, second) -\u003e first)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(true);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the DailyFoodRecord has any Food in a specific time frame of a day with missing calories data."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return False if there exist food without calories, true otherwise."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isCaloriesPresent(String timeFrame) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood(timeFrame);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(food -\u003e !food.hasCaloriesData())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(food -\u003e false)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce((first, second) -\u003e first)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Express the calculable calories intake for all the meals as a String."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return String representation of the calculable calories."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showDailyCalories() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return getDailyCalories()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(calories -\u003e MessageBank.CALORIES_MESSAGE + String.format(\"%.2f\", calories) + \"cal.\\n\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(result -\u003e (isCaloriesPresent()) ? result : (result + MessageBank.MISSING_CALORIES_MESSAGE))"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(MessageBank.NO_CALORIES_MESSAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Express the calculable calories intake for meals within a time frame of the day as a String."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return String representation of the calculable calories within a time frame."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showDailyCalories(String timeFrame) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return getDailyCalories(timeFrame)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(calories -\u003e \"For \" + timeFrame + \", \" + MessageBank.TIME_CALORIES_MESSAGE"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                        + String.format(\"%.2f\", calories) + \"cal.\\n\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(\"For \" + timeFrame + \", \" + MessageBank.NO_TIME_CALORIES_MESSAGE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 30,
      "lamyuewei": 111,
      "DDzuikeai": 73
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/DietManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class DietManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static AppLogger appLogger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static FoodNutritionInfo foodNutritionInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Profile profile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static UI ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Begins the application and creates the relevant objects required for the application to function."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        initialiseApplication();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        runApplication();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void runApplication() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        appLogger.logExecuteProgramme();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.displayWelcomeMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        while (!ui.isExitStatus()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String userInput \u003d ui.readInput();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                Command command \u003d Parser.parseInput(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command.execute(profile, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                ui.showCommandMessage(command.getResult());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (InvalidFormatException | NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayInvalidFormatMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayInvalidCommandMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            } catch (InvalidGenderException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                ui.displayInvalidGenderMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                ui.displayIndexOutOfBoundMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        ui.displayExitMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        appLogger.logExitProgramme();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void initialiseApplication() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        appLogger \u003d new AppLogger();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionInfo \u003d new FoodNutritionInfo();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile \u003d new Profile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        storage \u003d new Storage(ui, appLogger);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void testAssertions() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert !ui.isExitStatus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert !profile.isProfileExist();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 61,
      "lamyuewei": 3,
      "DDzuikeai": 1,
      "yuxianglim": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/Food.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private Optional\u003cDouble\u003e calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for Food with the food name and calories value."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName Name of the food."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param calories Amount of calories the food has."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Food(String foodName, double calories) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.calories \u003d Optional.of(calories);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for Food with the food name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName Name of the food."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public Food(String foodName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.calories \u003d Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Getter for food name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Name of the food."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String getFoodName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Getter for the calories of the food."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Amount of calories the food has"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getCalories() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the food has calories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return True if food has calories, False otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean hasCaloriesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories.isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories.map(value -\u003e \"Food: \" + foodName + \", Calories: \" + String.format(\"%.2f\", value) + \"cal\\n\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElseGet(() -\u003e \"Food: \" + foodName + \", Calories: \" + \"No value found.\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 3,
      "lamyuewei": 47,
      "DDzuikeai": 6
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/FoodNutritionInfo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "// To be edited to add more Food items"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class FoodNutritionInfo {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private ArrayList\u003cFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for FoodNutritionInfo of Food from our database."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public FoodNutritionInfo() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        foods.add(new Food(\"Chicken\", 1)); // Not accurate yet"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        foods.add(new Food(\"Apple\", 2)); // Not accurate yet"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        foods.add(new Food(\"Carrot\", 3)); // Not accurate yet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        foods.add(new Food(\"Rice\", 4)); // Not accurate yet"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        foods.add(new Food(\"Oil\", 5)); // Not accurate yet"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        foods.add(new Food(\"Tea\", 6)); // Not accurate yet"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Search for a food in the database."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName The name of the food to be searched for."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional Food that contains the food if exist, and is empty otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cFood\u003e findFood(String foodName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Optional\u003cFood\u003e foodFound \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        for (Food food : foods) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (food.getFoodName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                foodFound \u003d Optional.of(food);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodFound;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Search if a food exists in the database."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName The name of the food to be searched for."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return True if food exist in database, false otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isInDatabase(String foodName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        boolean isFoodFound \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        for (Food food : foods) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (food.getFoodName().equals(foodName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                isFoodFound \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return isFoodFound;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Print out all the food stored in our database."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showFoodDatabase() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String foodDatabase \u003d MessageBank.FOOD_DATABASE_MESSAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        for (Food food : foods) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            foodDatabase +\u003d food;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodDatabase;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "lamyuewei": 63
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/Profile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height; //Height in meter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    //private double weight; //Weight in Kg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean profileExist;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cDailyFoodRecord\u003e personalFoodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private ArrayList\u003cDouble\u003e weightRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private ArrayList\u003cString\u003e weightRecordDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Profile() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.personalFoodRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Sets the User Profile with the relevant information required."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setProfile(String name, int age, String gender, double height, double weight, double weightGoal) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        //this.weight \u003d weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightGoal \u003d weightGoal;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightRecord.add(weight);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setHeight(double height) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setWeightGoal(double weightGoal) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightGoal \u003d weightGoal;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /** Method to add weight into list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param newWeight Weight to be added into list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param day String containing the day of the weight to be stored"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void addWeightProgress(Double newWeight, String day) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightRecord.add(newWeight);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightRecordDays.add(day);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.profileExist \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setProfileExist(boolean profileExist) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d profileExist;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean isProfileExist() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return profileExist;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return weightRecord.get(weightRecord.size() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getWeightGoal() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return weightGoal;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns a daily record of a certain date."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param date the date of the wanted record."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return a record of wanted date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord getRecordOfDay(String date) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean recordExists \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (DailyFoodRecord r : personalFoodRecord) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (r.isDate(date)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                record \u003d r;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                recordExists \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!recordExists) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            record \u003d addNewRecord(date);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord getRecordOfDay(int index) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return personalFoodRecord.get(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Creates a new record of a certain date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param date the date of the new record."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return a newly generated daily record."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord addNewRecord(String date) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d new DailyFoodRecord(date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        personalFoodRecord.add(record);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public int getNumOfRecordedDays() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return personalFoodRecord.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void setRecordOfDay(DailyFoodRecord record, String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.recordMeals(mealType,foodList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showRecordOfDay(DailyFoodRecord record) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.showDailyRecord();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showBreakfastOfDay(DailyFoodRecord record) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.showBreakfast();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showLunchOfDay(DailyFoodRecord record) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.showLunch();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showDinnerDay(DailyFoodRecord record) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.showDinner();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public ArrayList\u003cDouble\u003e getWeightProgress() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return weightRecord;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public ArrayList\u003cString\u003e getWeightProgressDays() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return weightRecordDays;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 83,
      "DDzuikeai": 63,
      "yuxianglim": 26
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Storage is the public class responsible for creating and managing the data files generated from the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private AppLogger appLogger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The object containing the list containing all current tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the directory that contains the data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String DIRECTORY_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains profile information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String PROFILE_FILE_PATH \u003d DIRECTORY_PATH + File.separator + \"profile.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /* To be implemented at a later stage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains food record information."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /* To be implemented at a later stage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String FOOD_RECORD_FILE_PATH \u003d DIRECTORY_PATH + File.separator + \"food-record.csv\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /* To be implemented at a later stage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains food nutritional information."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /* To be implemented at a later stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String NUTRITION_INFO_FILE_PATH \u003d \"data\" + File.separator + \"nutrition-info.csv\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Storage object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param ui the object containing user interface functions."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Storage(UI ui, AppLogger appLogger) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.appLogger \u003d appLogger;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadDataDirectory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadProfileFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        //this.loadFoodRecordFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the directory, if absent, creates a new directory."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadDataDirectory() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Path directoryPath \u003d Paths.get(DIRECTORY_PATH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!Files.exists(directoryPath)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                Files.createDirectory(directoryPath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                appLogger.writeInfoLog(\"New Directory created: \" + directoryPath.getFileName().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                appLogger.writeSevereLog(\"Error in creating new directory\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            appLogger.writeInfoLog(\"Existing Directory found: \" + directoryPath.getFileName().toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the data file in the directory, if absent, creates a new data file. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * If data file is present, loads the existing data from the file such that it is accessible by the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadProfileFile() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File profileData \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (profileData.createNewFile()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                appLogger.writeInfoLog(\"No existing Profile found, new file created: \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + profileData.getName().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.readProfileFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                appLogger.writeInfoLog(\"Existing Profile found: \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + profileData.getName().toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            appLogger.writeSevereLog(\"Error in Profile data file\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Reads the data file and parses the existing data in the file, converting it into tasks which is added into"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * the tasklist such that it is accessible by the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void readProfileFile() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File dukeData \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Scanner myReader \u003d new Scanner(dukeData);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String dataLine \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myReader.close();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Clears all content in the data file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void clearProfileFile() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Rewrites the data file to reflect the current data."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void rewriteProfileFile() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(PROFILE_FILE_PATH, false);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Appends a new line of data into the data file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeProfileFileLine() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            BufferedWriter myWriter \u003d new BufferedWriter(new FileWriter(PROFILE_FILE_PATH, true));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 170
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/CheckCaloriesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.DailyFoodRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class CheckCaloriesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String activityLevel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private double caloriesRequired;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    boolean isValidCommand \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param command The command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param description The description of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @throws InvalidFormatException If user input incorrect format for the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public CheckCaloriesCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.date \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.activityLevel \u003d descriptionArray[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        double basalMetabolicRate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (profile.getGender()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"Male\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 10 * profile.getWeight() + 6.25 * profile.getHeight() - 5 * profile.getAge() + 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"Female\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 10 * profile.getWeight() + 6.25 * profile.getHeight() - 5 * profile.getAge() - 161;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            isValidCommand \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (activityLevel) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.375;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"moderate\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.55;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.725;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            isValidCommand \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        if (isValidCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.result \u003d String.format(\"Calories Intake and Requirement for %s:\",date) + System.lineSeparator()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + record.showDailyCalories()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + String.format(\"Calories requirement for %s activity level: \",activityLevel)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + String.format(\"%.2f\", caloriesRequired) + \"cal.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (record.getDailyCalories().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                double caloriesIntake \u003d record.getDailyCalories().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003c profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003e\u003d caloriesRequired) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    this.result \u003d this.result + MessageBank.SUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003c profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003c caloriesRequired) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    this.result \u003d this.result + MessageBank.INSUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003e\u003d profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003e caloriesRequired) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    this.result \u003d this.result + MessageBank.EXCESS_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003e\u003d profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003c\u003d caloriesRequired) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    this.result \u003d this.result + MessageBank.SUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.result \u003d MessageBank.INVALID_CALORIES_REQUIREMENT_ERROR;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 87
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/CheckRecordCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.DailyFoodRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class CheckRecordCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String mealType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CheckRecordCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.date \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.mealType \u003d descriptionArray[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"breakfast\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.result \u003d date + \" Morning: \" + record.showBreakfast() + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"lunch\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.result \u003d date + \" Afternoon: \" + record.showLunch() + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"dinner\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.result \u003d date + \" Night: \" + record.showDinner() + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d MessageBank.MEAL_TYPE_ERROR;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 3,
      "DDzuikeai": 50
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/CheckWeightProgressCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static java.lang.Math.abs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class CheckWeightProgressCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String profileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private ArrayList\u003cDouble\u003e weightRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private ArrayList\u003cString\u003e weightRecordDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double initialWeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double currentWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightDifference;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public CheckWeightProgressCommand(String command, String description)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throws InvalidFormatException, NumberFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.profileName \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightRecord \u003d profile.getWeightProgress();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightRecordDays \u003d profile.getWeightProgressDays();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        ui.showCommandMessage(MessageBank.CHECK_WEIGHT_RECORD_MESSAGE); //Wil change this part later on"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        for (int i \u003d 0; i \u003c weightRecord.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            ui.showCommandMessage(i + 1 + \". \" + weightRecord.get(i) + \"kg \" + weightRecordDays.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        initialWeight \u003d weightRecord.get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        currentWeight \u003d weightRecord.get(weightRecord.size() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightDifference \u003d initialWeight - currentWeight;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (weightDifference \u003e 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            this.result \u003d String.format(MessageBank.WEIGHT_LOSS_MESSAGE, weightDifference);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else if (weightDifference \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            this.result \u003d MessageBank.WEIGHT_NO_CHANGE_MESSAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            this.result \u003d String.format(MessageBank.WEIGHT_GAIN_MESSAGE, abs(weightDifference));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 63
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Command is a public abstract class providing a skeletal implementation for"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * different commands and is responsible for storing the base information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * required in a command, allowing other more specific events to draw onto its"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * components."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The command prompt entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * The last execution result of the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    protected String result;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the command prompt entered by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the command prompt entered by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the last execution result of the command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the last execution result of the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Abstract method to save execution result of the command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile the profile that the command is dealing with."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public abstract void saveResult(Profile profile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Abstract method to execute the Command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param profile the object containing user profile information."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param ui      the object containing user interface functions."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public abstract void execute(Profile profile, UI ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 50,
      "DDzuikeai": 24
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/DeleteWeightCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class DeleteWeightCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightDeleted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String weightDeletedDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public DeleteWeightCommand(String command, String description)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throws InvalidFormatException, NumberFormatException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.index \u003d Integer.parseInt(descriptionArray[0]) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightDeleted \u003d profile.getWeightProgress().get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightDeletedDay \u003d profile.getWeightProgressDays().get(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        profile.getWeightProgress().remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        profile.getWeightProgressDays().remove(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.result \u003d weightDeleted + \"kg \" + weightDeletedDay + MessageBank.WEIGHT_DELETED_MESSAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 45
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public ExitCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile,UI ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.setExitStatus(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.saveResult(profile);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.EXIT_COMMAMD_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 25,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/ListFoodDatabaseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.FoodNutritionInfo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class ListFoodDatabaseCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private FoodNutritionInfo foodNutritionInfo \u003d new FoodNutritionInfo();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ListFoodDatabaseCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.result \u003d foodNutritionInfo.showFoodDatabase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 29
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/ProfileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public ProfileCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (profile.isProfileExist()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d MessageBank.WELCOME_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Age:          %d years old\", profile.getAge()) + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Gender:       %s\", profile.getGender()) + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Height:       %.2f centimetres\", profile.getHeight()) + System.lineSeparator()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Weight        %.2f kilograms\", profile.getWeight()) + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Weight Goal:  %.2f kilograms\", profile.getWeightGoal());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d MessageBank.PROFILE_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 25,
      "DDzuikeai": 13
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/RecordMealCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.DailyFoodRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.FoodNutritionInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class RecordMealCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String mealType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String[] foodDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    boolean isValidFoodFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public RecordMealCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.date \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.mealType \u003d descriptionArray[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.foodDescription \u003d descriptionArray[2].trim().split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.isValidFoodFormat \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String[] foodDescriptionSplit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String foodName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        int foodCalories;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        FoodNutritionInfo foodInfo \u003d new FoodNutritionInfo();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        for (String singleFoodDescription : foodDescription) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (singleFoodDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            foodDescriptionSplit \u003d singleFoodDescription.trim().split(\" -- \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            switch (foodDescriptionSplit.length) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                foodName \u003d foodDescriptionSplit[0].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                Food food;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (foodInfo.isInDatabase(foodName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    food \u003d foodInfo.findFood(foodName).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    food \u003d new Food(foodName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                foodList.add(food);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    foodName \u003d foodDescriptionSplit[0].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    foodCalories \u003d Integer.parseInt(foodDescriptionSplit[1].trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    foodList.add(new Food(foodName, foodCalories));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    isValidFoodFormat \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                isValidFoodFormat \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.recordMeals(mealType,foodList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean isValidType \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d MessageBank.BREAKFAST_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d MessageBank.LUNCH_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d MessageBank.DINNER_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            isValidType \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d MessageBank.MEAL_TYPE_ERROR;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        if (!isValidFoodFormat) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.result \u003d this.result + MessageBank.INVALID_FOOD_FORMAT_ERROR;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (isValidType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.result \u003d this.result + date + \".\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 40,
      "DDzuikeai": 64
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/SetAgeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetAgeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetAgeCommand(String command, String description) throws InvalidFormatException, NumberFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.age \u003d Integer.parseInt(descriptionArray[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setAge(this.age);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.AGE_CHANGE_MESSAGE + profile.getAge() + \".\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 29,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/SetGenderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetGenderCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetGenderCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.gender \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setGender(this.gender);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.GENDER_CHANGE_MESSAGE + profile.getGender() + \".\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 29,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/SetHeightCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetHeightCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetHeightCommand(String command, String description) throws InvalidFormatException, NumberFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.height \u003d Double.parseDouble(descriptionArray[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setHeight(this.height);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.HEIGHT_CHANGE_MESSAGE + String.format(\"%.2f.\",profile.getHeight());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 29,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/SetNameCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetNameCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetNameCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.name \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setName(this.name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.NAME_CHANGE_MESSAGE + profile.getName() + \".\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 29,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/SetProfileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetProfileCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 6;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public SetProfileCommand(String command, String description) throws InvalidFormatException,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            NumberFormatException, InvalidGenderException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.name \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.age \u003d Integer.parseInt(descriptionArray[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.gender \u003d Parser.parseGender(descriptionArray[2]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.height \u003d Double.parseDouble(descriptionArray[3]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weight \u003d Double.parseDouble(descriptionArray[4]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightGoal \u003d Double.parseDouble(descriptionArray[5]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(this.name, this.age, this.gender, this.height, this.weight, this.weightGoal);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.PROFILE_UPDATE_MESSAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 37,
      "lamyuewei": 4,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/SetWeightCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetWeightCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetWeightCommand(String command, String description) throws InvalidFormatException, NumberFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weight \u003d Double.parseDouble(descriptionArray[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.day \u003d descriptionArray[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        //profile.setWeight(this.weight);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        profile.addWeightProgress(weight, day);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.WEIGHT_CHANGE_MESSAGE + String.format(\"%.2f.\",profile.getWeight());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 27,
      "DDzuikeai": 7,
      "yuxianglim": 5
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/SetWeightGoalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetWeightGoalCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetWeightGoalCommand(String command, String description)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throws InvalidFormatException, NumberFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightGoal \u003d Double.parseDouble(descriptionArray[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setWeightGoal(this.weightGoal);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.result \u003d MessageBank.WEIGHT_GOAL_CHANGE_MESSAGE + String.format(\"%.2f.\",profile.getWeightGoal());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 30,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commands/WeightUpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package seedu.dietmanager.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.MessageBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class WeightUpdateCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightUpdate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public WeightUpdateCommand(String command, String description)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throws InvalidFormatException, NumberFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] descriptionArray \u003d Parser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.weightUpdate \u003d Double.parseDouble(descriptionArray[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.day \u003d descriptionArray[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        profile.addWeightProgress(weightUpdate, day);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        saveResult(profile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void saveResult(Profile profile) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.result \u003d MessageBank.WEIGHT_UPDATE_MESSAGE + String.format(\"%.2f.\",weightUpdate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 39
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/exceptions/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/exceptions/InvalidGenderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "package seedu.dietmanager.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class InvalidGenderException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commands.ProfileCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commands.SetAgeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commands.SetGenderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commands.SetHeightCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commands.SetNameCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commands.SetProfileCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commands.SetWeightCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.commands.RecordMealCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.commands.CheckRecordCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commands.SetWeightGoalCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commands.CheckWeightProgressCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commands.DeleteWeightCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.commands.WeightUpdateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.commands.CheckWeightProgressCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.commands.CheckCaloriesCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.commands.ListFoodDatabaseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Parser is the public class responsible for parsing user input and generating the relevant commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The command prompt entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String commandPrompt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The description of the command entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidCommandException if user input has too few arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void prepareInput(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] inputArray \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int numArguments \u003d inputArray.length;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        switch (numArguments) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            commandPrompt \u003d inputArray[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            commandPrompt \u003d inputArray[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            description \u003d inputArray[1].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description the command description."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param argumentsRequired the number of arguments required by the command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if user input has the wrong format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseDescription(String description, int argumentsRequired) throws InvalidFormatException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d description.trim().split(\" \", argumentsRequired);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @throws InvalidGenderException If gender is not recognized by our system."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String parseGender(String description) throws InvalidGenderException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String gender \u003d description.trim().toLowerCase();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        if (!(gender.equals(\"male\") || gender.equals(\"female\"))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            throw new InvalidGenderException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        if (gender.equals(\"male\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            gender \u003d \"Male\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        if (gender.equals(\"female\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            gender \u003d \"Female\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Analyses the user input and generates the relevant command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the command generated from the user input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidCommandException  if command is not supported by application."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException   if format for command is wrong."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static Command parseInput(String input) throws InvalidCommandException, InvalidFormatException,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            InvalidGenderException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        prepareInput(input);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        switch (commandPrompt) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"profile\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new ProfileCommand(commandPrompt);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-profile\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetProfileCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case\"set-name\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetNameCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case\"set-age\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetAgeCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case\"set-gender\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetGenderCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case\"set-height\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetHeightCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case\"set-weight\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetWeightCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case\"set-weight-goal\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetWeightGoalCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"record-meal\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new RecordMealCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"check-meal\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new CheckRecordCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new ExitCommand(commandPrompt);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        case \"check-weight-progress\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            command \u003d new CheckWeightProgressCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"check-calories-intake\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            command \u003d new CheckCaloriesCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"list-food-database\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            command \u003d new ListFoodDatabaseCommand(commandPrompt);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        case \"delete-weight\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            command \u003d new DeleteWeightCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 111,
      "lamyuewei": 33,
      "DDzuikeai": 8,
      "yuxianglim": 13
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/ui/MessageBank.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class MessageBank {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String LOGO \u003d \"  _____   _        _     __  __\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" |  __ \\\\ (_)      | |   |  \\\\/  |\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |  | | _   ___ | |_  | \\\\  / |  __ _  _ __    __ _   __ _   ___  _ __\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |  | || | / _ \\\\| __| | |\\\\/| | / _` || \u0027_ \\\\  / _` | / _` | / _ \\\\| \u0027__|\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |__| || ||  __/| |_  | |  | || (_| || | | || (_| || (_| ||  __/| |\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" |_____/ |_| \\\\___| \\\\__| |_|  |_| \\\\__,_||_| |_| \\\\__,_| \\\\__, | \\\\___||_|\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"                                                       __/ |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"                                                      |___/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String WELCOME_MESSAGE \u003d \"Welcome to Diet Manager! How may I assist you today?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_COMMAND_MESSAGE \u003d \"Sorry, the command you have entered is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_FORMAT_MESSAGE \u003d \"Sorry, that is an invalid command format.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INVALID_GENDER_MESSAGE \u003d \"Sorry, that is an invalid gender.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String FILE_ERROR_MESSAGE \u003d \"An error has occurred with the data files.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String EXIT_COMMAMD_MESSAGE \u003d \"Thank you and see you again soon!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String EXIT_APP_MESSAGE \u003d \"Thanks for using Diet Manager! See you again soon. :)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String NAME_CHANGE_MESSAGE \u003d \"Your username has been changed to \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String GENDER_CHANGE_MESSAGE \u003d \"Your gender has been changed to \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String HEIGHT_CHANGE_MESSAGE \u003d \"Your height has been changed to \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String AGE_CHANGE_MESSAGE \u003d \"Your age has been changed to \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String WEIGHT_CHANGE_MESSAGE \u003d \"Your weight has been changed to \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String WEIGHT_GOAL_CHANGE_MESSAGE \u003d \"Your weight goal has been changed to \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String PROFILE_UPDATE_MESSAGE \u003d \"Your profile has been successfully updated.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String PROFILE_NOT_FOUND_MESSAGE \u003d \"No existing profile found. To create a new profile, enter:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"set-profile {name} {age} {gender} {height} {weight} {weight goal}\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String BREAKFAST_RECORD_MESSAGE \u003d \"You just record the meal in the morning of: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String LUNCH_RECORD_MESSAGE \u003d \"You just record the meal in the afternoon of: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String DINNER_RECORD_MESSAGE \u003d \"You just record the meal in the night of: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String MEAL_TYPE_ERROR \u003d \"You have given wrong description of time!!! \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"Choose from: morning/afternoon/night.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_UPDATE_MESSAGE \u003d \"Your weight changes has been stored. Current weight is: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String CHECK_WEIGHT_RECORD_MESSAGE \u003d \"Here is your weight changes record:\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String DUMMY_MESSAGE \u003d \"No pain no gain! Continue striving on!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_DELETED_MESSAGE \u003d \" has been removed successfully!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String INVALID_INDEX \u003d \"Invalid index of weight! Please check and try again.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_LOSS_MESSAGE \u003d \"Great job! You have lost %.2f kg since the beginning!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_NO_CHANGE_MESSAGE \u003d \"No Pain No Gain! You have not lost weight yet! Strive on!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String  WEIGHT_GAIN_MESSAGE \u003d \"Maintain your diet! You have gained %.2f kg since the beginning!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String FOOD_DATABASE_MESSAGE \u003d \"These are the foods stored in our database:\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INVALID_FOOD_FORMAT_ERROR \u003d \"Some food/foods are not added due to invalid format.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String CALORIES_MESSAGE \u003d \"Total calculable calories intake for the entire day: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String TIME_CALORIES_MESSAGE \u003d \"total calculable calories intake: \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String MISSING_CALORIES_MESSAGE \u003d \"NOTE: There are foods without calculable calories.\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String NO_CALORIES_MESSAGE \u003d \"There are no calculable calories data for the entire day.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String NO_TIME_CALORIES_MESSAGE \u003d \"there are no calculable calories data.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INVALID_CALORIES_REQUIREMENT_ERROR \u003d \"You have given invalid activity level.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String SUFFICIENT_CALORIES_MESSAGE \u003d \"Well done!!! You have consumed sufficient calories\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INSUFFICIENT_CALORIES_MESSAGE \u003d \"Ohh no!!! You have consumed too little calories\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String EXCESS_CALORIES_MESSAGE \u003d \"Ohh no!!! You have consumed too much calories\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 18,
      "lamyuewei": 12,
      "DDzuikeai": 16,
      "yuxianglim": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * UI is the public class responsible for managing all user interface functions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The exit status determining whether to close the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean exitStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the UI object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.exitStatus \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Prints the welcome message for the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        System.out.println(MessageBank.LOGO);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        System.out.println(MessageBank.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayExitMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(MessageBank.EXIT_APP_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayFileErrorMessage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        System.out.println(MessageBank.FILE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayInvalidCommandMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        System.out.println(MessageBank.INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayInvalidFormatMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        System.out.println(MessageBank.INVALID_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void displayIndexOutOfBoundMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(MessageBank.INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public void displayInvalidGenderMessage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        System.out.println(MessageBank.INVALID_GENDER_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showExecutionResult(String result) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the exit status."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the exit status."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean isExitStatus() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.exitStatus;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Updates the exit status."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param update the updated exit status."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setExitStatus(boolean update) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.exitStatus \u003d update;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the next line of user input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Show messages from executing commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param message String fo message to be shown to user"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void showCommandMessage(String... message) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(m);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 77,
      "lamyuewei": 4,
      "DDzuikeai": 5,
      "yuxianglim": 15
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/DietManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class DietManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/ProfileTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class ProfileTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setName(\"Jane Doe\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Jane Doe\", profile.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setGender() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setGender(\"Female\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Female\", profile.getGender());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setAge() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setAge(18);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(18, profile.getAge());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setHeight() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setHeight(170);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(170, profile.getHeight());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setWeightGoal() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setWeightGoal(50);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(50, profile.getWeightGoal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setProfileExist() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfileExist(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(false, profile.isProfileExist());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void isProfileExist() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(true, profile.isProfileExist());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getHeight() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(180, profile.getHeight());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getWeight() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(80, profile.getWeight());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getWeightGoal() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(75, profile.getWeightGoal());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getAge() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(20, profile.getAge());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getGender() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Male\", profile.getGender());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"John Doe\", profile.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 105
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1
    }
  }
]
