[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "group \u0027seedu.dietmanager\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    mainClassName \u003d \"seedu.dietmanager.DietManager\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    archiveBaseName \u003d \"DietManager\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    archiveVersion \u003d \"1.0.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 5,
      "-": 36
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan De Jun | [Github](https://github.com/dejunnn) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yu Xiang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lam Yue Wei | [Github](https://github.com/lamyuewei) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chenghao | [Github](https://github.com/DDzuikeai) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "lamyuewei": 1,
      "DDzuikeai": 1,
      "-": 4,
      "yuxianglim": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "# Developer Guide - Diet Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. [Design](#design)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. [Implementation](#implementation)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. [Product Scope](#product-scope)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. [User Stories](#user-stories)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "4. [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "5. [Glossary](#glossary)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "6. [Instructions for Manual Testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![ArchitectureDiagram](images/Architecture.png)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the Diet Manager Application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The components involved are given below:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`UI`: The user interface of the application"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`Storage`: Reads data from and writes data to the specified data files"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`Parser`: Reads the given user input and breaks it down into machine-readable code"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`Profile`: Stores and records the user\u0027s profile information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "The `Logic` component is responsible for:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Arranging the whole workflow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Deciding how functional components interact with each other. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "The Logic consists of the following class:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* DietManager-Arranges the main workflow of the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `UI` component is responsible for:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Receiving all command line inputs from the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Displaying all system outputs to the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The UI consists of the following classes: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `UI` - Reads user input and displays system output"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `MessageBank` - Stores all standard system output messages"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Storage` component is responsible for:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Managing the respective data files"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Storing all system logs generated from the application"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Storage consists of the following classes: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Storage` - Stores all user profile information in respective data files"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `AppLogger` - Stores all system logs generated from the application"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Parser component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Parser` component is responsible for:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Reading user input and breaking it down to machine-readable code"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Parser consists of the following classes: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Parser` - Breaks down inputs into machine-readable code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Profile component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Profile` component is responsible for:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Storing all user profile information"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Profile consists of the following classes: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Profile` - "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `DailyFoodRecord` - "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Food component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Food` component is responsible for:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Food consists of the following classes: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Food` - "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `FoodNutritionInfo` - "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### 1. [Proposed] Record Meal Feature"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### 1.1 Proposed implementation"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "The record feature is facilitated by `RecordMealCommand`. It extends `Command` and overrides `execute()` and `saveResults()`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Given below is an example usage scenario and how the record mechanism behaves at each step."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Step 1.  The `ui` object gets user input and sends it to the `parser`. The `parser` then parses the original input into a standard `command`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "and returns it. The command type is decided by the `commandPrompt`. The `RecordMealCommand` has `record-meal` as its commandPrompt. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During the process a new`RecordMealCommand` object will be generated and returned to the `Logic` component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Step1. Generate command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![Step1. Diagram](images/Record_step1.png)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Step 2.  The `Logic` composition calls the `execute()` method of the `RecordMealCommand` object. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During the process of execution, the command object will generate a `ArrayList\u003cFood\u003e foodList`, which maintains all `Food` items listed in the user input. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "If a certain kind of `Food` can be found in the database of `FoodNuritionInfo`, then this food item will be fetched from the database. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Else a new food object will be generated simply with `foodName` without all the nutrition info."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During execution, the command object will try to get a `record` object of the class `DailyFoodRecord`. The date of record is specified by the user. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "If no record of that day is found in profile, it will automatically generate a new record of the day. Then with `foodList` and `record`, can call "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "the method `record.recordMeals()`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Step2. Execute and Save Result"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![Step2. Diagram](images/Record_step2.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### 1.2 Design Considerations"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Aspect: How `RecordMealCommand` executes and save results"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 1 (current choice): Directly operate on the `Profile` object, more specifically, the `DailyFoodRecord` attribute in `Profile` object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "And save execution `results` in the `RecordMealCommand` object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: Logic is clear and easy to implement."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: `Command` object has full access to `Profile` object, which is not safe. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 2: `RecordMealCommand` can only operate on `DailyFoodRecord` of the `Profile`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: Reduce dependency and potential risks. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: Different types of `Command` need different declarations/interface for `command.execute()` method. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Aspect : Data structure to support the command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 1 (current choice): Use a list to store daily food record for a profile."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: Easy to implement and understand"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: The list is maintained by a `Profile` object. Can lead to more duties for a `Profile` object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 2: Use a `FoodHistoryManager` to keep record of daily meals."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: More OOP."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: Makes the execution procedure more complex."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## Product Scope"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Students who are too busy with work to carefully monitor their eating habits, and are concerned about their health."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager aims to achieve the following:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Streamline the diet recording process "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Allow users to track and monitor their eating habits"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Provide personalised information and recommendations for the user"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for Manual Testing"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 82,
      "DDzuikeai": 52,
      "-": 31
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "3. [Features](#3-features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    1. [Set user profile](#31-set-user-profile)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    2. [View user profile](#32-view-user-profile)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    3. [Record meals](#33-record-meals)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    4. [Check meals](#34-check-meals)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    5. [Check required calories](#35-check-required-calories)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    6. [Calculate calories](#36-calculate-calories)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    7. [List food database](#37-list-food-database)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    8. [Add food into database](#38-add-food-into-database)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    9. [Delete food from database](#39-delete-food-from-database)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    10. [Get a recommended recipe](#310-get-a-recommended-recipe)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    11. [View recipe](#311-view-recipe)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    11. [Check Weight Progress](#312-check-weight-progress)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    12. [Update Weight](#313-update-weight-progress)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    13. [Delete weight](#314-delete-weight-progress)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    14. [Help](#315-help)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    15. [Exit application](#316-exit-application)    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "4. [FAQ](#4-faq)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "5. [Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 1 Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager is an personal text-based chat-bot application used for managing an individual\u0027s diet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager is capable of tracking daily food intake and providing recommendations depending on a user\u0027s specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "health data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 2 Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Ensure that you have Java 11 or above installed in your Computer. \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Download the latest version of DietManager-2.0.0.jar [here](https://github.com/AY1920S2-CS2113-T15-4/tp/releases). \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Open and run the jar file by entering the following command in Windows PowerShell or Git Bash:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        java -jar DietManager-2.0.0.jar"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 3 Features "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### 3.1 Set user profile"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Creates a new profile"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If profile doesn\u0027t exist, the command will generate a new `Profile` object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If profile already exist, the command will automatically update profile info."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`set-profile John 20 male 180 80 75`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Your profile has been successfully updated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If enter `profile` again, you will expect to see:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Welcome to Diet Manager! How may I assist you today?"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Age:          20 years old"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Gender:       Male"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Height:       180.00 centimetres"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Weight        80.00 kilograms"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Weight Goal:  75.00 kilograms"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### 3.2 View user profile"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Views user profile details"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `profile`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If profile information is present, displays it to the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If profile information is absent, prompts user to enter profile information."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`profile`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If `profile` doesn\u0027t exist"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "No existing profile found. To create a new profile, enter:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "set-profile {name} {age} {gender} {height} {weight} {weight goal}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If `profile` already exists"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Welcome to Diet Manager! How may I assist you today?"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Age:          18 years old"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Gender:       Male"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Height:       180.00 centimetres"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Weight        65.00 kilograms"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Weight Goal:  75.00 kilograms"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### 3.3 Record meals"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Records meals for the user(so they can refer record history and calculate calories intake later)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `record-meal DATE TIMEPERIOD /FOOD1 {-- 10.0} /FOOD2 {-- 6.00} /...`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Parameters in `{}` is optional, it denotes the calories content of the `Food`. Also notice that you shouldn\u0027t use `{}`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "in the actual input!"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * If a `Food` item can be found in our database, then no calories info needs to be "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "provided. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * If no calories info is provided for a `Food` item not in our database, the `record`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    operation can still go on, but that `Food` item doesn\u0027t have calories info."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* You can record as many `Food` items as you want for a meal."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `DATE` is restricted to the range of `Monday` to `Sunday` and `TIMEPERIOD` is restricted to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`morning/afternoon/night`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If a `Food` item is provided with incorrect calories info(like `/egg -- wow`), then this `Food` item"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "won\u0027t be recorded."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`record-meal Saturday morning /egg prata -- 5 /noodles -- xxx`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "You just record the meal in the morning of: SATURDAY."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Some food/foods are not added due to invalid format."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If enter `check-meal Saturday morning` right now, you expect to see:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "SATURDAY Morning: "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: egg prata, Calories: 5.00cal"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "For morning, total calculable calories intake: 5.00cal."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### 3.4 Check meals"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Check what the `profile` had eaten for a meal."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `check-meal DATE TIMEPERIOD`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `DATE` is restricted to the range of `Monday` to `Sunday` and `TIMEPERIOD` is restricted to"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  `morning/afternoon/night`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`check-meal Monday morning`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If the record doesn\u0027t exist:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY Morning: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Oops, you have no record for this meal."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    For morning, there are no calculable calories data."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If the record exists:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY Morning: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Food: egg prata, Calories: 5.00cal"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Food: noodles, Calories: 2.00cal"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    For morning, total calculable calories intake: 7.00cal."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.5 Check required calories"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Check the required calories for the current `profile` based on the activity level for the day."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Format: `check-required-cal DATE ACTIVITYLEVEL`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "`DATE` is restricted to the range of `Monday` to `Sunday`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "`ACTIVITYLEVEL` is restricted to `low`, `moderate` or `high`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "`check-required-cal Monday low`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* If the profile is trying to gain weight but is having insufficient calories for the day:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories Intake and Requirement for SATURDAY:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Total calculable calories intake for the entire day: 5.00cal."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories requirement for high activity level: 2848.41cal."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Ohh no!!! You have consumed too little calories."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* If the profile is trying to lose weight but is having excess calories for the day:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories Intake and Requirement for WEDNESDAY:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Total calculable calories intake for the entire day: 2805.00cal."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories requirement for moderate activity level: 2559.44cal."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Ohh no!!! You have consumed too much calories"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* If the profile is working towards the weight goal and is having sufficient calories for the day:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories Intake and Requirement for MONDAY:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Total calculable calories intake for the entire day: 2860.00cal."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories requirement for low activity level: 2270.47cal."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Well done!!! You have consumed sufficient calories."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.6 Calculate calories"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Calculates calories intake on a day or during a time period."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Option 1: `calculate {DATE}`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Option 2: `calculate {DATE1}-\u003e{DATE2}`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`DATE` is restricted to the range of `Monday` to `Sunday`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* First let\u0027s record some meals"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  record-meal Monday morning /egg -- 2"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  You just record the meal in the morning of: MONDAY."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  record-meal Monday night /Apple"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  You just record the meal in the night of: MONDAY."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  record-meal Wednesday morning /prata -- 5 /beef -- 10"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  You just record the meal in the morning of: WEDNESDAY."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Then we calculate calories intake from Monday to Wednesday"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  calculate Monday-\u003eWednesday"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  Your Calories intake during the given period is 19.00."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "  * Notice `Apple` is in our database with calories info: 2.00"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.7 List food database"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Lists all foods and relevant calories info recorded in our database."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `list-food`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: `list-food`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "These are the foods stored in our database:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Chicken, Calories: 1.00cal"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Apple, Calories: 2.00cal"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Carrots, Calories: 3.00cal"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Rice, Calories: 4.00cal"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Oil, Calories: 5.00cal"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Tea, Calories: 6.00cal"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.8 Add food into database"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Adds a new food into database."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `addf FOODNAME --CALORIES`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: `addf beef noodles -- 7.0`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "You have added a new food into the database:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: beef noodles, Calories: 7.0"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention: If calories info is incorrect, you expect to see:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Sorry, to add new food to database you must input correct calories info."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "It has to be positive Integer or Float"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.9 Delete food from database"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Deletes a food from the database"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `delf FOODNAME`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If `beef noodles` already in database:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    You have just deleted beef noodles from the database."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If `beef noodles` not in database:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    No need to delete! Referred Food doesn\u0027t exist in database"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.10 Get a recommended recipe"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Get a recommend recipe based on user\u0027s physical conditions and activity level."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `new-recipe MAXIMUM_FODD_TYPES ACTIVITY_LEVEL`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Explanation: "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "MAXIMUM_FOOD_TYPES is the maximum number of food types the user want to have in a meal. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "ACTIVITY_LEVEL has three levels : low/moderate/high. Based on different activity levels the app recommends different recipes."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "1.  The maximum number of allowed food types in a meal is 4."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "2.  The recipe is generated randomly, so the same input is expected to get different recipe."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "3.  If user is unsatisfied with the current recipe, just run the command again and get a new one."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `MAXIMUM_NUM` is 2, `ACTIVITY_LEVEL` is low:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Input: `new-recipe 2 low`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output: "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "               morning                                                     afternoon                                                   night"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     MONDAY    Carrots(3.00),Tea(6.00)                                     Tea(6.00),Chicken(1.00)                                     Chicken(1.00),Carrots(3.00)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     TUESDAY   Oil(5.00),Rice(4.00)                                        Chicken(1.00),Oil(5.00)                                     Apple(2.00),Rice(4.00)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     WEDNESDAY Rice(4.00),Tea(6.00)                                        Oil(5.00),Carrots(3.00)                                     Oil(5.00),Chicken(1.00)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     THURSDAY  Carrots(3.00),Rice(4.00)                                    Chicken(1.00),Rice(4.00)                                    Oil(5.00),Apple(2.00)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     FRIDAY    Chicken(1.00),Rice(4.00)                                    Carrots(3.00),Oil(5.00)                                     Tea(6.00),Oil(5.00)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     SATURDAY  Carrots(3.00),Chicken(1.00)                                 Oil(5.00),Apple(2.00)                                       Apple(2.00),Tea(6.00)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     SUNDAY    Apple(2.00),Oil(5.00)                                       Rice(4.00),Oil(5.00)                                        Rice(4.00),Carrots(3.00)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `MAXIMUM_NUM` is 5, `ACTIVITY_LEVEL` is high:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Input: `new-recipe 5 high`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    We support at most 4 kinds of food in a meal, otherwise it\u0027s not good for your health!"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "              morning                                                     afternoon                                                   night"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY    Tea(6.00),Chicken(1.00),Rice(4.00),Oil(5.00)                Tea(6.00),Oil(5.00),Apple(2.00),Carrots(3.00)               Apple(2.00),Oil(5.00),Rice(4.00),Chicken(1.00)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    TUESDAY   Apple(2.00),Chicken(1.00),Rice(4.00),Carrots(3.00)          Carrots(3.00),Rice(4.00),Oil(5.00),Tea(6.00)                Oil(5.00),Apple(2.00),Chicken(1.00),Tea(6.00)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    WEDNESDAY Carrots(3.00),Tea(6.00),Apple(2.00),Rice(4.00)              Tea(6.00),Carrots(3.00),Oil(5.00),Chicken(1.00)             Tea(6.00),Apple(2.00),Rice(4.00),Oil(5.00)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY  Oil(5.00),Carrots(3.00),Apple(2.00),Tea(6.00)               Carrots(3.00),Rice(4.00),Chicken(1.00),Apple(2.00)          Oil(5.00),Chicken(1.00),Tea(6.00),Rice(4.00)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    FRIDAY    Carrots(3.00),Oil(5.00),Apple(2.00),Chicken(1.00)           Apple(2.00),Oil(5.00),Carrots(3.00),Rice(4.00)              Tea(6.00),Apple(2.00),Rice(4.00),Chicken(1.00)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SATURDAY  Apple(2.00),Carrots(3.00),Chicken(1.00),Tea(6.00)           Apple(2.00),Rice(4.00),Carrots(3.00),Tea(6.00)              Rice(4.00),Apple(2.00),Carrots(3.00),Chicken(1.00)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY    Chicken(1.00),Rice(4.00),Apple(2.00),Oil(5.00)              Oil(5.00),Rice(4.00),Apple(2.00),Chicken(1.00)              Rice(4.00),Tea(6.00),Chicken(1.00),Carrots(3.00)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.11 View recipe"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Show the recipe recommended for the user."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `show-recipe`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:`show-recipe`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If no recipe exists:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "              morning                                                     afternoon                                                   night"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY                                                                                                                           "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    TUESDAY                                                                                                                          "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    WEDNESDAY                                                                                                                        "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY                                                                                                                         "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    FRIDAY                                                                                                                           "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SATURDAY                                                                                                                         "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY                                                                                                                           "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If recipe exists:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "              morning                                                     afternoon                                                   night"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY    Carrots(3.00),Apple(2.00)                                   Apple(2.00),Carrots(3.00)                                   Chicken(1.00),Rice(4.00)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    TUESDAY   Rice(4.00),Chicken(1.00)                                    Chicken(1.00),Rice(4.00)                                    Chicken(1.00),Apple(2.00)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    WEDNESDAY Chicken(1.00),Rice(4.00)                                    Rice(4.00),Chicken(1.00)                                    Chicken(1.00),Rice(4.00)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY  Carrots(3.00),Chicken(1.00)                                 Chicken(1.00),Carrots(3.00)                                 Rice(4.00),Chicken(1.00)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    FRIDAY    Carrots(3.00),Chicken(1.00)                                 Chicken(1.00),Rice(4.00)                                    Chicken(1.00),Rice(4.00)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SATURDAY  Chicken(1.00),Carrots(3.00)                                 Apple(2.00),Chicken(1.00)                                   Carrots(3.00),Apple(2.00)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY    Chicken(1.00),Apple(2.00)                                   Rice(4.00),Chicken(1.00)                                    Rice(4.00),Chicken(1.00)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.12 Check Weight Progress"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Check current weight progress from the beginning."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Format: `check-weight-progress JOHN`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Example of usage:`check-weight-progress JOHN`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* If there is weight loss from beginning:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         check-weight-progress JOHN"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         Here is your weight changes record:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         1. 80.0kg "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         2. 70.0kg "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         3. 50.0kg "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         Great job! You have lost 30.00 kg since the beginning!                                                                                     "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* If weight remains the same from beginning:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         Here is your weight changes record:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         1. 80.0kg "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         No Pain No Gain! You have not lost weight yet! Strive on!"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                                                                  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* If there is weight gained from beginning:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         check-weight-progress JOHN"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         Here is your weight changes record:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         1. 80.0kg "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         2. 90.0kg "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "         Maintain your diet! You have gained 10.00 kg since the beginning!"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                                                                  "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```  "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.13 Update Weight Progress"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Update weight in profile when there is changes to user\u0027s weight after following diet plan."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "This will allow the program to keep track of user\u0027s weight along the entire period."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Format: `update-weight 70`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Expected Output:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        update-weight 70"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Your weight has been changed to 70.00."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                                                                      "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.14 Delete Weight Progress"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Allows user to delete wrong weight input or remove any previous input weights in the profile."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Format: `delete-weight 2`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "1. First, use the command `check-weight-progress NAME` to list out the stored weights in the user\u0027s profile."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "2. Then delete the weight base on the index linked to the weight stored using `delete-weight INDEX` command."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Example of the process"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        check-weight-progress JOHN"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Here is your weight changes record:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        1. 80.0kg "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        2. 70.0kg "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Great job! You have lost 10.00 kg since the beginning!"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        delete-weight 2"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Weight Record: 70.0kg  has been removed successfully!"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                                                                      "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.15 Help"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Show the help function table with the list of commands available"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Shows the help table."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    Example of usage: "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    `help`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    Expected Outcome:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     _____________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |                          Functions:                        |                 Descriptions:                  |"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |____________________________________________________________|________________________________________________|"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL     |  set user\u0027s profile data                       |"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   profile                                                  |  View user profile details                     |"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   record-meal DATE TIME_PERIOD /FOOD_NAME -- CALORIE       |  Record meal info                              |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   check-meal DATE TIME_PERIOD                              |  Check meals eaten                             |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   calculate DATE                                           |  Calculate Calorie intake for the day          |"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   calculate DATE1-\u003eDATE2                                   |  Calculate Calorie intake from DATE1 to DATE2  |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   list-food                                                |  Lists all foods info in database.             |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   addf FOOD_NAME --CALORIES                                |  Add new food info into database               |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   delf FOOD_NAME                                           |  Delete food info from database                |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   update-weight                                            |  Update weight in user profile                 |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   check-weight-progress NAME                               |  List index of weight progress                 |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   delete-weight INDEX                                      |  Delete weight from the weight progress list   |"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   new-recipe MAXIMUM_FOOD_TYPES ACTIVITY_LEVEL             |  Randomly recommend recipe from database       |"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   show-recipe                                              |  Show recommended recipe to user               |"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   help                                                     |  Show this function help table                 |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   exit                                                     |  Exit the application                          |"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |____________________________________________________________|________________________________________________|"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### 3.16 Exit application"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Terminates and exits the application"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Terminates the application."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Example of usage: "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    `exit`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Outcome:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "  "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Thanks for using Diet Manager! See you again soon :)"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 4 FAQ"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**Q**: How do I transfer my dietary and health data to another computer? "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**A**: All recorded user-related data will be stored in a folder when running the application. "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Simply copying and moving that specific folder would be sufficient."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 5 Command Summary"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "No. | Command | Description"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "----| ------- | -----------"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "1  | `set-profile` | Set up user profile"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "2  | `profile` | View user profile"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "3  | `record-meal` | Record a meal"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "4  | `check-meal` | Check a meal "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "5  | `check-required-cal` | Check calories required for an activity level"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "6  | `calculate` | Calculates calories intake on a day or during a time period"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "7  | `list-food` | List all foods recorded in the database "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "8  | `addf` | Add a new food into database"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "9  | `delf` | Delete a food from the database"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "10 | `new-recipe` | Create a recommended recipe for user"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "11 | `show-recipe` | Show the recipe recommended for user"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "12 | `update-weight` | Update user\u0027s weight changes"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "13 | `check-weight-progress` | Check user\u0027s weight progress"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "14 | `delete-weight` | Delete user\u0027s weight from progress"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "15 | `help` | Show the help function table"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "16 | `exit` | Exit application"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 14,
      "lamyuewei": 76,
      "DDzuikeai": 313,
      "-": 24,
      "yuxianglim": 117
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/DietManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.LogsCentre;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class DietManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static LogsCentre logsCentre;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static FoodNutritionRecord foodNutritionRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Profile profile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static UI ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Begins the application and creates the relevant objects required for the application to function."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        initialiseApplication();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        runApplication();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void runApplication() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logsCentre.logExecuteProgramme();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.displayWelcomeMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        ui.displayHelpMenu();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        while (!ui.isExitStatus()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String userInput \u003d ui.readInput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                Command command \u003d CommandParser.parseInput(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                Result result \u003d command.execute(profile, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                ui.showMessage(result.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (InvalidFormatException | NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayInvalidFormatMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayInvalidCommandMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                ui.displayIndexOutOfBoundMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (profile.isProfileExist()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                storage.writeProfileFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            storage.writeFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        ui.displayExitMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logsCentre.logExitProgramme();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void initialiseApplication() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logsCentre \u003d new LogsCentre();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile \u003d new Profile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecord \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        storage \u003d new Storage(ui, logsCentre, profile, foodNutritionRecord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void testAssertions() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert !ui.isExitStatus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 69,
      "DDzuikeai": 1,
      "yuxianglim": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/core/LogsCentre.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class LogsCentre {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final String LOGGER_FILE_NAME \u003d \"DietManagerLogger.log\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the InfoLogger to record information when running the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public LogsCentre() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger \u003d Logger.getLogger(LogsCentre.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.initialiseConsoleHandler();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.initialiseFileHandler();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Initialises the File Handler, and sets Log Level priority at FINE."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void initialiseFileHandler() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(LOGGER_FILE_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            fileHandler.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.logger.log(Level.SEVERE, \"File logger error.\", e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Initialises the Console Handler, and sets Log Level priority at INFO."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void initialiseConsoleHandler() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        //Console Handler - What appears in the console"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        consoleHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeFineLog(String message) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.FINE, message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeInfoLog(String message) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeWarningLog(String message) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.WARNING, message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeSevereLog(String message) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.SEVERE, message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void logExecuteProgramme() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, \"Starting Diet Manager\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void logExitProgramme() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, \"Exiting Diet Manager\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 79
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/core/MessageBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class MessageBank {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String LOGO \u003d \"  _____   _        _     __  __\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" |  __ \\\\ (_)      | |   |  \\\\/  |\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |  | | _   ___ | |_  | \\\\  / |  __ _  _ __    __ _   __ _   ___  _ __\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |  | || | / _ \\\\| __| | |\\\\/| | / _` || \u0027_ \\\\  / _` | / _` | / _ \\\\| \u0027__|\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |__| || ||  __/| |_  | |  | || (_| || | | || (_| || (_| ||  __/| |\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" |_____/ |_| \\\\___| \\\\__| |_|  |_| \\\\__,_||_| |_| \\\\__,_| \\\\__, | \\\\___||_|\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"                                                       __/ |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"                                                      |___/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String WELCOME_MESSAGE \u003d \"Welcome to Diet Manager! How may I assist you today?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_COMMAND_MESSAGE \u003d \"Sorry, the command you have entered is invalid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_FORMAT_MESSAGE \u003d \"Sorry, that is an invalid command format.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INVALID_GENDER_MESSAGE \u003d \"Sorry, that is an invalid gender.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String FILE_ERROR_MESSAGE \u003d \"An error has occurred with the data files.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String EXIT_COMMAMD_MESSAGE \u003d \"Thank you and see you again soon!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String EXIT_APP_MESSAGE \u003d \"Thanks for using Diet Manager! See you again soon. :)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String NAME_CHANGE_MESSAGE \u003d \"Your username has been changed to \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String GENDER_CHANGE_MESSAGE \u003d \"Your gender has been changed to \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String HEIGHT_CHANGE_MESSAGE \u003d \"Your height has been changed to \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String AGE_CHANGE_MESSAGE \u003d \"Your age has been changed to \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String WEIGHT_CHANGE_MESSAGE \u003d \"Your weight has been changed to \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String WEIGHT_GOAL_CHANGE_MESSAGE \u003d \"Your weight goal has been changed to \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String PROFILE_UPDATE_MESSAGE \u003d \"Your profile has been successfully updated.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String PROFILE_NOT_FOUND_MESSAGE \u003d \"No existing profile found. To create a new profile, enter:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"set-profile {name} {age} {gender} {height} {weight} {weight goal}\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String BREAKFAST_RECORD_MESSAGE \u003d \"You just record the meal in the morning of: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String LUNCH_RECORD_MESSAGE \u003d \"You just record the meal in the afternoon of: \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String DINNER_RECORD_MESSAGE \u003d \"You just record the meal in the night of: \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String MEAL_TYPE_ERROR \u003d \"You have given wrong description of time!!! \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"Choose from: morning/afternoon/night.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_UPDATE_MESSAGE \u003d \"Your weight changes has been stored. Current weight is: \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String CHECK_WEIGHT_RECORD_MESSAGE \u003d \"Here is your weight changes record:\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String DUMMY_MESSAGE \u003d \"No pain no gain! Continue striving on!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_DELETED_MESSAGE \u003d \" has been removed successfully!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String INVALID_INDEX \u003d \"Invalid index of weight! Please check and try again.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_LOSS_MESSAGE \u003d \"Great job! You have lost %.2f kg since the beginning!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_NO_CHANGE_MESSAGE \u003d \"No Pain No Gain! You have not lost weight yet! Strive on!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_GAIN_MESSAGE \u003d \"Maintain your diet! You have gained %.2f kg since the beginning!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String FOOD_DATABASE_MESSAGE \u003d \"These are the foods stored in our database:\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String INVALID_FOOD_FORMAT_ERROR \u003d \"Some food/foods are not added due to invalid calories info.\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String CALORIES_MESSAGE \u003d \"Total calculable calories intake for the entire day: \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String TIME_CALORIES_MESSAGE \u003d \"total calculable calories intake: \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String MISSING_CALORIES_MESSAGE \u003d \"NOTE: There are foods without calculable calories.\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String NO_CALORIES_MESSAGE \u003d \"There are no calculable calories data for the entire day.\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String NO_TIME_CALORIES_MESSAGE \u003d \"there are no calculable calories data.\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INVALID_CALORIES_REQUIREMENT_ERROR \u003d \"You have given invalid activity level.\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String SUFFICIENT_CALORIES_MESSAGE \u003d \"Well done!!! You have consumed sufficient calories.\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INSUFFICIENT_CALORIES_MESSAGE \u003d \"Ohh no!!! You have consumed too little calories.\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String EXCESS_CALORIES_MESSAGE \u003d \"Ohh no!!! You have consumed too much calories.\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String CALCULATE_CALORIES_MESSAGE \u003d \"Your Calories intake during the given period is \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String NO_DESCRIPTION_MESSAGE \u003d \"This command must follow by description! Please input again!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String INVALID_DATE_MESSAGE \u003d \"You should choose a date from {Monday} to {Sunday}! \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"Either uppercase or lowercase is supported!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String SPLIT_LINE \u003d \"----------------------------------------------------------------\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_PROFILE_MESSAGE \u003d \"Invalid profile detected. \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"Please set a new profile using the set-profile command.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String FUNCTION_LIST \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            \" _______________________________________________________________________\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"______________________________________\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|                          Functions:                        |\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"                 Descriptions:                  |\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|____________________________________________________________|\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"________________________________________________|\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL     |\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  set user\u0027s profile data                       |\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   profile                                                  |\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  View user profile details                     |\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   record-meal DATE TIME_PERIOD /FOOD_NAME -- CALORIE       |\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Record meal info                              |\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   check-meal DATE TIME_PERIOD                              |\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Check meals eaten                             |\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   calculate DATE                                           |\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Calculate Calorie intake for the day          |\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   calculate DATE1-\u003eDATE2                                   |\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Calculate Calorie intake from DATE1 to DATE2  |\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   list-food                                                |\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Lists all foods info in database.             |\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   addf FOOD_NAME --CALORIES                                |\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Add new food info into database               |\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   delf FOOD_NAME                                           |\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Delete food info from database                |\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   set-weight                                               |\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Set/Update weight in user profile             |\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   check-weight-progress NAME                               |\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  List index of weight progress                 |\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   delete-weight INDEX                                      |\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Delete weight from the weight progress list   |\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   new-recipe MAXIMUM_FOOD_TYPES ACTIVITY_LEVEL             |\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Randomly recommend recipe from database       |\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   show-recipe                                              |\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Show recommended recipe to user               |\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   help                                                     |\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Show this function help table                 |\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   exit                                                     |\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Exit the application                          |\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|____________________________________________________________|\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"________________________________________________|\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"Please key in your command: \";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 61,
      "lamyuewei": 11,
      "DDzuikeai": 63,
      "yuxianglim": 11
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/core/Weekday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public enum Weekday {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY(1, \"MONDAY\"), TUESDAY(2, \"TUESDAY\"), WEDNESDAY(3, \"WEDNESDAY\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY(4, \"THURSDAY\"), FRIDAY(5, \"FRIDAY\"), SATURDAY(6, \"SATURDAY\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY(7, \"SUNDAY\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Weekday(int index, String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "DDzuikeai": 22
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidAgeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidAgeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidCaloriesException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidCaloriesException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidFoodNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidFoodNameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidGenderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class InvalidGenderException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "lamyuewei": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidHeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidHeightException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidNameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidWeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidWeightException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/NegativeNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class NegativeNumberException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "DDzuikeai": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/Result.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Result {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String commandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result(String commandResult) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.commandResult \u003d commandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.commandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 16
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/AddFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private Double calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidCaloriesInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean success;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public AddFoodCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            String[] foodDescription \u003d descriptionArray[0].split(\"--\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.foodName \u003d foodDescription[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.calories \u003d Double.parseDouble(foodDescription[1].trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (this.calories \u003c\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidCaloriesInfo \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidCaloriesInfo \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription \u0026\u0026 !this.isInvalidCaloriesInfo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.success \u003d foodInfo.addFoodNutritionRecord(foodName, calories);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidCaloriesInfo) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d \"Sorry, to add new food to database you must input correct calories info.\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + System.lineSeparator() + \"It has to be positive Integer or Float\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (!this.success) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d \"No need to add! We already have this food in our database!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d \"You have added a new food into the database:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + \"Food: \" + foodName + \", Calories: \" + calories;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 19,
      "DDzuikeai": 52
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/BuildNewRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.NegativeNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.RecipeManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class BuildNewRecipeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean maxNumOverflow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noProfileFound;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String activityLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private int maxFoodNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the command object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws InvalidFormatException if the command doesn\u0027t contain correct number of parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public BuildNewRecipeCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidFormat \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noProfileFound \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.maxFoodNum \u003d Integer.parseInt(descriptionArray[0].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.activityLevel \u003d descriptionArray[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            switch (activityLevel) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"low\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"high\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"moderate\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isInvalidFormat \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (maxFoodNum \u003c\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                throw new NegativeNumberException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NumberFormatException | NegativeNumberException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidFormat \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!profile.isProfileExist()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            noProfileFound \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!noDescription \u0026\u0026 !isInvalidFormat \u0026 !noProfileFound) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            RecipeManager manager \u003d RecipeManager.getInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            maxNumOverflow \u003d manager.buildRecipe(profile, maxFoodNum, activityLevel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.resultString \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (noDescription) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (noProfileFound) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.PROFILE_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (isInvalidFormat) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d \"You have given wrong format for parameters!!!\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + \"First parameter is maximum food types, need to provide an integer.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + \"Second parameter is activity level, choose from -- low/moderate/high.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (maxNumOverflow) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d \"We support at most 4 kinds of food in a meal, \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        + \"otherwise it\u0027s not good for your health!\\n\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString +\u003d RecipeManager.getInstance().getRecipe();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 20,
      "DDzuikeai": 78
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CalculateCaloriesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class CalculateCaloriesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Beginning day of the queried time period."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String begin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Last day of the queried time period."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Represents whether the command is querying a day or a time period."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isOneDay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Total calories intake."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private double sum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isCircle \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the command description entered by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CalculateCaloriesCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.sum \u003d 0.00;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            String[] timeDescription \u003d descriptionArray[0].split(\"-\u003e\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.begin \u003d timeDescription[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.begin);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            switch (timeDescription.length) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isOneDay \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                this.end \u003d timeDescription[1].trim().toUpperCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                Weekday.valueOf(this.end);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isOneDay \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isOneDay \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Calculates the calories intake during given time period."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile the object containing user profile information."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param ui      the object containing user interface functions."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription | this.isInvalidDate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isOneDay) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            DailyFoodRecord record \u003d profile.getRecordOfDay(this.begin);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (record.getDailyCalories().isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                assert record.getDailyCalories().isPresent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                sum +\u003d record.getDailyCalories().get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday firstDay;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday lastDay;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            DailyFoodRecord curRecord;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            firstDay \u003d Weekday.valueOf(this.begin);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            lastDay \u003d Weekday.valueOf(this.end);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (lastDay.getIndex() \u003c firstDay.getIndex()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                lastDay \u003d Weekday.valueOf(\"SUNDAY\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isCircle \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            for (Weekday day : Weekday.values()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                int curIndex \u003d day.getIndex();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                if (curIndex \u003e\u003d firstDay.getIndex() \u0026\u0026 curIndex \u003c\u003d lastDay.getIndex()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    curRecord \u003d profile.getRecordOfDay(day.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (curRecord.getDailyCalories().isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        assert curRecord.getDailyCalories().isPresent();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        sum +\u003d curRecord.getDailyCalories().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                } else if (curIndex \u003e lastDay.getIndex()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Saves the execution result to the command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile the profile that the command is dealing with."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidDate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (isCircle) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(\"%s is ahead of %s, so only calories from %s to SUNDAY is calculated\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        this.end, this.begin, this.begin) + System.lineSeparator();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString +\u003d MessageBank.CALCULATE_CALORIES_MESSAGE + String.format(\"%.2f.\", sum);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 26,
      "DDzuikeai": 130
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CheckRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class CheckRecordCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String mealType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CheckRecordCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.date \u003d descriptionArray[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.mealType \u003d descriptionArray[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidDate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d date + \" Morning: \" + System.lineSeparator() + record.showBreakfast()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d date + \" Afternoon: \" + System.lineSeparator() + record.showLunch()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d date + \" Night: \" + System.lineSeparator() + record.showDinner()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.MEAL_TYPE_ERROR;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 22,
      "DDzuikeai": 58
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CheckRequiredCaloriesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class CheckRequiredCaloriesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String activityLevel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private double caloriesRequired;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInValidCommand \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noProfileFound \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param command     The command prompt entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param description The description of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @throws InvalidFormatException If user input incorrect format for the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CheckRequiredCaloriesCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.date \u003d descriptionArray[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.activityLevel \u003d descriptionArray[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            noDescription \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CheckRequiredCaloriesCommand(String command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!profile.isProfileExist()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            noProfileFound \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            getResult(profile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (noDescription | isInvalidDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            getResult(profile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        getRecommendedCaloriesIntake(profile, activityLevel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns how much calories the profile need to consume in a day."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile       The user profile."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param activityLevel the activity level of the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return calories required to consume in a day based on user\u0027s personal info."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public double getRecommendedCaloriesIntake(Profile profile, String activityLevel) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        double basalMetabolicRate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (profile.getGender()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"male\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 10 * profile.getWeight() + 6.25 * profile.getHeight() - 5 * profile.getAge() + 5;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"female\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 10 * profile.getWeight() + 6.25 * profile.getHeight() - 5 * profile.getAge() - 161;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            isInValidCommand \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (activityLevel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.375;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"moderate\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.55;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.725;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            isInValidCommand \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return caloriesRequired;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (noDescription) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (noProfileFound) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.PROFILE_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (isInvalidDate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (!isInValidCommand) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d String.format(\"Calories Intake and Requirement for %s:\", date) + System.lineSeparator()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + record.showDailyCalories()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + String.format(\"Calories requirement for %s activity level: \", activityLevel)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + String.format(\"%.2f\", caloriesRequired) + \"cal.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (record.getDailyCalories().isPresent()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                double caloriesIntake \u003d record.getDailyCalories().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003c profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003e\u003d caloriesRequired) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.SUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003c profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003c caloriesRequired) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.INSUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003e\u003d profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003e caloriesRequired) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.EXCESS_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003e\u003d profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003c\u003d caloriesRequired) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.SUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_CALORIES_REQUIREMENT_ERROR;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 30,
      "lamyuewei": 65,
      "DDzuikeai": 45
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CheckWeightRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static java.lang.Math.abs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class CheckWeightRecordCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String profileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cDouble\u003e weightRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double initialWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double currentWeight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightDifference;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public CheckWeightRecordCommand(String command, String description)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throws InvalidFormatException, NumberFormatException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            this.profileName \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            weightRecord \u003d profile.getWeightRecord();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            ui.showMessage(MessageBank.CHECK_WEIGHT_RECORD_MESSAGE); //Wil change this part later on"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            for (int i \u003d 0; i \u003c weightRecord.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                ui.showMessage(i + 1 + \". \" + weightRecord.get(i) + \"kg \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        initialWeight \u003d weightRecord.get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        currentWeight \u003d weightRecord.get(weightRecord.size() - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightDifference \u003d initialWeight - currentWeight;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (weightDifference \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d String.format(MessageBank.WEIGHT_LOSS_MESSAGE, weightDifference);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else if (weightDifference \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.WEIGHT_NO_CHANGE_MESSAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d String.format(MessageBank.WEIGHT_GAIN_MESSAGE, abs(weightDifference));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 22,
      "DDzuikeai": 12,
      "yuxianglim": 44
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Command is a public abstract class providing a skeletal implementation for"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * different commands and is responsible for storing the base information"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * required in a command, allowing other more specific events to draw onto its"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * components."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The command prompt entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * The last execution result of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    protected String resultString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the command prompt entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the command prompt entered by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Abstract method to save execution result of the command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile the profile that the command is dealing with."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public abstract Result getResult(Profile profile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Abstract method to execute the Command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param profile the object containing user profile information."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param ui      the object containing user interface functions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public abstract Result execute(Profile profile, UI ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 55,
      "DDzuikeai": 12
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/DeleteFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class DeleteFoodCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean success;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DeleteFoodCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            foodName \u003d descriptionArray[0].toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.success \u003d foodInfo.deleteFoodNutritionRecord(foodName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (!this.success) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d \"No need to delete! Referred Food doesn\u0027t exist in database\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d String.format(\"You have just deleted %s from the database.\", foodName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dejunnn": 18,
      "DDzuikeai": 40
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/DeleteWeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class DeleteWeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightDeleted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public DeleteWeightCommand(String command, String description)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throws InvalidFormatException, NumberFormatException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            this.index \u003d Integer.parseInt(descriptionArray[0]) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            weightDeleted \u003d profile.getWeightRecord().get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.getWeightRecord().remove(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d \"Weight Record: \" + weightDeleted + \"kg \" + MessageBank.WEIGHT_DELETED_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 16,
      "DDzuikeai": 12,
      "yuxianglim": 28
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public ExitCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.setExitStatus(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.resultString \u003d MessageBank.EXIT_COMMAMD_MESSAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 32,
      "DDzuikeai": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.parser.NameParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public HelpCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.resultString \u003d MessageBank.FUNCTION_LIST;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 34
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ListFoodDatabaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class ListFoodDatabaseCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private FoodNutritionRecord foodNutritionRecord \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ListFoodDatabaseCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.resultString \u003d foodNutritionRecord.showFoodDatabase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 12,
      "lamyuewei": 20
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public ProfileCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (profile.isProfileExist()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.WELCOME_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + String.format(\"Name:         %s\", profile.getName()) + System.lineSeparator()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Age:          %d years old\", profile.getAge()) + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Gender:       %s\", profile.getGender()) + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Height:       %.2f centimetres\", profile.getHeight()) + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Weight        %.2f kilograms\", profile.getWeight()) + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Weight Goal:  %.2f kilograms\", profile.getWeightGoal());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.PROFILE_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 34,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/RecordMealCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class RecordMealCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String mealType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String[] foodDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isValidFoodFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws InvalidFormatException if the command doesn\u0027t contain correct number of parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public RecordMealCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d CommandParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.date \u003d descriptionArray[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.mealType \u003d descriptionArray[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.foodDescription \u003d descriptionArray[2].trim().split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.isValidFoodFormat \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription | this.isInvalidDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String[] foodDescriptionSplit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String foodName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        Double foodCalories;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        for (String singleFoodDescription : foodDescription) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (singleFoodDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            foodDescriptionSplit \u003d singleFoodDescription.trim().split(\"--\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            foodName \u003d foodDescriptionSplit[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            switch (foodDescriptionSplit.length) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                Food food;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (foodInfo.isInDatabase(foodName)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    food \u003d foodInfo.findFood(foodName).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    food \u003d new Food(foodName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                foodList.add(food);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    foodCalories \u003d Double.parseDouble(foodDescriptionSplit[1].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (foodCalories \u003c 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        throw new NumberFormatException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    foodList.add(new Food(foodName, foodCalories));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    isValidFoodFormat \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                isValidFoodFormat \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.recordMeals(mealType, foodList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidDate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean isValidType \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.BREAKFAST_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.LUNCH_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.DINNER_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            isValidType \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.MEAL_TYPE_ERROR;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (isValidType) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d this.resultString + date + \".\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!isValidFoodFormat) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d this.resultString + System.lineSeparator() + MessageBank.INVALID_FOOD_FORMAT_ERROR;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 30,
      "lamyuewei": 30,
      "DDzuikeai": 81
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetAgeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.AgeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetAgeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetAgeCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.age \u003d AgeParser.parseAge(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidAgeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setAge(this.age);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.AGE_CHANGE_MESSAGE + profile.getAge() + \".\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetGenderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.GenderParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetGenderCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetGenderCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.gender \u003d GenderParser.parseGender(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidGenderException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setGender(this.gender);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.GENDER_CHANGE_MESSAGE + profile.getGender() + \".\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 9
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetHeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.HeightParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetHeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetHeightCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.height \u003d HeightParser.parseHeight(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidHeightException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setHeight(this.height);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.HEIGHT_CHANGE_MESSAGE + String.format(\"%.2f.\", profile.getHeight());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetNameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.NameParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetNameCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetNameCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.name \u003d NameParser.parseName(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidNameException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setName(this.name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NAME_CHANGE_MESSAGE + profile.getName() + \".\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.AgeParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.GenderParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.HeightParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.NameParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.SetProfileParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetProfileCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetProfileCommand(String command, String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d SetProfileParser.parseProfileDescription(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.name \u003d NameParser.parseName(descriptionArray[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.age \u003d AgeParser.parseAge(descriptionArray[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.gender \u003d GenderParser.parseGender(descriptionArray[2]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.height \u003d HeightParser.parseHeight(descriptionArray[3]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weight \u003d WeightParser.parseWeight(descriptionArray[4]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weightGoal \u003d WeightParser.parseWeight(descriptionArray[5]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NullPointerException | InvalidHeightException | InvalidWeightException | InvalidAgeException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                | InvalidNameException | InvalidGenderException | InvalidFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setProfile(this.name, this.age, this.gender, this.height, this.weight, this.weightGoal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.PROFILE_UPDATE_MESSAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 64,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetWeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetWeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetWeightCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weight \u003d WeightParser.parseWeight(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidWeightException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setWeight(weight);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.WEIGHT_CHANGE_MESSAGE + String.format(\"%.2f.\", profile.getWeight());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetWeightGoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetWeightGoalCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetWeightGoalCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weightGoal \u003d WeightParser.parseWeight(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidWeightException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setWeightGoal(this.weightGoal);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.WEIGHT_GOAL_CHANGE_MESSAGE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + String.format(\"%.2f.\", profile.getWeightGoal());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 49,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ShowRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.RecipeManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class ShowRecipeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public ShowRecipeCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.resultString \u003d RecipeManager.getInstance().getRecipe();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 10,
      "DDzuikeai": 16
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/AgeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class AgeParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidHeightException If input is not a valid height value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static int parseAge(String description) throws InvalidAgeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int age \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            age \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidAgeException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (age \u003c\u003d 0 || age \u003e\u003d 100) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidAgeException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(age);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(int age) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (age \u003e 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (age \u003c 100);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 35
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/CaloriesParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCaloriesException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class CaloriesParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidHeightException If input is not a valid height value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static double parseCalories(String description) throws InvalidCaloriesException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        double calories \u003d -1.00;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            calories \u003d Double.parseDouble(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCaloriesException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (calories \u003c 0.00) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCaloriesException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(calories);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(double calories) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (calories \u003e\u003d 0.00);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 34
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.AddFoodCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.BuildNewRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.CalculateCaloriesCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckRecordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckRequiredCaloriesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckWeightRecordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.DeleteFoodCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.DeleteWeightCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.ListFoodDatabaseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.RecordMealCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.SetAgeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.SetGenderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.SetHeightCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.SetNameCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.SetProfileCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.SetWeightCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.SetWeightGoalCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.ShowRecipeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Parser is the public class responsible for parsing user input and generating the relevant commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The command prompt entered by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String commandPrompt;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The description of the command entered by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidCommandException if user input has too few arguments."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void prepareInput(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] inputArray \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int numArguments \u003d inputArray.length;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        switch (numArguments) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            commandPrompt \u003d inputArray[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            commandPrompt \u003d inputArray[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            description \u003d inputArray[1].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description       the command description."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param argumentsRequired the number of arguments required by the command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if user input has the wrong format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String[] parseDescription(String description, int argumentsRequired) throws InvalidFormatException,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            NullPointerException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String[] descriptionArray \u003d description.trim().split(\"\\\\s+\", argumentsRequired);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Analyses the user input and generates the relevant command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the command generated from the user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidCommandException if command is not supported by application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException  if format for command is wrong."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static Command parseInput(String input) throws InvalidCommandException, InvalidFormatException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        prepareInput(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        switch (commandPrompt) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"profile\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new ProfileCommand(commandPrompt);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-profile\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetProfileCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-name\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetNameCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-age\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetAgeCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-gender\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetGenderCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-height\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetHeightCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-weight\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetWeightCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"set-weight-goal\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new SetWeightGoalCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"record-meal\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new RecordMealCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"check-meal\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new CheckRecordCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new ExitCommand(commandPrompt);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        case \"check-weight-progress\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            command \u003d new CheckWeightRecordCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"check-required-cal\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new CheckRequiredCaloriesCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"list-food\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            command \u003d new ListFoodDatabaseCommand(commandPrompt);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"calculate\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new CalculateCaloriesCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        case \"delete-weight\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            command \u003d new DeleteWeightCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"addf\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new AddFoodCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"delf\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new DeleteFoodCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"new-recipe\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new BuildNewRecipeCommand(commandPrompt, description);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"show-recipe\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            command \u003d new ShowRecipeCommand(commandPrompt);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        case \"help\" :"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            command \u003d new HelpCommand(commandPrompt);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            description \u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        description \u003d null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 108,
      "lamyuewei": 3,
      "DDzuikeai": 29,
      "yuxianglim": 31
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/DescriptionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Parser is the public class responsible for parsing user input and generating the relevant commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class DescriptionParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description       the command description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param argumentsRequired the number of arguments required by the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if user input has the wrong format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseDescription(String description, int argumentsRequired) throws InvalidFormatException,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            NullPointerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d description.trim().split(\"\\\\s+\", argumentsRequired);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 28
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/FoodNameParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFoodNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class FoodNameParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidNameException If input is not a valid height value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String parseFoodName(String description) throws InvalidFoodNameException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String foodName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodName \u003d description.trim().toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (foodName.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFoodNameException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(foodName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodName \u003d foodName.replaceAll(\" \", \"-\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(String foodName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (!(foodName.equals(\"\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 31
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/GenderParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class GenderParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final String MALE \u003d \"male\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final String FEMALE \u003d \"female\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidGenderException If gender is not recognized by our system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String parseGender(String description) throws InvalidGenderException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String gender \u003d description.trim().toLowerCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!(gender.equals(MALE) || gender.equals(FEMALE))) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidGenderException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(gender);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(String gender) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert ((gender.equals(MALE)) || (gender.equals(FEMALE)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 31
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/HeightParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class HeightParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidHeightException If input is not a valid height value."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static double parseHeight(String description) throws InvalidHeightException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        double height \u003d 0.00;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            height \u003d Double.parseDouble(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidHeightException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (height \u003c\u003d 0.00 || height \u003e\u003d 300.00) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidHeightException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(height);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(double height) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (height \u003e 0.00);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (height \u003c 300.00);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 34
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/NameParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class NameParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidNameException If input is not a valid height value."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String parseName(String description) throws InvalidNameException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        name \u003d description.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidNameException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (!(name.equals(\"\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 29
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/SetProfileParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetProfileParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 6;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description the command description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if user input has the wrong format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseProfileDescription(String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d description.trim().split(\"\\\\s+\", ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d ARGUMENTS_REQUIRED) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(descriptionArray);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (String arg : descriptionArray) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            arg.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(String[] descriptionArray) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (descriptionArray.length \u003d\u003d ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 32
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/StorageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Parser is the public class responsible for parsing user input and generating the relevant commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param profileDataLine       the command description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if user input has the wrong format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseProfileDataLine(String profileDataLine) throws InvalidFormatException,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int argumentsRequired \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d profileDataLine.trim().split(\": \", argumentsRequired);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed and used to generate commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param foodNutritionRecordDataLine       the command description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if user input has the wrong format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseFoodNutritionRecordDataLine(String foodNutritionRecordDataLine)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throws InvalidFormatException, NullPointerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int argumentsRequired \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d foodNutritionRecordDataLine.trim().split(\",\", argumentsRequired);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 45
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/WeightParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class WeightParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input gender and parse it into the standard gender accepted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input gender."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidWeightException If input is not a valid height value."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static double parseWeight(String description) throws InvalidWeightException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        double weight \u003d 0.00;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            weight \u003d Double.parseDouble(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (weight \u003c\u003d 0.00 || weight \u003e\u003d 500.00) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(weight);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(double weight) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (weight \u003e 0.00);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (weight \u003c 500.00);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 34
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/DailyFoodRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class DailyFoodRecord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cFood\u003e breakfast;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cFood\u003e lunch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cFood\u003e dinner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Daily Food Record."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord(String date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        breakfast \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        lunch \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        dinner \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Sets the date of the record."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the date of this record."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the date of this record"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Records the meals consumed into their respective categories."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param mealType type of this meal, divided by time period."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodList the list of foods."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void recordMeals(String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            breakfast.addAll(foodList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            lunch.addAll(foodList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            dinner.addAll(foodList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Clear the records of a certain meal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param mealType type of this meal, divided by time period."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void clearRecords(String mealType) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            breakfast.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            lunch.clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            dinner.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Food Record."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showDailyRecord() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(this.showBreakfast());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(this.showLunch());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(this.showDinner());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Breakfast Record."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showBreakfast() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : breakfast) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Lunch Record."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showLunch() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : lunch) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Dinner Record."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showDinner() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : dinner) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public boolean isDate(String date) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.date.equals(date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Provide a ArrayList of all the foods consumed in a day."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return ArrayList of all the foods consumed in a day"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ArrayList\u003cFood\u003e getDailyFood() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        allDailyFood.addAll(breakfast);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        allDailyFood.addAll(lunch);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        allDailyFood.addAll(dinner);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Provide a ArrayList of the foods consumed in a specific time frame of a day."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return ArrayList of all the foods consumed in a day"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ArrayList\u003cFood\u003e getDailyFood(String timeFrame) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (timeFrame) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return breakfast;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return lunch;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return dinner;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Calculate the total recorded calories for all the meals."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional double of the calories intake if exist, and Optional empty otherwise."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getDailyCalories() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(Food::hasCaloriesData)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Food::getCalories)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Optional::get)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce(Double::sum);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Calculate the total recorded calories for meals in a specific time frame of a day ."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional double of the calories intake if exist, and Optional empty otherwise."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getDailyCalories(String timeFrame) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e foodInTimeFrame \u003d getDailyFood(timeFrame);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodInTimeFrame.stream().filter(Food::hasCaloriesData)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Food::getCalories)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Optional::get)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce(Double::sum);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the DailyFoodRecord has any Food with missing calories data."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return False if there exist food without calories, true otherwise."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isCaloriesPresent() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(food -\u003e !food.hasCaloriesData())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(food -\u003e false)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce((first, second) -\u003e first)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(true);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the DailyFoodRecord has any Food in a specific time frame of a day with missing calories data."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return False if there exist food without calories, true otherwise."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isCaloriesPresent(String timeFrame) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood(timeFrame);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(food -\u003e !food.hasCaloriesData())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(food -\u003e false)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce((first, second) -\u003e first)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(true);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Express the calculable calories intake for all the meals as a String."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return String representation of the calculable calories."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showDailyCalories() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return getDailyCalories()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(calories -\u003e MessageBank.CALORIES_MESSAGE + String.format(\"%.2f\", calories) + \"cal.\\n\")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(result -\u003e (isCaloriesPresent()) ? result : (result + MessageBank.MISSING_CALORIES_MESSAGE))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(MessageBank.NO_CALORIES_MESSAGE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Express the calculable calories intake for meals within a time frame of the day as a String."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return String representation of the calculable calories within a time frame."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showDailyCalories(String timeFrame) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return getDailyCalories(timeFrame)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(calories -\u003e \"For \" + timeFrame + \", \" + MessageBank.TIME_CALORIES_MESSAGE"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                        + String.format(\"%.2f\", calories) + \"cal.\\n\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(\"For \" + timeFrame + \", \" + MessageBank.NO_TIME_CALORIES_MESSAGE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns a record of one day."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return one entry of the weekly recipe"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getRecipeEntry() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d this.date;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d String.format(\"%1$-10s\", message);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : breakfast) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            message \u003d message + food.getPair();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d message.substring(0, message.length() - 1);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d String.format(\"%1$-70s\", message);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : lunch) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            message \u003d message + food.getPair();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d message.substring(0, message.length() - 1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d String.format(\"%1$-130s\", message);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Food food : dinner) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            message \u003d message + food.getPair();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d message.substring(0, message.length() - 1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 40,
      "lamyuewei": 110,
      "DDzuikeai": 132
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private Optional\u003cDouble\u003e calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for Food with the food name and calories value."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName Name of the food."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param calories Amount of calories the food has."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Food(String foodName, double calories) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.calories \u003d Optional.of(calories);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for Food with the food name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName Name of the food."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public Food(String foodName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.calories \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Getter for food name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Name of the food."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String getFoodName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Getter for the calories of the food."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Amount of calories the food has"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getCalories() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the food has calories."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return True if food has calories, False otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean hasCaloriesData() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories.isPresent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories.map(value -\u003e \"Food: \" + foodName + \", Calories: \" + String.format(\"%.2f\", value) + \"cal\\n\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElseGet(() -\u003e \"Food: \" + foodName + \", Calories: \" + \"No value found.\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getPair() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return calories.map(value -\u003e foodName + \"(\" + String.format(\"%.2f\", value) + \"),\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                .orElseGet(() -\u003e foodName + \"(\" + \"Nan)\" + \",\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 8,
      "lamyuewei": 47,
      "DDzuikeai": 11
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/FoodNutritionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class FoodNutritionRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cFood\u003e foodNutritionRecordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static FoodNutritionRecord theOne \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for FoodNutritionInfo of Food from our database."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private FoodNutritionRecord() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"chicken-rice\", 702));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"fried-rice\", 508));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"chicken-curry\", 450));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"prawn-noodles-dry\", 459));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"fishball-noodles-soup\", 330));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"cheeseburger\", 300));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"white-bread\", 77));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"french-fries\", 450));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"orange-juice\", 80));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"soft-drink\", 120));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"fresh-milk\", 163));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the only instance, if it doesn\u0027t exist, create one first."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the only instance of FoodNutritionInfo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static FoodNutritionRecord getInstance() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (theOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            theOne \u003d new FoodNutritionRecord();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return theOne;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Search for a food in the database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName The name of the food to be searched for."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional Food that contains the food if exist, and is empty otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cFood\u003e findFood(String foodName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Optional\u003cFood\u003e foodFound \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : foodNutritionRecordList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (food.getFoodName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                foodFound \u003d Optional.of(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodFound;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public Food findFood(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return foodNutritionRecordList.get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Search if a food exists in the database."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName The name of the food to be searched for."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return True if food exist in database, false otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isInDatabase(String foodName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        boolean isFoodFound \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : foodNutritionRecordList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (food.getFoodName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                isFoodFound \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return isFoodFound;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Print out all the food stored in our database."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showFoodDatabase() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        StringBuilder foodDatabase \u003d new StringBuilder(MessageBank.FOOD_DATABASE_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : foodNutritionRecordList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            foodDatabase.append(food);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return foodDatabase.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Adds a new food into the database."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodName name of the new food"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param calories calories content of the new food"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return true if operation succeeds, false if food already exists in database"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean addFoodNutritionRecord(String foodName, Double calories) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!isInDatabase(foodName)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            foodNutritionRecordList.add(new Food(foodName, calories));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Deletes a food from the database."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodName name of the to-be-deleted food"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return true if operation succeeds, false if referred food doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean deleteFoodNutritionRecord(String foodName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (findFood(foodName).isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Food toBeDeleted \u003d findFood(foodName).get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            foodNutritionRecordList.remove(toBeDeleted);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public List\u003cFood\u003e getFoodNutritionRecordList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.foodNutritionRecordList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void clearFoodNutritionRecordList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.foodNutritionRecordList.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.foodNutritionRecordList.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public double getFoodCalories(int index) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return foodNutritionRecordList.get(index).getCalories().get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 45,
      "lamyuewei": 45,
      "DDzuikeai": 52
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/Profile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height; //Height in centimeter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight; //Weight in kg"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean profileExist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cDailyFoodRecord\u003e personalFoodRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cDouble\u003e weightRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs a new Profile object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Profile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.personalFoodRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Sets the User Profile with the relevant information required."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setProfile(String name, int age, String gender, double height, double weight, double weightGoal) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setName(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setAge(age);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setGender(gender);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setHeight(height);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setWeight(weight);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setWeightGoal(weightGoal);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setProfileExist(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns a daily record of a certain date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param date the date of the wanted record."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return a record of wanted date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord getRecordOfDay(String date) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean recordExists \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (DailyFoodRecord r : personalFoodRecord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (r.isDate(date)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                record \u003d r;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                recordExists \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!recordExists) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            record \u003d addNewRecord(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord getRecordOfDay(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return personalFoodRecord.get(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Creates a new record of a certain date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param date the date of the new record."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return a newly generated daily record."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord addNewRecord(String date) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d new DailyFoodRecord(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        personalFoodRecord.add(record);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public List\u003cDouble\u003e getWeightRecord() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.weightRecord;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setHeight(double height) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setWeight(double weight) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightRecord.add(weight);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setWeightGoal(double weightGoal) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightGoal \u003d weightGoal;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setProfileExist(boolean profileExist) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d profileExist;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.gender;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getWeightGoal() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return weightGoal;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean isProfileExist() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.profileExist;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 85,
      "DDzuikeai": 50,
      "yuxianglim": 6
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/RecipeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckRequiredCaloriesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class RecipeManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cDailyFoodRecord\u003e recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static RecipeManager theOnlyOne \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int MAX_FOOD_TYPES \u003d 4;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private RecipeManager() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String curDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Weekday weekday : Weekday.values()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            curDay \u003d weekday.getName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            assert recipe !\u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            recipe.add(new DailyFoodRecord(curDay));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the only one instance, if it doesn\u0027t exist, create one first."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the only instance of RecipeManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static RecipeManager getInstance() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (theOnlyOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            theOnlyOne \u003d new RecipeManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return theOnlyOne;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private void setRecipe(String date, String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        Weekday weekday \u003d Weekday.valueOf(date.toUpperCase());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int index \u003d weekday.getIndex();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe.get(index).recordMeals(mealType, foodList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private void setRecipe(int index, String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe.get(index).clearRecords(mealType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe.get(index).recordMeals(mealType, foodList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the recipe of a week."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Each entry of the recipe contains three sections--morning/afternoon/night."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the recipe of a week."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getRecipe() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String recipeTable \u003d String.format(\"%1$-10s\", \" \") + \"morning\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipeTable \u003d String.format(\"%1$-70s\", recipeTable) + \"afternoon\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipeTable \u003d String.format(\"%1$-130s\", recipeTable) + \"night\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (DailyFoodRecord record : recipe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            recipeTable \u003d recipeTable + record.getRecipeEntry() + System.lineSeparator();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return recipeTable;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Creates a recipe for the week based on user\u0027s needs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param num maximum food types the user want to have in a meal."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return true if maximum food types is less than 5, else false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public boolean buildRecipe(Profile profile, int num, String activityLevel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        CheckRequiredCaloriesCommand command \u003d new CheckRequiredCaloriesCommand(\"check-required-cal\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        double cap \u003d command.getRecommendedCaloriesIntake(profile, activityLevel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int maxNum \u003d foodInfo.getListSize();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean overflow \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (num \u003e MAX_FOOD_TYPES) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            num \u003d MAX_FOOD_TYPES;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            overflow \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int success \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        while (success \u003c 21) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            double sum \u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            boolean[] checked \u003d new boolean[maxNum];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            int checkedNum \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            for (int i \u003d 0; i \u003c num \u0026\u0026 checkedNum \u003c maxNum; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                while (checkedNum \u003c maxNum) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    int rand \u003d (int) (Math.random() * maxNum);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (!checked[rand]) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        checked[rand] \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        checkedNum +\u003d 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        if (sum + foodInfo.getFoodCalories(rand) \u003c\u003d cap) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                            sum +\u003d foodInfo.getFoodCalories(rand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                            foodList.add(foodInfo.findFood(rand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (sum \u003c\u003d cap) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                success +\u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String mealType \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                switch (success % 3) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    mealType \u003d \"morning\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    mealType \u003d \"afternoon\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    mealType \u003d \"night\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                setRecipe((int) ((success - 1) / 3), mealType, foodList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return overflow;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4,
      "DDzuikeai": 125
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.LogsCentre;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCaloriesException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFoodNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.AgeParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CaloriesParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.FoodNameParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.GenderParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.HeightParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.NameParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.StorageParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Storage is the public class responsible for creating and managing the data files generated from the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The object containing the list containing all current tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private LogsCentre logsCentre;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private FoodNutritionRecord foodNutritionRecord;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the directory that contains the data file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String DATA_DIRECTORY_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains profile information."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String PROFILE_FILE_PATH \u003d DATA_DIRECTORY_PATH"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + File.separator + \"profile.txt\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains food record information."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String DAILY_FOOD_RECORD_FILE_PATH \u003d DATA_DIRECTORY_PATH"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + File.separator + \"daily-food-record.txt\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /** To be implemented at a later stage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains food nutritional information."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String FOOD_NUTRITION_RECORD_FILE_PATH \u003d DATA_DIRECTORY_PATH"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + File.separator + \"food-nutrition-record.txt\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Storage object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param ui the object containing user interface functions."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Storage(UI ui, LogsCentre logsCentre, Profile profile, FoodNutritionRecord foodNutritionRecord) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logsCentre \u003d logsCentre;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profile \u003d profile;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.foodNutritionRecord \u003d foodNutritionRecord;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadDataDirectory();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadProfileFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        //this.loadDailyFoodRecordFile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the directory, if absent, creates a new directory."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadDataDirectory() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Path directoryPath \u003d Paths.get(DATA_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!Files.exists(directoryPath)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                Files.createDirectory(directoryPath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"New Directory created: \" + directoryPath.getFileName().toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeSevereLog(\"Error in creating new directory\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeInfoLog(\"Existing Directory found: \" + directoryPath.getFileName().toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the data file in the directory, if absent, creates a new data file. \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * If data file is present, loads the existing data from the file such that it is accessible by the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadProfileFile() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File profileData \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (profileData.createNewFile()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"No existing Profile found, new file created: \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + profileData.getName().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"Existing Profile found: \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + profileData.getName().toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.readProfileFile();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeSevereLog(\"Error in Profile data file\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Reads the data file and parses the existing data in the file, converting it into tasks which is added into"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * the tasklist such that it is accessible by the user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void readProfileFile() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File profileData \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Scanner myReader \u003d new Scanner(profileData);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cString\u003e name \u003d Optional.empty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cInteger\u003e age \u003d Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cString\u003e gender \u003d Optional.empty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cDouble\u003e height \u003d Optional.empty();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cDouble\u003e weight \u003d Optional.empty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cDouble\u003e weightGoal \u003d Optional.empty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String dataLine \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String[] dataLineArray \u003d StorageParser.parseProfileDataLine(dataLine);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String label \u003d dataLineArray[0];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String description \u003d dataLineArray[1];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                switch (label) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Name\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    name \u003d Optional.of(NameParser.parseName(description));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Age\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    age \u003d Optional.of(AgeParser.parseAge(description));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Gender\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    gender \u003d Optional.of(GenderParser.parseGender(description));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Height\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    height \u003d Optional.of(HeightParser.parseHeight(description));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Weight\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    weight \u003d Optional.of(WeightParser.parseWeight(description));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Weight-Goal\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    weightGoal \u003d Optional.of(WeightParser.parseWeight(description));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    throw new InvalidFormatException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (name.isPresent() \u0026\u0026 age.isPresent() \u0026\u0026 gender.isPresent()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    \u0026\u0026 height.isPresent() \u0026\u0026 weight.isPresent() \u0026\u0026 weightGoal.isPresent()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String profileName \u003d name.get();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                int profileAge \u003d age.get();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String profileGender \u003d gender.get();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double profileHeight \u003d height.get();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double profileWeight \u003d weight.get();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double profileWeightGoal \u003d weightGoal.get();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.profile.setProfile(profileName, profileAge, profileGender,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        profileHeight, profileWeight, profileWeightGoal);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                throw new InvalidFormatException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myReader.close();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException | InvalidFormatException | InvalidNameException | InvalidAgeException"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                | InvalidGenderException | InvalidHeightException | InvalidWeightException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeInfoLog(\"Profile Information Invalid, Profile cleared.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            clearProfileFile();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Clears all content in the data file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void clearProfileFile() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Rewrites the data file to reflect the current data."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeProfileFile() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(PROFILE_FILE_PATH, false);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Name: \" + this.profile.getName() + System.lineSeparator());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Age: \" + this.profile.getAge() + System.lineSeparator());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Gender: \" + this.profile.getGender() + System.lineSeparator());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Height: \" + this.profile.getHeight() + System.lineSeparator());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Weight: \" + this.profile.getWeight() + System.lineSeparator());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Weight-Goal: \" + this.profile.getWeightGoal());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the data file in the directory, if absent, creates a new data file. \u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * If data file is present, loads the existing data from the file such that it is accessible by the user."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File foodNutritionRecordData \u003d new File(FOOD_NUTRITION_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (foodNutritionRecordData.createNewFile()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"No existing Food Nutrition Record found, new file created: \""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + foodNutritionRecordData.getName().toString());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"Existing Food Nutrition Record found: \""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + foodNutritionRecordData.getName().toString());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.readFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeSevereLog(\"Error in Food Nutrition Record data file\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Reads the data file and parses the existing data in the file, converting it into tasks which is added into"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * the tasklist such that it is accessible by the user."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void readFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File profileData \u003d new File(FOOD_NUTRITION_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Scanner myReader \u003d new Scanner(profileData);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.foodNutritionRecord.clearFoodNutritionRecordList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String dataLine \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String[] dataLineArray \u003d StorageParser.parseFoodNutritionRecordDataLine(dataLine);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String label \u003d dataLineArray[0];"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String description \u003d dataLineArray[1];"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String foodName \u003d FoodNameParser.parseFoodName(label);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double calories \u003d CaloriesParser.parseCalories(description);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.foodNutritionRecord.addFoodNutritionRecord(foodName, calories);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myReader.close();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException | InvalidFormatException"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                | InvalidFoodNameException | InvalidCaloriesException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeInfoLog(\"Food Nutrition Record Information Invalid, Food Nutrition Record cleared.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            clearFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Clears all content in the data file."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void clearFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(FOOD_NUTRITION_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Rewrites the data file to reflect the current data."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(FOOD_NUTRITION_RECORD_FILE_PATH, false);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            for (Food food : this.foodNutritionRecord.getFoodNutritionRecordList()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String foodName \u003d food.getFoodName();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                foodName \u003d FoodNameParser.parseFoodName(foodName);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double calories \u003d 0.00;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                if (food.hasCaloriesData()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    calories \u003d food.getCalories().get();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                myWriter.write(foodName + \",\" + calories + System.lineSeparator());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException | InvalidFoodNameException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 324
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.EXIT_APP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.FILE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.FUNCTION_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_GENDER_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.LOGO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.WELCOME_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * UI is the public class responsible for managing all user interface functions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The exit status determining whether to close the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean exitStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the UI object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.exitStatus \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Prints the welcome message for the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            LOGO,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void displayHelpMenu() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            FUNCTION_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayExitMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            EXIT_APP_MESSAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayFileErrorMessage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            FILE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayInvalidCommandMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayInvalidFormatMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            INVALID_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void displayIndexOutOfBoundMessage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public void displayInvalidGenderMessage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            INVALID_GENDER_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showExecutionResult(String result) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        showMessage("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the exit status."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the exit status."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean isExitStatus() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.exitStatus;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Updates the exit status."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param update the updated exit status."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setExitStatus(boolean update) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.exitStatus \u003d update;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the next line of user input."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Printer to print out strings of messages to user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param message String of message to be shown to user"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void showMessage(String... message) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(m);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 76,
      "lamyuewei": 3,
      "DDzuikeai": 3,
      "yuxianglim": 45
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/DietManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "class DietManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "DDzuikeai": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/ProfileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "class ProfileTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setName(\"Jane Doe\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Jane Doe\", profile.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setGender() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setGender(\"Female\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Female\", profile.getGender());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setAge() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setAge(18);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(18, profile.getAge());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setHeight(170);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(170, profile.getHeight());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setWeightGoal() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setWeightGoal(50);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(50, profile.getWeightGoal());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setProfileExist() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfileExist(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(false, profile.isProfileExist());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void isProfileExist() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(true, profile.isProfileExist());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getHeight() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(180, profile.getHeight());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getWeight() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(80, profile.getWeight());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getWeightGoal() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(75, profile.getWeightGoal());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getAge() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(20, profile.getAge());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getGender() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Male\", profile.getGender());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"John Doe\", profile.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getRecordOfDay() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        profile.setProfile(\"John Doe\",20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(\"WEDNESDAY\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        assertEquals(\"WEDNESDAY\", record.getDate());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 93,
      "DDzuikeai": 22
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/model/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void getFoodName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"apple\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(\"apple\", food.getFoodName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void getCalories() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"orange\", 100);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(100, food.getCalories().get());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void hasCaloriesData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"pear\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertFalse(food.hasCaloriesData());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"grape\", 50);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(\"Food: grape, Calories: 50.00cal\\n\", food.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void getPair() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"mango\", 500);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(\"mango(500.00),\", food.getPair());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 39
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1
    }
  }
]
