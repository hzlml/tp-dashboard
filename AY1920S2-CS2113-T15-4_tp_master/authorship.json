[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "group \u0027seedu.dietmanager\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "version \u00272.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    mainClassName \u003d \"seedu.dietmanager.DietManager\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    archiveBaseName \u003d \"DietManager\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    archiveVersion \u003d \"2.1.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 6,
      "-": 35
    }
  },
  {
    "path": "data/food-nutrition-record.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "chicken-rice,702.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "fried-rice,508.0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "chicken-curry,450.0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "prawn-noodles,459.0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "fishball-noodles,330.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "cheeseburger,300.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "white-bread,77.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "french-fries,450.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "orange-juice,80.0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "soft-drink,120.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "fresh-milk,163.0"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 11
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![dejunn_photo](images/dejunnn_display.jpg) | Tan De Jun | [Github](https://github.com/dejunnn) | [Portfolio](team/dejunnn.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yu Xiang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lam Yue Wei | [Github](https://github.com/lamyuewei) | [Portfolio](team/lamyuewei.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chenghao | [Github](https://github.com/DDzuikeai) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Click [here](README.md) to go back to the main page."
      }
    ],
    "authorContributionMap": {
      "dejunnn": 3,
      "lamyuewei": 1,
      "DDzuikeai": 1,
      "-": 4,
      "yuxianglim": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "# Developer Guide - Diet Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. [Design](#design)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. [Implementation](#implementation)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. [Product Scope](#product-scope)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. [User Stories](#user-stories)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "4. [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "5. [Glossary](#glossary)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "6. [Instructions for Manual Testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![ArchitectureDiagram](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the Diet Manager Application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The components involved are given below:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `UI`: The Component responsible for reading user input and displaying command results."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Storage`: The Component responsible for reading, writing and saving of data files."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Logic`: The Component responsible for managing the logic flow of the application and executing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Model`: The Component responsible for storing information required by the application in-memory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Commons`: A collection of classes used by multiple other components."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![UI-Component](images/UI-Component.png)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `UI` component is responsible for:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Receiving all command line inputs from the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Displaying all system outputs to the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The UI consists of the following classes: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `UI` - Reads user input and displays system output"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `UI` component"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. Reads user input and passes it to `Logic` for parsing and execution of the command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. Receives command results from `Logic` and listens "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "for changes in `Model` to display updated information to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. Draws on `Commons` to obtain the relevant messages to be displayed to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![Storage-Component](images/Storage-Component.png)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Storage` component is responsible for:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Reading data files to update the information in local memory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Writing and saving all data into the relevant data files."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Storage consists of the following classes: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Storage` - Stores all user profile information in respective data files"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Storage` component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. Reads data files (if present) using `Logic` and updates `Model` with the relevant information."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. Receives instructions from `logic` to save and write in-memory information from"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`Model` into the relevant data files."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![Logic-Component](images/Logic-Component.png)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Logic` component is responsible for:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Establishing the logic flow."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Deciding how functional components interact with each other."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Logic consists of the following classes:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `AppManager` - Arranges the main workflow of the program."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Result` - Stores the command result in-memory."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `CommandParser` - Parses the user input and generates a specific command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `\"ABC\"Command` - A collection of parser classes which parses a specific input to generate a specific value."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Command` - An abstract class which other command classes inherits from."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `\"ABC\"Command` - A collection of command classes inherited from `Command` which perform specific functions."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Logic` component"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. Receives the user input and parses it to generate a specific command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. Executes the command to generate a specific result."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. Passes results to `UI` to display system output to the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "4. Updates `Storage` to save any changes made to in-memory information to the respective data files."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Model` component is responsible for:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Storing all relevant information in-memory for the application to access."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Model consists of the following classes: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* `Profile` - Stores the personal information of a person including the name, age, gender, height, weight, weight goal, list of food consumed and list of weight changes"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* `DailyFoodRecord` - Keeps a record of the food consumed in a day, comprising morning, afternoon and night"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Food` - A food object which contains the relevant food information"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `FoodNutritionRecord` - Provides a data bank of food items with the food name and calories value"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `RecipeManager` - Generates and stores recipes depending on user information"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Model` component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. Receives instructions from `Logic` to update in-memory information."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. Is not dependent on any of the other components."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Commons component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The `Commons` component is responsible for:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Consisting of multiple useful classes which are utilised by other components in the application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The Food consists of the following classes: "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `LogsCentre` - Tracks system through log records and saves them to a log file"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `MessageBank` - Consists of multiple system output messages"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `Weekday` - Enumeration class for classifying weekdays"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* `\"ABC\"Exception` - A collection of exceptions to aid in running of the application."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### 1. [Proposed] Record Meal Feature"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### 1.1 Proposed implementation"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "The record feature is facilitated by `RecordMealCommand`. It extends `Command` and overrides `execute()` and `saveResults()`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Given below is an example usage scenario and how the record mechanism behaves at each step."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Step 1.  The `ui` object gets user input and sends it to the `parser`. The `parser` then parses the original input into a standard `command`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "and returns it. The command type is decided by the `commandPrompt`. The `RecordMealCommand` has `record-meal` as its commandPrompt. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During the process a new`RecordMealCommand` object will be generated and returned to the `Logic` component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Step1. Generate command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![Step1. Diagram](images/Record_step1.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Step 2.  The `Logic` composition calls the `execute()` method of the `RecordMealCommand` object. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During the process of execution, the command object will generate a `ArrayList\u003cFood\u003e foodList`, which maintains all `Food` items listed in the user input. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "If a certain kind of `Food` can be found in the database of `FoodNuritionInfo`, then this food item will be fetched from the database. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Else a new `Food` object will be generated simply with `foodName` without all the nutrition info."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "During execution, the command object will try to get a `record` object of the class `DailyFoodRecord`. The date of record is specified by the user. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "If no record of that day is found in profile, it will automatically generate a new record of the day. Then with `foodList` and `record`, can call "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "the method `record.recordMeals()`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Step2. Execute and Save Result"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "![Step2. Diagram](images/Record_step2.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### 1.2 Design Considerations"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Aspect: How `RecordMealCommand` executes and save results"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 1 (current choice): Directly operate on the `Profile` object, more specifically, the `DailyFoodRecord` attribute in `Profile` object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "And save execution `results` in the `RecordMealCommand` object."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: Logic is clear and easy to implement."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: `Command` object has full access to `Profile` object, which is not safe. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 2: `RecordMealCommand` can only operate on `DailyFoodRecord` of the `Profile`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: Reduce dependency and potential risks. "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: Different types of `Command` need different declarations/interface for `command.execute()` method. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Aspect : Data structure to support the command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 1 (current choice): Use a list to store daily food record for a profile."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: Easy to implement and understand"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: The list is maintained by a `Profile` object. Can lead to more duties for a `Profile` object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Alternative 2: Use a `FoodHistoryManager` to keep record of daily meals."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Pros: More OOP."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Cons: Makes the execution procedure more complex."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Product Scope"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Students that :"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. are too busy with schoolwork to carefully monitor their eating habits"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. are concerned about their health"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. want to keep track of their weight"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager aims to achieve the following:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. Streamline the diet recording process "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. Allow users to track and monitor their eating habits"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. Provide personalised information and recommendations for the user"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "4. Monitor and track user\u0027s weight changes to achieve weight goal"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|Version| As a ... | I want to ... | So that I ...|"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.0| student|set a profile with personal information|receive personalised information regarding my diet|"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|v1.0| student|record my calories intake|can keep track of my total calorie intake for the week effectively|"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.0| student|record my food intake|see what I ate today|"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|v1.0| student|see my diet history|can track my diet and maintain a balanced and healthy diet lifestyle|"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.0| student|set a weight-goal|received feedback on progress regarding my weight goal|"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.1| student|record my weight changes|can see if i am doing well towards my expectation|"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.1| student|check nutritional values of certain foods|can check how much calories i am consuming|"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.1| student|check if I am keeping to my recommended caloric intake|do not over or under eat and maintain my diet|"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.1| student|add food items to the database|do not have to constantly check food nutritional value for common foods|"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.2| student|save my diet history|have a record of my daily food intake|"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.2| student|import my diet history|have access to previous records and be able to progress from there|"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v1.2| student|receive workout advice based on my excess calorie intake for the day|can maintain my calories for the day|"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|v2.0| student|generate a recommended food plan|know what to eat to meet recommended caloric intake|"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Device Environment:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Must have Java 11 or higher"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* 32-bit or 64-bit environment"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Command Line Interface"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Performance:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Function offline, without the need for internet access"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Quick to launch and use"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* No noticeable lag or delay in performance when running"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Intuitive and seamless for new users."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Reliability:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Data files should be updated constantly and accurately, with no data loss"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Data records should be retrievable and readable"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Text inputs should produce similar results if utilised multiple times."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for Manual Testing"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Click [here](README.md) to go back to the main page."
      }
    ],
    "authorContributionMap": {
      "dejunnn": 147,
      "lamyuewei": 3,
      "DDzuikeai": 41,
      "-": 28,
      "yuxianglim": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "# Diet Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "![DietManagerLogo](images/DietManagerLogo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager is an personal text-based chat-bot application used for managing an individual\u0027s diet. \u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 5,
      "-": 5
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "# User Guide - Diet Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "3. [Features](#3-features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    1. [Profile Features](#31-profile-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        1. [Set user profile](#set-user-profile)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        2. [View user profile](#view-user-profile)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        3. [Set user name](#set-user-name)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        4. [Set user age](#set-user-age)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        5. [Set user gender](#set-user-gender)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        6. [Set user height](#set-user-height)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        7. [Set user weight-goal](#set-user-weight-goal)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        8. [Set user weight](#set-user-weight)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        9. [Delete user weight record](#delete-user-weight-record)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        10. [Check user weight progress](#check-user-weight-progress)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        11. [Check user BMI](#check-user-bmi)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    2. [Daily Food Record Features](#32-daily-food-record-features)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        1. [Record meals](#record-meals)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        2. [Check meals](#check-meals)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        3. [Clear food records](#clear-all-food-records)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        4. [Check required calories](#check-required-calories)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        5. [Calculate calories](#calculate-calories)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    3. [Food Nutrition Record Features](#33-food-nutrition-record-features)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        1. [List food database](#list-food-database)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        2. [Add food into database](#add-food-into-database)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        3. [Delete food from database](#delete-food-from-database)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    4. [Recipe Features](#34-recipe-features)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        1. [Get a recommended recipe](#get-a-recommended-recipe)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        2. [View recipe](#view-recipe)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    5. [Utility Features](#35-utility-features)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        1. [Help](#help)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        2. [Exit application](#exit-application)    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "4. [FAQ](#4-faq)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "5. [Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 1 Introduction"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager is an personal text-based chat-bot application used for managing an individual\u0027s diet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager is capable of the following functions:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Profile -uses a user\u0027s profile information to personalise diet recommendations."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Daily Food Record - record and store daily food intake."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Food Nutrition Record - record and store food caloric information."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Recipe Generator - generates a recommended recipe depending on a user\u0027s profile information."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 2 Quick Start"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Ensure that you have Java 11 or above installed in your Computer. \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Download the latest version of DietManager-2.1.0.jar [here](https://github.com/AY1920S2-CS2113-T15-4/tp/releases). \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Open and run the jar file by entering the following command in Windows PowerShell or Git Bash:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        java -jar DietManager-2.1.0.jar"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* The application will first search for a data directory to store all relevant data files. \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* If no `data` directory is found, it will create a new `data` directory."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        INFO: New Directory created: data"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Next there are 4 data files that the application will search for. If any of these files are present,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "the application will read and load the data from these files. Otherwise, it will create new data files"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "to store the relevant information."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    * profile"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            INFO: No existing Profile found, new file created: profile.txt"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    * food-nutrition-record"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            INFO: No existing Food Nutrition Record found, new file created: food-nutrition-record.txt"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    * recipe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            INFO: No existing Recipe file found, new file created: recipe.txt"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    * daily-food-record"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            INFO: No existing food record file found, new file created: daily-food-record.txt"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* The following text-based user interface should then appear:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        INFO: Starting Diet Manager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "          _____   _        _     __  __"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "         |  __ \\ (_)      | |   |  \\/  |"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "         | |  | | _   ___ | |_  | \\  / |  __ _  _ __    __ _   __ _   ___  _ __"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "         | |  | || | / _ \\| __| | |\\/| | / _` || \u0027_ \\  / _` | / _` | / _ \\| \u0027__|"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "         | |__| || ||  __/| |_  | |  | || (_| || | | || (_| || (_| ||  __/| |"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "         |_____/ |_| \\___| \\__| |_|  |_| \\__,_||_| |_| \\__,_| \\__, | \\___||_|"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                                                               __/ |"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                                                              |___/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Welcome to Diet Manager! How may I assist you today?"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "         _____________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |                          Functions:                        |                 Descriptions:                  |"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |____________________________________________________________|________________________________________________|"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL     |  set user\u0027s profile data                       |"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   profile                                                  |  View user profile details                     |"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   record-meal DATE TIME_PERIOD /FOOD_NAME -- CALORIE       |  Record meal info                              |"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   check-meal DATE TIME_PERIOD                              |  Check meals eaten                             |"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   calculate DATE                                           |  Calculate Calorie intake for the day          |"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   calculate DATE1-\u003eDATE2                                   |  Calculate Calorie intake from DATE1 to DATE2  |"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   list-food                                                |  Lists all foods info in database.             |"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   addf FOOD_NAME --CALORIES                                |  Add new food info into database               |"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   delf FOOD_NAME                                           |  Delete food info from database                |"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   set-weight                                               |  Set/Update weight in user profile             |"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   check-weight-progress NAME                               |  List index of weight progress                 |"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   delete-weight INDEX                                      |  Delete weight from the weight progress list   |"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   new-recipe MAXIMUM_FOOD_TYPES ACTIVITY_LEVEL             |  Randomly recommend recipe from database       |"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   show-recipe                                              |  Show recommended recipe to user               |"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   help                                                     |  Show this function help table                 |"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |   exit                                                     |  Exit the application                          |"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        |____________________________________________________________|________________________________________________|"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Please key in your command:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* The application is now ready to be used by entering text-based commands into the command line"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "*Note that most command features are locked until a valid profile has been created. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Only the `set-profile`, `help` and `exit` commands are usable upon first start-up*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Please create a profile before using this command. Enter:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "set-profile {name} {age} {gender} {height} {weight} {weight goal}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 3 Features "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Name is restricted to strings with no spaces."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Age is restricted to whole numbers only."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Gender is restricted to \"male\" or \"female\"."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Height has units in centimetres."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Weight has units in kilograms."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Calories has units in kilocalories."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## 3.1 Profile Features"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Set user profile"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Creates a new profile"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* If profile doesn\u0027t exist, the command will generate a new profile."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* If profile already exist, the command will overwrite the current profile and generate a new profile."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`set-profile John 20 male 180 80 75`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Your profile has been successfully updated."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### View user profile"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "View user profile details"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `profile`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* If profile information is present, displays it to the user."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`profile`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your profile information are as follows:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Name:         John"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Age:          20 years old"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Gender:       male"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Height:       180.00 centimetres"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Weight        80.00 kilograms"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Weight Goal:  75.00 kilograms"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Set user name"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Update name in profile."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `set-name NAME`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`set-name Jane`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "set-name Jane"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your username has been changed to Jane."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Set user age"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Update age in profile."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `set-age AGE`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`set-age 18`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "set-age 18"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your age has been changed to 18."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Set user gender"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Update gender in profile."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `set-age GENDER`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`set-gender female`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "set-gender female"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your gender has been changed to female."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Set user height"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Update height in profile."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `set-height HEIGHT`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`set-height 170`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "set-height 170"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your height has been changed to 170.00."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Set user weight-goal"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Update weight-goal in profile."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `set-weight-goal WEIGHT-GOAL`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`set-weight-goal 65`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "set-weight-goal 65"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your weight goal has been changed to 65.00."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Set user weight"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Update weight in profile when there are changes to user\u0027s weight.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Application will keep track and store records of user\u0027s weight over time."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `set-weight WEIGHT`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`set-weight 70`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "set-weight 70"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your weight has been changed to 70.00."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Delete user weight record"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Delete a specific weight record."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `delete-weight INDEX`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`delete-weight 1`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "delete-weight 1"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Weight Record: 80.0kg has been removed successfully!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Check user weight progress"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Check user weight record progression."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `check-weight-progress`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`check-weight-progress`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* If there is weight loss from beginning:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    check-weight-progress"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    Here is your weight changes record:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    1. 70.0kg"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    2. 60.0kg"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    Overall, you have lost 10.00 kg!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    5.00 kg more to go to meet your dream girl/boy!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* If weight remains the same from beginning:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  check-weight-progress"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  Here is your weight changes record:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  1. 70.0kg"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  There has been no change in your weight!"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  -5.00 kg more to go to meet your dream girl/boy!"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* If there is weight gained from beginning:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    check-weight-progress"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    Here is your weight changes record:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    1. 70.0kg"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    2. 80.0kg"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    Overall, you have gained 10.00 kg!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    -15.00 kg more to go to meet your dream girl/boy!"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    ```  "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "  "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Check user BMI"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Check user BMI and BMI classification."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Format: `check-bmi`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "`check-bmi`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "check-bmi"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Your current BMI : 24.22"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "You can check your height and weight against this table to see which category you fall into."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Check weight first then height."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "LEGEND for BMI Table:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1: UNDERWEIGHT       2: HEALTHY      3: OVERWEIGHT      4: OBESE      5: EXTREMELY OBESE"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " ___________________________________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |                                                      WEIGHT in KG                                                        |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |         | 41 | 45 | 50 | 54 | 59 | 64 | 68 | 73 | 77 | 82 | 86 | 91 | 95 | 100 | 104 | 109 | 113 | 118 | 122 | 127 | 132 |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 142.2   | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 5  | 5  | 5  | 5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 144.7   | 2  | 2  | 2  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  | 5  | 5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 147.3   | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 5  | 5  | 5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 149.8   | 1  | 2  | 2  | 2  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  | 5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 152.4   | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 154.9   | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 157.4   | 1  | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 160.0   | 1  | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  |  4  |  5  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 162.5   | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  |  4  |  4  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 165.1   | 1  | 1  | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  |  4  |  4  |  5  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 167.6   | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  |  4  |  4  |  4  |  5  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 170.1   | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  |  4  |  4  |  4  |  4  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 172.7   | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  |  4  |  4  |  4  |  4  |  5  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "| HEIGHT | 175.2   | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  |  4  |  4  |  4  |  4  |  4  |  5  |  5  |  5  |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|   in   |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|   CM   | 177.8   | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  |  4  |  4  |  4  |  4  |  4  |  4  |  5  |  5  |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 180.3   | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 3  |  4  |  4  |  4  |  4  |  4  |  4  |  4  |  5  |"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 182.8   | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  | 3  |  4  |  4  |  4  |  4  |  4  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 185.4   | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  |  3  |  4  |  4  |  4  |  4  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 187.9   | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  |  3  |  4  |  4  |  4  |  4  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 190.5   | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  |  3  |  3  |  4  |  4  |  4  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 193.0   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  |  3  |  3  |  3  |  4  |  4  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 195.5   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  |  3  |  3  |  3  |  4  |  4  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 198.1   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  |  3  |  3  |  3  |  3  |  4  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 200.6   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  |  3  |  3  |  3  |  3  |  3  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 203.2   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  |  2  |  3  |  3  |  3  |  3  |  4  |  4  |  4  |"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 205.7   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  |  2  |  3  |  3  |  3  |  3  |  3  |  4  |  4  |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 208.2   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  |  2  |  2  |  3  |  3  |  3  |  3  |  3  |  4  |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        |--------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|        | 210.8   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  |  2  |  2  |  3  |  3  |  3  |  3  |  3  |  4  |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "|________|__________________________________________________________________________________________________________________________|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "```"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## 3.2 Daily Food Record Features"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Record meals"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Records meals for the user(so they can refer record history and calculate calories intake later)."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `record-meal DATE TIMEPERIOD /FOOD1 {-- 10.0} /FOOD2 {-- 6.00} /...`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Parameters in `{}` is optional, it denotes the calories content of the `Food`. Also notice that you shouldn\u0027t use `{}`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "in the actual input!"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * If a `Food` item can be found in our database, then no calories info needs to be "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "provided. "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * If no calories info is provided for a `Food` item not in our database, the `record`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    operation can still go on, but that `Food` item doesn\u0027t have calories info."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* You can record as many `Food` items as you want for a meal."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `DATE` is restricted to the range of `Monday` to `Sunday` and `TIMEPERIOD` is restricted to"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`morning/afternoon/night`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If a `Food` item is provided with incorrect calories info(like `/egg -- wow`), then this `Food` item"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "won\u0027t be recorded."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`record-meal Saturday morning /egg prata -- 5 /noodles -- xxx`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "You just record the meal in the morning of: SATURDAY."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Some food/foods are not added due to invalid format."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If enter `check-meal Saturday morning` right now, you expect to see:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "SATURDAY Morning: "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: egg prata, Calories: 5.00cal"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "For morning, total calculable calories intake: 5.00cal."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Check meals"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Check what the `profile` had eaten for a meal."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `check-meal DATE TIMEPERIOD`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `DATE` is restricted to the range of `Monday` to `Sunday` and `TIMEPERIOD` is restricted to"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  `morning/afternoon/night`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`check-meal Monday morning`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If the record doesn\u0027t exist:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY Morning: "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Oops, you have no record for this meal."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    For morning, there are no calculable calories data."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If the record exists:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY Morning: "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Food: egg prata, Calories: 5.00cal"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Food: noodles, Calories: 2.00cal"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    For morning, total calculable calories intake: 7.00cal."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Clear all food records"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Clear all the existing food records in a week."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `clear-records`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`clear-records`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "You have just cleared all food records in the week!"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Check required calories"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Check the required calories for the current `profile` based on the activity level for the day."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Format: `check-required-cal DATE ACTIVITYLEVEL`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "```"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "`DATE` is restricted to the range of `Monday` to `Sunday`."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "`ACTIVITYLEVEL` is restricted to `low`, `moderate` or `high`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "```"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "`check-required-cal Monday low`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* If the profile is trying to gain weight but is having insufficient calories for the day:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories Intake and Requirement for SATURDAY:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Total calculable calories intake for the entire day: 5.00cal."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories requirement for high activity level: 2848.41cal."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Ohh no!!! You have consumed too little calories."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* If the profile is trying to lose weight but is having excess calories for the day:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories Intake and Requirement for WEDNESDAY:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Total calculable calories intake for the entire day: 2805.00cal."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories requirement for moderate activity level: 2559.44cal."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Ohh no!!! You have consumed too much calories"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* If the profile is working towards the weight goal and is having sufficient calories for the day:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories Intake and Requirement for MONDAY:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Total calculable calories intake for the entire day: 2860.00cal."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Calories requirement for low activity level: 2270.47cal."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    Well done!!! You have consumed sufficient calories."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Calculate calories"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Calculates calories intake on a day or during a time period."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Option 1: `calculate {DATE}`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Option 2: `calculate {DATE1}-\u003e{DATE2}`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`DATE` is restricted to the range of `Monday` to `Sunday`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* First let\u0027s record some meals"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  record-meal Monday morning /egg -- 2"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  You just record the meal in the morning of: MONDAY."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  record-meal Monday night /Apple"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  You just record the meal in the night of: MONDAY."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  record-meal Wednesday morning /prata -- 5 /beef -- 10"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  You just record the meal in the morning of: WEDNESDAY."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Then we calculate calories intake from Monday to Wednesday"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  calculate Monday-\u003eWednesday"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  Your Calories intake during the given period is 19.00."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "  * Notice `Apple` is in our database with calories info: 2.00"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## 3.3 Food Nutrition Record Features"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### List food database"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Lists all foods and relevant calories info recorded in our database."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `list-food`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: `list-food`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "These are the foods stored in our database:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Chicken, Calories: 1.00cal"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Apple, Calories: 2.00cal"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Carrots, Calories: 3.00cal"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Rice, Calories: 4.00cal"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Oil, Calories: 5.00cal"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: Tea, Calories: 6.00cal"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Add food into database"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Adds a new food into database."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `addf FOODNAME --CALORIES`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: `addf beef noodles -- 7.0`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "You have added a new food into the database:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Food: beef noodles, Calories: 7.0"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention: If calories info is incorrect, you expect to see:"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Sorry, to add new food to database you must input correct calories info."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "It has to be positive Integer or Float"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Delete food from database"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Deletes a food from the database"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `delf FOODNAME`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If `beef noodles` already in database:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    You have just deleted beef noodles from the database."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If `beef noodles` not in database:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    No need to delete! Referred Food doesn\u0027t exist in database"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## 3.4 Recipe Features"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Get a recommended recipe"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Get a recommend recipe based on user\u0027s physical conditions and activity level."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `new-recipe MAXIMUM_FODD_TYPES ACTIVITY_LEVEL`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Explanation: "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "MAXIMUM_FOOD_TYPES is the maximum number of food types the user want to have in a meal. "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "ACTIVITY_LEVEL has three levels : low/moderate/high. Based on different activity levels the app recommends different recipes."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Attention:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "1.  The maximum number of allowed food types in a meal is 3."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "2.  The recipe is generated randomly, so the same input is expected to get different recipe."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "3.  If user is unsatisfied with the current recipe, just run the command again and get a new one."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `MAXIMUM_NUM` is 2, `ACTIVITY_LEVEL` is low:"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Input: `new-recipe 2 low`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output: "
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "             morning                                                                         afternoon                                                                       night"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY    fried-rice(508.00),white-bread(77.00)                                           fresh-milk(163.00),fishball-noodles-soup(330.00)                                fresh-milk(163.00),soft-drink(120.00)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    TUESDAY   white-bread(77.00),orange-juice(80.00)                                          prawn-noodles-dry(459.00),fresh-milk(163.00)                                    white-bread(77.00),prawn-noodles-dry(459.00)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    WEDNESDAY fried-rice(508.00),fresh-milk(163.00)                                           chicken-rice(702.00)                                                            fried-rice(508.00),soft-drink(120.00)"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY  white-bread(77.00),fishball-noodles-soup(330.00)                                prawn-noodles-dry(459.00),soft-drink(120.00)                                    orange-juice(80.00),prawn-noodles-dry(459.00)"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    FRIDAY    prawn-noodles-dry(459.00),cheeseburger(300.00)                                  soft-drink(120.00),chicken-curry(450.00)                                        soft-drink(120.00),white-bread(77.00)"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SATURDAY  french-fries(450.00),cheeseburger(300.00)                                       white-bread(77.00),orange-juice(80.00)                                          fried-rice(508.00),orange-juice(80.00)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY    chicken-rice(702.00)                                                            fresh-milk(163.00),chicken-curry(450.00)"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* `MAXIMUM_NUM` is 5, `ACTIVITY_LEVEL` is high:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Input: `new-recipe 5 high`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    We support at most 3 kinds of food in a meal, otherwise it\u0027s easy to overtake calories and not good for your health!"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "              morning                                                                         afternoon                                                                       night"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY    white-bread(77.00),fishball-noodles-soup(330.00),chicken-curry(450.00)          soft-drink(120.00),prawn-noodles-dry(459.00),fresh-milk(163.00)                 prawn-noodles-dry(459.00),white-bread(77.00),soft-drink(120.00)"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    TUESDAY   fishball-noodles-soup(330.00),orange-juice(80.00),french-fries(450.00)          soft-drink(120.00),white-bread(77.00),fishball-noodles-soup(330.00)             prawn-noodles-dry(459.00),orange-juice(80.00),fishball-noodles-soup(330.00)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    WEDNESDAY fried-rice(508.00),orange-juice(80.00),fishball-noodles-soup(330.00)            soft-drink(120.00),fried-rice(508.00),cheeseburger(300.00)                      soft-drink(120.00),orange-juice(80.00),cheeseburger(300.00)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY  prawn-noodles-dry(459.00),fishball-noodles-soup(330.00),white-bread(77.00)      soft-drink(120.00),fishball-noodles-soup(330.00),white-bread(77.00)             fried-rice(508.00),cheeseburger(300.00),soft-drink(120.00)"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    FRIDAY    fresh-milk(163.00),white-bread(77.00),chicken-rice(702.00)                      soft-drink(120.00),chicken-curry(450.00),fishball-noodles-soup(330.00)          cheeseburger(300.00),fresh-milk(163.00),orange-juice(80.00)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SATURDAY  chicken-rice(702.00),white-bread(77.00),orange-juice(80.00)                     prawn-noodles-dry(459.00),soft-drink(120.00),cheeseburger(300.00)               orange-juice(80.00),soft-drink(120.00),white-bread(77.00)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY    cheeseburger(300.00),chicken-curry(450.00),orange-juice(80.00)                  prawn-noodles-dry(459.00),white-bread(77.00),cheeseburger(300.00)               chicken-rice(702.00),orange-juice(80.00),white-bread(77.00)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### View recipe"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Show the recipe recommended for the user."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `show-recipe`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage:`show-recipe`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If no recipe exists:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "              morning                                                     afternoon                                                   night"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY                                                                                                                           "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    TUESDAY                                                                                                                          "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    WEDNESDAY                                                                                                                        "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY                                                                                                                         "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    FRIDAY                                                                                                                           "
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SATURDAY                                                                                                                         "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY                                                                                                                           "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* If recipe exists:"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Expected Output:"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "              morning                                                                         afternoon                                                                       night"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY    fried-rice(508.00),white-bread(77.00)                                           fresh-milk(163.00),fishball-noodles-soup(330.00)                                fresh-milk(163.00),soft-drink(120.00)"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    TUESDAY   white-bread(77.00),orange-juice(80.00)                                          prawn-noodles-dry(459.00),fresh-milk(163.00)                                    white-bread(77.00),prawn-noodles-dry(459.00)"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    WEDNESDAY fried-rice(508.00),fresh-milk(163.00)                                           chicken-rice(702.00)                                                            fried-rice(508.00),soft-drink(120.00)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY  white-bread(77.00),fishball-noodles-soup(330.00)                                prawn-noodles-dry(459.00),soft-drink(120.00)                                    orange-juice(80.00),prawn-noodles-dry(459.00)"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    FRIDAY    prawn-noodles-dry(459.00),cheeseburger(300.00)                                  soft-drink(120.00),chicken-curry(450.00)                                        soft-drink(120.00),white-bread(77.00)"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SATURDAY  french-fries(450.00),cheeseburger(300.00)                                       white-bread(77.00),orange-juice(80.00)                                          fried-rice(508.00),orange-juice(80.00)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY    chicken-rice(702.00)                                                            fresh-milk(163.00),chicken-curry(450.00)"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## 3.5 Utility Features"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Help"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Show the help function table with supported commands."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "```"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     _____________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |                          Functions:                        |                 Descriptions:                  |"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |____________________________________________________________|________________________________________________|"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL     |  set user\u0027s profile data                       |"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   profile                                                  |  View user profile details                     |"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   record-meal DATE TIME_PERIOD /FOOD_NAME -- CALORIE       |  Record meal info                              |"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   check-meal DATE TIME_PERIOD                              |  Check meals eaten                             |"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    |   clear-records                                            |  Clear all food records                        |"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   calculate DATE                                           |  Calculate Calorie intake for the day          |"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   calculate DATE1-\u003eDATE2                                   |  Calculate Calorie intake from DATE1 to DATE2  |"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   list-food                                                |  Lists all foods info in database.             |"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   addf FOOD_NAME --CALORIES                                |  Add new food info into database               |"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   delf FOOD_NAME                                           |  Delete food info from database                |"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   update-weight                                            |  Update weight in user profile                 |"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   check-weight-progress NAME                               |  List index of weight progress                 |"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   delete-weight INDEX                                      |  Delete weight from the weight progress list   |"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   new-recipe MAXIMUM_FOOD_TYPES ACTIVITY_LEVEL             |  Randomly recommend recipe from database       |"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   show-recipe                                              |  Show recommended recipe to user               |"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   help                                                     |  Show this function help table                 |"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |   exit                                                     |  Exit the application                          |"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    |____________________________________________________________|________________________________________________|"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "```"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Exit application"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Terminates and exits the application."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Thanks for using Diet Manager! See you again soon :)"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "```"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 4 FAQ"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**Q**: What do I do if the application cannot be launched? "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**A**: Ensure that you have Java 11 and above installed on your device, "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "and that you have the most updated version of the application."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**Q**: How do I transfer my data to another device? "
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**A**: All recorded user-related data will be stored in a folder when running the application. "
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Simply copying and moving that specific folder would be sufficient."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**Q**: What if I want to use this application for multiple users on the same device? "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**A**: The application is localised and user data is dependent on the specific data files present."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Simply switch the data files to that of another user, or have multiple folders present for multiple users."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**Q**: Can I directly change the data in the data files? "
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**A**: You can, but it is strongly discouraged as it could lead to the data file being corrupt and the application"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "being forced to delete the data file and create a new one."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## 5 Command Summary"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "No. | Command | Description"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "----| ------- | -----------"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1|`set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL`|Creates a new profile"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2|`profile`| View user profile details"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3|`set-name NAME`| Update name in profile."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "4|`set-age AGE`| Update age in profile."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "5|`set-age GENDER`| Update gender in profile."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "6|`set-height HEIGHT`| Update height in profile."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "7|`set-weight-goal WEIGHT-GOAL`| Update weight-goal in profile."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "8|`set-weight WEIGHT`| Update weight in profile."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "9|`delete-weight INDEX`| Delete a specific weight record."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "10|`check-weight-progress`| Check user weight record progression."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "11|`check-bmi`| Check user BMI and BMI classification."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "3  | `record-meal` | Record a meal"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "4  | `check-meal` | Check a meal "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "5 | `clear-records`| Clear all food records"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "6  | `check-required-cal` | Check calories required for an activity level"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "7  | `calculate` | Calculates calories intake on a day or during a time period"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "8  | `list-food` | List all foods recorded in the database "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "9  | `addf` | Add a new food into database"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "10  | `delf` | Delete a food from the database"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "11 | `new-recipe` | Create a recommended recipe for user"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "12 | `show-recipe` | Show the recipe recommended for user"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "22|`help`| Show the help function table with supported commands."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "23|`exit`| Terminates and exits the application."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Click [here](README.md) to go back to the main page."
      }
    ],
    "authorContributionMap": {
      "dejunnn": 426,
      "lamyuewei": 40,
      "DDzuikeai": 307,
      "-": 27,
      "yuxianglim": 34
    }
  },
  {
    "path": "docs/team/ddzuikeai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "# Yan Chenghao (DDzuikeai) - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "1. [Overview](#overview)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "2. [Summary of Contributions](#summary-of-contributions)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "3. [Contributions to the User Guide](#contributions-to-the-user-guide)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "4. [Contributions to the Developer Guide](#contributions-to-the-developer-guide)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "5. [Contributions to team-based tasks ](#contributions-to-team-based-tasks)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Diet Manager is an personal text-based chat-bot application used for managing an individual\u0027s diet."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Diet Manager is capable of tracking daily food intake and providing recommendations depending on a user\u0027s specified"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "health data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "---"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "**__Diet Manager__**:\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Link to code on tP Code Dashboard "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "[**__here__**](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dddzuikeai)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Implement the `record-meal` and `check-meal` feature"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* What it does: It allows user to record and check their meals."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Justification: These two features improve the utility of the app since now user can use it to track"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "their daily meals."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Highlights: The `record-meal` feature allows user to record as many food types as they want in a meal, and give"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "them the freedom to provide calories info together with foods or not. If the food can be found in database, then the "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "app can automatically calculate calories intake for the user. If not in database, the user can provide calories info"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "so the app still can trace calories intake."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Implement the `addf` and `delf` feature"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* What it does: It allows user to add foods and delete foods from our database."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Justification: These features provide the user the way to customize their personal product. Because"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "they can change the database easily based on personal tastes and eating habits. It improve the utility"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "and convenience of the app."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Highlights: These two features work also influence the `recommend` feature, because the app will customize"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "the recipe based on foods in database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Implement the `recommend` feature"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* What it does: It allows user to get recommended recipe based on their physical conditions and personal needs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Justification: This feature eliminates user\u0027s trouble to plan for each meal. They can easily get combinations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "of food that can satisfy their calories intake needs."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Highlights: The command is flexible, can adjust the recipe from two aspects. One is maximum food types in each"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "meal, the other is one\u0027s activity level(low/moderate/high) which indicates different levels of calories needs."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "#### Other enhancements"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Implement the `clear-records` feature to enable user clear all their records."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Implement the `calculate` feature which enables user to calculate their calories intake on a day or during a time period."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Add DailyFoodRecord class and related codes to support all kinds of operations related to food record."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Which sections did you contribute to the UG?"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Documented the details of following features (feature 1-12 in the UG):"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Set user profile"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * View user profile"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Record meals"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Check meals"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Clear food records"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Check required calories"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Calculate calories"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * List food database"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Add food into database"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Delete food from database"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Get a recommended recipe"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * View recipe"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Contributions to the Developer Guide: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Which sections did you contribute to the DG? "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Help in building framework."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * Documented the implementation of Record Meal Feature."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "* Which UML diagrams did you add/updated?"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    * The sequence diagrams that explain the workflow of record meal feature."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Generate Command:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ![Step1. Diagram](../images/Record_step1.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Execute and Save Result:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    ![Step2. Diagram](../images/Record_step2.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "### Contributions to team-based tasks "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "Help review teammates\u0027 PR and provide suggestions."
      }
    ],
    "authorContributionMap": {
      "DDzuikeai": 95
    }
  },
  {
    "path": "docs/team/dejunnn.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "# Tan De Jun (@dejunnn) - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "1. [Overview](#overview)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "2. [Summary of Contributions](#summary-of-contributions)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "3. [Contributions to the User Guide](#contributions-to-the-user-guide)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "4. [Contributions to the Developer Guide](#contributions-to-the-developer-guide)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "A short overview of your product to provide some context to the reader. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The opening 1-2 sentences may be reused by all team members. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "If your product overview extends beyond 1-2 sentences, the remainder should be written by yourself."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager is an personal text-based chat-bot application used for managing an individual\u0027s diet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Diet Manager is capable of tracking daily food intake and providing recommendations depending on a user\u0027s specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "health data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "---"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "**Diet Manager**:\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Link to code on tP Code Dashboard "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "[**here**](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ddejunnn)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* A summary of the enhancements you implemented."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Which sections did you contribute to the UG?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Contributions to the DG: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Which sections did you contribute to the DG? "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Which UML diagrams did you add/updated?"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Contributions to team-based tasks "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Review/mentoring contributions: Links to PRs reviewed, instances of helping team members in other ways"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Evidence of helping others e.g. responses you posted in our forum, bugs you reported in other team\u0027s products,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Evidence of technical leadership e.g. sharing useful information in the forum"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* Keep in mind that evaluators will use the PPP to estimate your project effort. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "* We recommend that you mention things that will earn you a fair score e.g., explain how deep the enhancement is, "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "why it is complete, how hard it was to implement etc.."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Reproduce the parts in the User Guide that you wrote. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "This can include features you implemented as well as features you propose to implement."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "The purpose of allowing you to include proposed features is to "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "provide you more flexibility to show your documentation skills. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "e.g. you can bring in a proposed feature just to give you an opportunity "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "to use a UML diagram type not used by the actual features."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Reproduce the parts in the Developer Guide that you wrote. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "Ensure there is enough content to evaluate your technical documentation skills and UML modelling skills. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "You can include descriptions of your design/implementations, possible alternatives, pros and cons of alternatives, etc."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 80
    }
  },
  {
    "path": "docs/team/lamyuewei.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "# Lam Yue Wei - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "1. [Overview](#overview)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "2. [Summary of Contributions](#summary-of-contributions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "3. [Contributions to the User Guide](#contributions-to-the-user-guide)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "4. [Contributions to the Developer Guide](#contributions-to-the-developer-guide)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Diet Manager is an personalized chat-bot application used for managing an individual\u0027s diet."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Diet Manager is capable of tracking daily food intake and providing recommendations based on a user\u0027s specified"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "health data and weight goal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "**__Diet Manager__**:\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "Link to code on tP Code Dashboard "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "[**__here__**](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dlamyuewei\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "1. Created the FoodNutritionInfo class which serves as a food bank allowing user to record food into their daily meal record from the food that is stored in the food bank."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "2. Enabled users to view all the food stored in the food bank via user input command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "3. Created the Food class which allowed users to create food to store into their daily meal record with or without the Nutrition value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    * This enhancement is tougher to implement as I needed to break down the user input into several cases in order to record the meal.\u003cbr\u003e "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        * If the user keyed in food name and nutrition value, the meal will store the food according to the user input.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        * Else if the user keyed in food name without nutrition value and the food exists in the food bank, the meal will store the food taken from the food bank.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        * Else the meal will store the food name without any nutrition value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    * There were some difficulties faced during the implementation of the enhancement as I needed to deal with cases where the Nutrition value of a food may or may not exist. \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    To overcome this challenge, I had to use the Optional class and Streams Methods provided by the java api. I also had to be mindful constantly to ensure I lay out proper checks of the Optional values before obtaining the values in order to prevent any crashes in our program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "4. Incorporate the nutrition values into the DailyFoodRecord class to enabled user to view their daily meals with the associated food name and nutrition value if it exists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "5. Enabled users to check the calories requirement based on their activity level and their food consumption for the day."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    * The challenge in this enhancement implementation comes with the need to carefully break down the scenario constantly."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        * Firstly, there is a need to calculate the person\u0027s BMI using different formula depending on whether the profile belongs to a male or female. \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        * Secondly, there is a need to calculate the person\u0027s required calories using different formula depending on the profile\u0027s activity level for the day (i.e. low, moderate, high). \u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        * Thirdly, there is a need to compare the required calories to the calories intake of the person, and the result shown to the user then depends on whether the user is trying to gain weight or lose weight."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "I contributed to the User Guide under the section of check required calories. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Provided an introduction to the features of the method"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Provided the format of using the command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Provided some key information that the user has to take note of when using the command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Provided examples of usages of the command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Provided some 3 sample outputs that the user will likely see as the result individuals might see differs since some profile might want to gain weight while others might want to lose weight"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "I also contributed to the User Guide under the section of set user profile."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Added some key information of the units used for the user to take note of when using the command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "I contributed to the Developer Guide under the section of profile component and food component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Stated the responsibility of the 2 component"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "* Provided a description for the classes that the 2 component consists of"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### Review/mentoring contributions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "To be completed..."
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 74
    }
  },
  {
    "path": "docs/team/yuxianglim.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "# Lam Yue Wei - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "## Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "1. [Overview](#overview)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "2. [Summary of Contributions](#summary-of-contributions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "3. [Contributions to the User Guide](#contributions-to-the-user-guide)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "4. [Contributions to the Developer Guide](#contributions-to-the-developer-guide)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Diet Manager is an personalized chat-bot application used for managing an individual\u0027s diet."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Diet Manager is capable of tracking daily food intake and providing recommendations based on a user\u0027s specified"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "health data and weight goal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "**__Diet Manager__**:\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Link to code on tP Code Dashboard "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "[**__here__**](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyuxianglim\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "1. Created the CheckWeightProgress class which allows users to check their past weight records from the beginning till present."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    * The enhancement to this function is the ability to show the difference in weight of the user from the initial record to present and output message from the message bank in relative to the progress."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    * There might be further enhancement such as showing the % gain or loss in weight of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "2. Created/ updated set-weight and update-weight(removed) to allow user to store their weight in an Arraylist that is tied to their profile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "3. Added(Not yet done) Calculate BMI function of the user and comparing it to the BMI database to check if user is in healthy or unhealthy range."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "4. Added delete weight functions to enable user to delete the stored weight based on the index of the weight stored."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "5. Added help functions to enable user to check for help while using the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    * There was some slight hiccup in the process as gradle test allows for only 120 character per line. However i wished to implement a full table with sample inputs for user as it is more intuitive when using the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    * Also added the help table to show at the launch of the program as this will be more user-friendly to all users as they do not have to refer to the user guide that often."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    * Below is the original table which contains the sample input for user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    No. | Functions: | Descriptions: | Example: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    ---| --- | --- | ---"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    1  | `set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL  ` | set user\u0027s profile data |  (eg. set-profile John 20 male 180 80 75 )"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    2  | `profile` | View user profile details | (eg. profile)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    3  | `record-meal DATE TIME_PERIOD /FOOD_NAME -- CALORIE` | Record meal info | (eg. record-meal Monday morning /prata -- 10.0 /milk -- 6.00 )"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    4  | `check-meal DATE TIME_PERIOD` |Check meals eaten | (eg. check-meal Monday morning )"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    5  | `calculate DATE` | Calculate Calorie intake for the day | (eg.calculate Monday)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    6  | `calculate DATE1-\u003eDATE2` | Calculate Calorie intake from DATE1 to DATE2 | (eg. calculate Monday-\u003eWednesday )"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    7  | `list-food` | List all foods recorded in the database  | (eg. list-food )"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    8  | `addf FOOD_NAME --CALORIES` | Add a new food into database | (eg. addf beef noodles -- 7.0 )"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    9  | `delf FOOD_NAME` | Delete a food from the database | (eg. delf beef noodles )"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    10 | `new-recipe MAXIMUM_FOOD_TYPES ACTIVITY_LEVEL` | Randomly recommend recipe from database | (eg. new-recipe 2 low )"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    11 | `show-recipe` | Show the recipe recommended for user | (eg. show-recipe ) "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    12 | `set-weight ` | Update user\u0027s weight changes | (eg. set-weight 70 )"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    13 | `check-weight-progress NAME` | Check user\u0027s weight progress | (eg. check-weight-progress John )"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    14 | `delete-weight` | Delete user\u0027s weight from progress | (eg. delete-weight 2 ) "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    15 | `help` | Show the help function table |  (eg. help )"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    16 | `exit` | Exit application | (eg. exit )"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "I contributed to the User Guide under the section of check weight progress. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided an introduction to the features of the method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the format of using the command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the 3 different sample output that will be shown to user based on weight difference"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "I contributed to the User Guide under the section of set-weight. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided an introduction to the features of the method"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the format of using the command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the sample output that will be shown to user upon set-weight command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "I contributed to the User Guide under the section of delete-weight. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided an introduction to the features of the method"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the format of using the command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the different sample output that will be shown to user when user deletes the weight stored based on index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "I contributed to the User Guide under the section of help."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided an introduction to the features of the method"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the format of using the command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Provided the sample output which contains the help table that will be shown to user when the help command is entered"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "I also contributed to the User Guide under the section of command summary"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Updated the table of functions available currently available"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "I contributed to the Developer Guide under the section of ..."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "### Review/mentoring contributions"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "To be completed..."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "To be completed..."
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 100
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/DietManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.AppManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * DietManager is the main class responsible for launching the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class DietManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Launches the Diet Manager application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        AppManager.launch();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 19
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/core/LogsCentre.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class LogsCentre {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final String LOGGER_FILE_NAME \u003d \"DietManagerLogger.log\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the InfoLogger to record information when running the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public LogsCentre() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger \u003d Logger.getLogger(LogsCentre.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.initialiseConsoleHandler();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.initialiseFileHandler();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Initialises the File Handler, and sets Log Level priority at FINE."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void initialiseFileHandler() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(LOGGER_FILE_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            fileHandler.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.logger.log(Level.SEVERE, \"File logger error.\", e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Initialises the Console Handler, and sets Log Level priority at INFO."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void initialiseConsoleHandler() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        consoleHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeFineLog(String message) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.FINE, message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeInfoLog(String message) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeWarningLog(String message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.WARNING, message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeSevereLog(String message) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.SEVERE, message);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void logExecuteProgramme() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, \"Starting Diet Manager\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void logExitProgramme() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logger.log(Level.INFO, \"Exiting Diet Manager\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 77
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/core/MessageBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class MessageBank {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String LOGO \u003d \"  _____   _        _     __  __\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" |  __ \\\\ (_)      | |   |  \\\\/  |\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |  | | _   ___ | |_  | \\\\  / |  __ _  _ __    __ _   __ _   ___  _ __\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |  | || | / _ \\\\| __| | |\\\\/| | / _` || \u0027_ \\\\  / _` | / _` | / _ \\\\| \u0027__|\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" | |__| || ||  __/| |_  | |  | || (_| || | | || (_| || (_| ||  __/| |\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \" |_____/ |_| \\\\___| \\\\__| |_|  |_| \\\\__,_||_| |_| \\\\__,_| \\\\__, | \\\\___||_|\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"                                                       __/ |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"                                                      |___/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String WELCOME_MESSAGE \u003d \"Welcome to Diet Manager! How may I assist you today?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_COMMAND_MESSAGE \u003d \"Sorry, that is an invalid command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_FORMAT_MESSAGE \u003d \"Sorry, that is an invalid command format.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INVALID_GENDER_MESSAGE \u003d \"Sorry, that is an invalid gender.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String INVALID_AGE_MESSAGE \u003d \"Sorry, that is an invalid age.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String FILE_ERROR_MESSAGE \u003d \"An error has occurred with the data files.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String EXIT_COMMAND_MESSAGE \u003d \"You are now exiting the application.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String EXIT_APP_MESSAGE \u003d \"Thanks for using Diet Manager! See you again soon. :)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String NAME_CHANGE_MESSAGE \u003d \"Your username has been changed to \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String GENDER_CHANGE_MESSAGE \u003d \"Your gender has been changed to \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String HEIGHT_CHANGE_MESSAGE \u003d \"Your height has been changed to \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String AGE_CHANGE_MESSAGE \u003d \"Your age has been changed to \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String WEIGHT_CHANGE_MESSAGE \u003d \"Your weight has been changed to \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String WEIGHT_GOAL_CHANGE_MESSAGE \u003d \"Your weight goal has been changed to \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String SHOW_PROFILE_MESSAGE \u003d \"Your profile information are as follows:\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String PROFILE_UPDATE_MESSAGE \u003d \"Your profile has been successfully updated.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_PROFILE_MESSAGE \u003d \"No valid profile found. To create a new profile, enter:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"set-profile {name} {age} {gender} {height} {weight} {weight goal}\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String CREATE_PROFILE_MESSAGE \u003d \"Please create a profile before using this command. Enter: \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"set-profile {name} {age} {gender} {height} {weight} {weight goal}\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String BREAKFAST_RECORD_MESSAGE \u003d \"You just record the meal in the morning of: \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String LUNCH_RECORD_MESSAGE \u003d \"You just record the meal in the afternoon of: \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String DINNER_RECORD_MESSAGE \u003d \"You just record the meal in the night of: \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String MEAL_TYPE_ERROR \u003d \"You have given wrong description of time!!!\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"Choose from: morning/afternoon/night.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String CHECK_WEIGHT_RECORD_MESSAGE \u003d \"Here is your weight changes record:\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_DELETED_MESSAGE \u003d \"has been removed successfully!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String INVALID_INDEX \u003d \"Invalid index of weight! Please check and try again.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String WEIGHT_LOSS_MESSAGE \u003d \"Overall, you have lost %.2f kg!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String WEIGHT_NO_CHANGE_MESSAGE \u003d \"There has been no change in your weight!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String WEIGHT_GAIN_MESSAGE \u003d \"Overall, you have gained %.2f kg!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String FOOD_DATABASE_MESSAGE \u003d \"These are the foods stored in our database:\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_FOOD_FORMAT_ERROR \u003d \"Some food/foods are not added due to invalid calories info.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String CALORIES_MESSAGE \u003d \"Total calculable calories intake for the entire day: \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static String TIME_CALORIES_MESSAGE \u003d \"total calculable calories intake: \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String MISSING_CALORIES_MESSAGE \u003d \"NOTE: There are foods without calculable calories.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String NO_CALORIES_MESSAGE \u003d \"There are no calculable calories data for the entire day.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String NO_TIME_CALORIES_MESSAGE \u003d \"there are no calculable calories data.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_CALORIES_REQUIREMENT_ERROR \u003d \"You have given invalid activity level.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String SUFFICIENT_CALORIES_MESSAGE \u003d \"Well done!!! You have consumed sufficient calories.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INSUFFICIENT_CALORIES_MESSAGE \u003d \"Ohh no!!! You have consumed too little calories.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String EXCESS_CALORIES_MESSAGE \u003d \"Ohh no!!! You have consumed too much calories.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String CALCULATE_CALORIES_MESSAGE \u003d \"Your Calories intake during the given period is \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String NO_DESCRIPTION_MESSAGE \u003d \"This command must follow by description! Please input again!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String INVALID_DATE_MESSAGE \u003d \"You should choose a date from {Monday} to {Sunday}!\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"Either uppercase or lowercase is supported!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String RECORDS_CLEARED_MESSAGE \u003d \"You have just cleared all food records in the week!\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String LINE_SEPARATOR \u003d \"----------------------------------------------------------------\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String WEIGHT_GOAL_ACHIEVED_MESSAGE \u003d \"YOU DID IT! You have achieved your weight goal!\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"All girls/boys will now fall for your determination and physique! :)\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + \"You can also set a new weight goal using set-weight-goal NEW_GOAL\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static String WEIGHT_GOAL_NOT_ACHIEVED_MESSAGE \u003d \"%.2f kg more to go to meet your dream girl/boy!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String INCORRECT_CALORIES_INFO_MESSAGE \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            \"Sorry, to add new food to database you must input correct calories info.\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + System.lineSeparator() + \"It has to be positive Integer or Float\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String ADDED_FOOD_ALREADY_EXIST_MESSAGE \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            \"No need to add! We already have this food in our database!\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String NEW_FOOD_ADDED_MESSAGE \u003d \"You have added a new food into the database:\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String FOOD_TO_DELETE_NOT_EXIST_MESSAGE \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            \"No need to delete! Referred Food doesn\u0027t exist in database\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String FOOD_DELETED_MESSAGE \u003d \"You have just deleted this food from the database: \";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String INCORRECT_PARAMS_TO_BUILD_RECIPE_MESSAGE \u003d \"You have given wrong format for parameters!!!\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"First parameter is maximum food types, need to provide an integer.\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"Second parameter is activity level, choose from -- low/moderate/high.\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String EXCEEDS_MAX_FOOD_TYPES_MESSAGE \u003d \"We support at most 3 kinds of food in a meal, \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + \"otherwise it\u0027s easy to overtake calories and not good for your health!\\n\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String CHECK_REQUIRED_CAL_COMMAND_PROMPT \u003d \"check-required-cal\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String FUNCTION_LIST \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            \" _______________________________________________________________________\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"______________________________________\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|                          Functions:                        |\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"                 Descriptions:                  |\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|____________________________________________________________|\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"________________________________________________|\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   set-profile NAME AGE GENDER HEIGHT WEIGHT WEIGHTGOAL     |\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  set user\u0027s profile data                       |\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   profile                                                  |\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  View user profile details                     |\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   record-meal DATE TIME_PERIOD /FOOD_NAME -- CALORIE       |\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Record meal info                              |\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   check-meal DATE TIME_PERIOD                              |\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Check meals eaten                             |\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   calculate DATE                                           |\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Calculate Calorie intake for the day          |\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   calculate DATE1-\u003eDATE2                                   |\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Calculate Calorie intake from DATE1 to DATE2  |\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   list-food                                                |\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Lists all foods info in database.             |\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   addf FOOD_NAME --CALORIES                                |\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Add new food info into database               |\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   delf FOOD_NAME                                           |\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Delete food info from database                |\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   set-weight                                               |\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Set/Update weight in user profile             |\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   check-weight-progress NAME                               |\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  List index of weight progress                 |\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   delete-weight INDEX                                      |\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Delete weight from the weight progress list   |\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   new-recipe MAXIMUM_FOOD_TYPES ACTIVITY_LEVEL             |\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Randomly recommend recipe from database       |\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   show-recipe                                              |\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Show recommended recipe to user               |\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   help                                                     |\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Show this function help table                 |\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|   exit                                                     |\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"  Exit the application                          |\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"|____________________________________________________________|\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + \"________________________________________________|\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"Please key in your command: \";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String BMI_TABLE_MESSAGE \u003d \"You can check your height and weight against this table\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            + \" to see which category you fall into.\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            + \"Check weight first then height.\\n\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String BMI_TABLE_LEGEND \u003d \"\\nLEGEND for BMI Table:\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            + \"1: UNDERWEIGHT       2: HEALTHY      3: OVERWEIGHT      \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            + \"4: OBESE      5: EXTREMELY OBESE\\n\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String BMI_TABLE \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            \" _______________________________________________________________________________________\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"____________________________________________\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |                                                      WEIGHT in KG             \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"                                           |\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |         | 41 | 45 | 50 | 54 | 59 | 64 | 68 | 73 | 77 | 82 | 86 | 91 | 95 | 100\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" | 104 | 109 | 113 | 118 | 122 | 127 | 132 |\\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 142.2   | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 5  | 5  | 5  | 5  |  5 \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 144.7   | 2  | 2  | 2  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  | 5  | 5  |  5 \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 147.3   | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 5  | 5  | 5  |  5 \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 149.8   | 1  | 2  | 2  | 2  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  | 5  |  5 \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 152.4   | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  |  5 \""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 154.9   | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  | 5  |  5 \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 157.4   | 1  | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  |  5 \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 160.0   | 1  | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  | 4  |  4 \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  5  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 162.5   | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  |  4 \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 165.1   | 1  | 1  | 1  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  | 4  |  4 \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  5  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 167.6   | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  |  4 \""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  5  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 170.1   | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  | 4  |  4 \""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 172.7   | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  |  4 \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  5  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"| HEIGHT | 175.2   | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  | 4  |  4 \""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  4  |  5  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|   in   |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|   CM   | 177.8   | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 4  |  4 \""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  4  |  4  |  5  |  5  |\\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 180.3   | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  | 3  |  4 \""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  4  |  4  |  4  |  5  |\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 182.8   | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  | 3  |  4 \""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  4  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 185.4   | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 3  | 3  | 3  |  3 \""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  4  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 187.9   | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  |  3 \""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  4  |  4  |  4  |  4  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 190.5   | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  | 3  |  3 \""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  3  |  4  |  4  |  4  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 193.0   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  |  3 \""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  3  |  3  |  4  |  4  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 195.5   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  | 3  |  3 \""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  3  |  3  |  4  |  4  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 198.1   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  |  3 \""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  3  |  3  |  3  |  4  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 200.6   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  |  3 \""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  3  |  3  |  3  |  3  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 203.2   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  | 2  |  2 \""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  3  |  3  |  3  |  3  |  4  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 205.7   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  |  2 \""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  3  |  3  |  3  |  3  |  3  |  4  |  4  |\\n\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 208.2   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  | 2  |  2 \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  2  |  3  |  3  |  3  |  3  |  3  |  4  |\\n\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        |-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"-------------------------------------------|\\n\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|        | 210.8   | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 1  | 2  | 2  | 2  |  2 \""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \" |  2  |  3  |  3  |  3  |  3  |  3  |  4  |\\n\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"|________|_______________________________________________________________________________\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    + \"___________________________________________|\\n\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String USER_BMI_MESSAGE \u003d \"Your current BMI : %.2f\\n\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 85,
      "lamyuewei": 5,
      "DDzuikeai": 79,
      "yuxianglim": 143
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/core/Weekday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public enum Weekday {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    MONDAY(1, \"MONDAY\"), TUESDAY(2, \"TUESDAY\"), WEDNESDAY(3, \"WEDNESDAY\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    THURSDAY(4, \"THURSDAY\"), FRIDAY(5, \"FRIDAY\"), SATURDAY(6, \"SATURDAY\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    SUNDAY(7, \"SUNDAY\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    Weekday(int index, String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "DDzuikeai": 22
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidAgeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidAgeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidCaloriesException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidCaloriesException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidFoodNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidFoodNameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidGenderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class InvalidGenderException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "lamyuewei": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidHeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidHeightException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidNameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/InvalidWeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class InvalidWeightException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 4
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/commons/exceptions/NegativeNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class NegativeNumberException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "DDzuikeai": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/AppManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.LogsCentre;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * AppManager is the public class responsible for running and handling the logic flow of the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class AppManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * LogsCentre handles the recording of logs for the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static LogsCentre logsCentre;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * FoodNutritionRecord handles the storing of food nutritional information."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static FoodNutritionRecord foodNutritionRecord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Profile stores all user-related information."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Profile profile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * UI handles all user-interface-based functions."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static UI ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Storage handles all storage-based functions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Launches the application by initialising the required objects and running the application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void launch() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        initialiseApplication();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        runApplication();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Runs the application by handling the logic flow and user inputs."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void runApplication() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logsCentre.logExecuteProgramme();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.displayWelcomeMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.displayHelpMenu();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        while (!ui.isExitStatus()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String userInput \u003d ui.readInput();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                Optional\u003cCommand\u003e command \u003d CommandParser.parseInput(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                if (command.isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    if (isCommandValid(command.get())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        Result result \u003d command.get().execute(profile, ui);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        ui.showMessage(result.showResult());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        ui.displayCreateProfileMessage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    ui.displayInvalidCommandMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (InvalidFormatException | NumberFormatException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayInvalidFormatMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayInvalidCommandMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayIndexOutOfBoundMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (profile.isProfileExist()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                storage.writeProfileFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                storage.writeRecipeFile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                storage.writeFoodRecordFile();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            storage.writeFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.displayExitMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logsCentre.logExitProgramme();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Initialises the application by creating the relevant objects and checking application status."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void initialiseApplication() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        logsCentre \u003d new LogsCentre();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile \u003d new Profile();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecord \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        storage \u003d new Storage(ui, logsCentre, profile, foodNutritionRecord);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Check validity of commands depending on whether profile has been created."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return validity of Command being executed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static boolean isCommandValid(Command command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (profile.isProfileExist() || command.getCommand().equals(\"set-profile\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                || command.getCommand().equals(\"help\") || command.getCommand().equals(\"exit\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for the program before running."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void testAssertions() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (!ui.isExitStatus());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 139,
      "DDzuikeai": 2
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/Result.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Result is the public class responsible for storing results derived from execution of the Command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Result {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The results derived from execution of a command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String commandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Result object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param commandResult The results derived from execution of a command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result(String commandResult) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.commandResult \u003d commandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the results derived from the execution of a command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the results derived from the execution of a command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String showResult() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.commandResult;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 37
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/AddFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private Double calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidCaloriesInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean success;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public AddFoodCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            String[] foodDescription \u003d descriptionArray[0].split(\"--\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.foodName \u003d foodDescription[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.calories \u003d Double.parseDouble(foodDescription[1].trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (this.calories \u003c\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidCaloriesInfo \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidCaloriesInfo \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription \u0026\u0026 !this.isInvalidCaloriesInfo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.success \u003d foodInfo.addFoodNutritionRecord(foodName, calories);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidCaloriesInfo) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.resultString \u003d MessageBank.INCORRECT_CALORIES_INFO_MESSAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (!this.success) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.resultString \u003d MessageBank.ADDED_FOOD_ALREADY_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.resultString \u003d MessageBank.NEW_FOOD_ADDED_MESSAGE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + \"Food: \" + foodName + \", Calories: \" + calories;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 16,
      "DDzuikeai": 54
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/BuildNewRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.NegativeNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.RecipeManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class BuildNewRecipeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean maxNumOverflow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noProfileFound;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String activityLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private int maxFoodNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the command object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws InvalidFormatException if the command doesn\u0027t contain correct number of parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public BuildNewRecipeCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidFormat \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noProfileFound \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.maxFoodNum \u003d Integer.parseInt(descriptionArray[0].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.activityLevel \u003d descriptionArray[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            switch (activityLevel) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"low\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"high\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"moderate\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isInvalidFormat \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (maxFoodNum \u003c\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                throw new NegativeNumberException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NumberFormatException | NegativeNumberException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidFormat \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!profile.isProfileExist()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            noProfileFound \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!noDescription \u0026\u0026 !isInvalidFormat \u0026 !noProfileFound) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            RecipeManager manager \u003d RecipeManager.getInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            maxNumOverflow \u003d manager.buildRecipe(profile, maxFoodNum, activityLevel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.resultString \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (noDescription) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (noProfileFound) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (isInvalidFormat) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.resultString \u003d MessageBank.INCORRECT_PARAMS_TO_BUILD_RECIPE_MESSAGE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (maxNumOverflow) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                this.resultString \u003d MessageBank.EXCEEDS_MAX_FOOD_TYPES_MESSAGE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString +\u003d RecipeManager.getInstance().getRecipe();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 18,
      "DDzuikeai": 77
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CalculateCaloriesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class CalculateCaloriesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Beginning day of the queried time period."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String begin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Last day of the queried time period."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Represents whether the command is querying a day or a time period."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isOneDay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Total calories intake."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private double sum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isCircle \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the command description entered by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CalculateCaloriesCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.sum \u003d 0.00;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            String[] timeDescription \u003d descriptionArray[0].split(\"-\u003e\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.begin \u003d timeDescription[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.begin);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            switch (timeDescription.length) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isOneDay \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                this.end \u003d timeDescription[1].trim().toUpperCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                Weekday.valueOf(this.end);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isOneDay \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isOneDay \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Calculates the calories intake during given time period."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile the object containing user profile information."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param ui      the object containing user interface functions."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription | this.isInvalidDate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isOneDay) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            DailyFoodRecord record \u003d profile.getRecordOfDay(this.begin);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (record.getDailyCalories().isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                assert record.getDailyCalories().isPresent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                sum +\u003d record.getDailyCalories().get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday firstDay;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday lastDay;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            DailyFoodRecord curRecord;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            firstDay \u003d Weekday.valueOf(this.begin);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            lastDay \u003d Weekday.valueOf(this.end);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (lastDay.getIndex() \u003c firstDay.getIndex()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                lastDay \u003d Weekday.valueOf(\"SUNDAY\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                isCircle \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            for (Weekday day : Weekday.values()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                int curIndex \u003d day.getIndex();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                if (curIndex \u003e\u003d firstDay.getIndex() \u0026\u0026 curIndex \u003c\u003d lastDay.getIndex()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    curRecord \u003d profile.getRecordOfDay(day.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (curRecord.getDailyCalories().isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        assert curRecord.getDailyCalories().isPresent();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        sum +\u003d curRecord.getDailyCalories().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                } else if (curIndex \u003e lastDay.getIndex()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Saves the execution result to the command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile the profile that the command is dealing with."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidDate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (isCircle) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(\"%s is ahead of %s, so only calories from %s to SUNDAY is calculated\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        this.end, this.begin, this.begin) + System.lineSeparator()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        + MessageBank.CALCULATE_CALORIES_MESSAGE + String.format(\"%.2f.\", sum);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                this.resultString \u003d MessageBank.CALCULATE_CALORIES_MESSAGE + String.format(\"%.2f.\", sum);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 25,
      "DDzuikeai": 133
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CheckBmiCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static java.lang.Math.pow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class CheckBmiCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String profileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private List\u003cDouble\u003e weightRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double bmi;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double currentWeight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double currentHeight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public CheckBmiCommand(String command) throws NumberFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.currentHeight \u003d profile.getHeight();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.currentWeight \u003d profile.getWeightRecord().get(profile.getWeightRecord().size() - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        bmi \u003d currentWeight / pow((currentHeight / 100), 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        ui.showMessage(String.format(MessageBank.USER_BMI_MESSAGE, bmi));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.resultString \u003d MessageBank.BMI_TABLE_MESSAGE + MessageBank.BMI_TABLE_LEGEND + MessageBank.BMI_TABLE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "yuxianglim": 50
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CheckRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class CheckRecordCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String mealType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CheckRecordCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.date \u003d descriptionArray[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.mealType \u003d descriptionArray[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidDate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d date + \" Morning: \" + System.lineSeparator() + record.showBreakfast()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d date + \" Afternoon: \" + System.lineSeparator() + record.showLunch()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d date + \" Night: \" + System.lineSeparator() + record.showDinner()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + record.showDailyCalories(mealType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.MEAL_TYPE_ERROR;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 22,
      "DDzuikeai": 58
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CheckRequiredCaloriesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class CheckRequiredCaloriesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String activityLevel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private double caloriesRequired;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInValidCommand \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noProfileFound \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param command     The command prompt entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param description The description of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @throws InvalidFormatException If user input incorrect format for the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CheckRequiredCaloriesCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.date \u003d descriptionArray[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.activityLevel \u003d descriptionArray[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            noDescription \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public CheckRequiredCaloriesCommand(String command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        testAssertions(isInValidCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!profile.isProfileExist()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            noProfileFound \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            getResult(profile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (noDescription | isInvalidDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            getResult(profile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        getRecommendedCaloriesIntake(profile, activityLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns how much calories the profile need to consume in a day."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile       The user profile."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param activityLevel the activity level of the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return calories required to consume in a day based on user\u0027s personal info."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public double getRecommendedCaloriesIntake(Profile profile, String activityLevel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        double basalMetabolicRate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (profile.getGender()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"male\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 10 * profile.getWeight() + 6.25 * profile.getHeight() - 5 * profile.getAge() + 5;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"female\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 10 * profile.getWeight() + 6.25 * profile.getHeight() - 5 * profile.getAge() - 161;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            basalMetabolicRate \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            isInValidCommand \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (activityLevel) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.375;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"moderate\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.55;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.caloriesRequired \u003d basalMetabolicRate * 1.725;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            isInValidCommand \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return caloriesRequired;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (noDescription) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (noProfileFound) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (isInvalidDate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (!isInValidCommand) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d String.format(\"Calories Intake and Requirement for %s:\", date) + System.lineSeparator()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + record.showDailyCalories()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + String.format(\"Calories requirement for %s activity level: \", activityLevel)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    + String.format(\"%.2f\", caloriesRequired) + \"cal.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (record.getDailyCalories().isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                double caloriesIntake \u003d record.getDailyCalories().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003c profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003e\u003d caloriesRequired) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.SUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003c profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003c caloriesRequired) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.INSUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003e\u003d profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003e caloriesRequired) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.EXCESS_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (profile.getWeight() \u003e\u003d profile.getWeightGoal() \u0026\u0026 caloriesIntake \u003c\u003d caloriesRequired) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.resultString \u003d this.resultString + MessageBank.SUFFICIENT_CALORIES_MESSAGE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_CALORIES_REQUIREMENT_ERROR;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public static void testAssertions(boolean isInValidCommand) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assert (!isInValidCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 30,
      "lamyuewei": 70,
      "DDzuikeai": 45
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/CheckWeightRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static java.lang.Math.abs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class CheckWeightRecordCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cDouble\u003e weightRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double initialWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double currentWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightDifference;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightToGoal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public CheckWeightRecordCommand(String command)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throws NumberFormatException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.weightGoal \u003d profile.getWeightGoal();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        weightRecord \u003d profile.getWeightRecord();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        ui.showMessage(MessageBank.CHECK_WEIGHT_RECORD_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        for (int i \u003d 0; i \u003c weightRecord.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            ui.showMessage(i + 1 + \". \" + weightRecord.get(i) + \"kg \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        initialWeight \u003d weightRecord.get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        currentWeight \u003d weightRecord.get(weightRecord.size() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightDifference \u003d initialWeight - currentWeight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        weightToGoal \u003d weightGoal - currentWeight;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        checkWeightStatus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private void checkWeightStatus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (weightDifference \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (currentWeight \u003d\u003d weightGoal) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(MessageBank.WEIGHT_LOSS_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        + MessageBank.WEIGHT_GOAL_ACHIEVED_MESSAGE, weightDifference, weightToGoal);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(MessageBank.WEIGHT_LOSS_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        + MessageBank.WEIGHT_GOAL_NOT_ACHIEVED_MESSAGE, weightDifference, weightToGoal);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else if (weightDifference \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (currentWeight \u003d\u003d weightGoal) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(MessageBank.WEIGHT_NO_CHANGE_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + MessageBank.WEIGHT_GOAL_ACHIEVED_MESSAGE,  weightToGoal);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(MessageBank.WEIGHT_NO_CHANGE_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + MessageBank.WEIGHT_GOAL_NOT_ACHIEVED_MESSAGE,  weightToGoal);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (weightDifference \u003c 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (currentWeight \u003d\u003d weightGoal) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(MessageBank.WEIGHT_GAIN_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        + MessageBank.WEIGHT_GOAL_ACHIEVED_MESSAGE, abs(weightDifference), weightToGoal);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.resultString \u003d String.format(MessageBank.WEIGHT_GAIN_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        + MessageBank.WEIGHT_GOAL_NOT_ACHIEVED_MESSAGE, abs(weightDifference), weightToGoal);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 25,
      "DDzuikeai": 1,
      "yuxianglim": 61
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ClearFoodRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class ClearFoodRecordCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public ClearFoodRecordCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        profile.clearAllFoodRecords();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.resultString \u003d MessageBank.RECORDS_CLEARED_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DDzuikeai": 31
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Command is a public abstract class providing a skeletal implementation for"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * different commands and is responsible for storing the base information"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * required in a command, allowing other more specific events to draw onto its"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * components."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The command prompt entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * The last execution result of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    protected String resultString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the command prompt entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the command prompt entered by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Abstract method to save execution result of the command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param profile the profile that the command is dealing with."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public abstract Result getResult(Profile profile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Abstract method to execute the Command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param profile the object containing user profile information."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param ui      the object containing user interface functions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public abstract Result execute(Profile profile, UI ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 55,
      "DDzuikeai": 12
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/DeleteFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class DeleteFoodCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean success;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DeleteFoodCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            foodName \u003d descriptionArray[0].toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.success \u003d foodInfo.deleteFoodNutritionRecord(foodName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (!this.success) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.resultString \u003d MessageBank.FOOD_TO_DELETE_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.resultString \u003d MessageBank.FOOD_DELETED_MESSAGE + foodName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dejunnn": 16,
      "DDzuikeai": 42
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/DeleteWeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class DeleteWeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private double weightDeleted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public DeleteWeightCommand(String command, String description)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throws InvalidFormatException, NumberFormatException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            this.index \u003d Integer.parseInt(descriptionArray[0]) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            weightDeleted \u003d profile.getWeightRecord().get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.getWeightRecord().remove(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!this.noDescription) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d \"Weight Record: \" + weightDeleted + \"kg \" + MessageBank.WEIGHT_DELETED_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 16,
      "DDzuikeai": 12,
      "yuxianglim": 28
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public ExitCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        ui.setExitStatus(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.resultString \u003d MessageBank.EXIT_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 31,
      "DDzuikeai": 3,
      "yuxianglim": 1
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public HelpCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.resultString \u003d MessageBank.FUNCTION_LIST;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1,
      "yuxianglim": 31
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ListFoodDatabaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class ListFoodDatabaseCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private FoodNutritionRecord foodNutritionRecord \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ListFoodDatabaseCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.resultString \u003d foodNutritionRecord.showFoodDatabase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 12,
      "lamyuewei": 20
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public ProfileCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (profile.isProfileExist()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.SHOW_PROFILE_MESSAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + String.format(\"Name:         %s\", profile.getName()) + System.lineSeparator()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Age:          %d years old\", profile.getAge()) + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Gender:       %s\", profile.getGender()) + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Height:       %.2f centimetres\", profile.getHeight()) + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Weight        %.2f kilograms\", profile.getWeight()) + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    + String.format(\"Weight Goal:  %.2f kilograms\", profile.getWeightGoal());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 34,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/RecordMealCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class RecordMealCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String mealType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String[] foodDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isValidFoodFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean noDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private boolean isInvalidDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param command     the command prompt entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param description the description of the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws InvalidFormatException if the command doesn\u0027t contain correct number of parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public RecordMealCommand(String command, String description) throws InvalidFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.noDescription \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.isInvalidDate \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.date \u003d descriptionArray[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.mealType \u003d descriptionArray[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.foodDescription \u003d descriptionArray[2].trim().split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.isValidFoodFormat \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Weekday.valueOf(this.date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.noDescription \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            this.isInvalidDate \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription | this.isInvalidDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String[] foodDescriptionSplit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        String foodName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        Double foodCalories;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        for (String singleFoodDescription : foodDescription) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (singleFoodDescription.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            foodDescriptionSplit \u003d singleFoodDescription.trim().split(\"--\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            foodName \u003d foodDescriptionSplit[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            switch (foodDescriptionSplit.length) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                Food food;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                if (foodInfo.isInDatabase(foodName)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    food \u003d foodInfo.findFood(foodName).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    food \u003d new Food(foodName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                foodList.add(food);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    foodCalories \u003d Double.parseDouble(foodDescriptionSplit[1].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (foodCalories \u003c 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        throw new NumberFormatException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    foodList.add(new Food(foodName, foodCalories));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                    isValidFoodFormat \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                isValidFoodFormat \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        record.recordMeals(mealType, foodList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (this.noDescription) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else if (this.isInvalidDate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return new Result(this.resultString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean isValidType \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.BREAKFAST_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.LUNCH_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.DINNER_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            isValidType \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.MEAL_TYPE_ERROR;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (isValidType) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d this.resultString + date + \".\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!isValidFoodFormat) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d this.resultString + System.lineSeparator() + MessageBank.INVALID_FOOD_FORMAT_ERROR;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 30,
      "lamyuewei": 30,
      "DDzuikeai": 81
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetAgeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.AgeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetAgeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetAgeCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.age \u003d AgeParser.parseAge(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidAgeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setAge(this.age);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.AGE_CHANGE_MESSAGE + profile.getAge() + \".\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_AGE_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 47,
      "lamyuewei": 1,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetGenderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.GenderParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetGenderCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetGenderCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.gender \u003d GenderParser.parseGender(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidGenderException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setGender(this.gender);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.GENDER_CHANGE_MESSAGE + profile.getGender() + \".\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 9
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetHeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.HeightParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetHeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetHeightCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.height \u003d HeightParser.parseHeight(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidHeightException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setHeight(this.height);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.HEIGHT_CHANGE_MESSAGE + String.format(\"%.2f.\", profile.getHeight());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetNameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.NameParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetNameCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetNameCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.name \u003d NameParser.parseName(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidNameException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setName(this.name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NAME_CHANGE_MESSAGE + profile.getName() + \".\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.AgeParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.DescriptionParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.GenderParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.HeightParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.NameParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetProfileCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetProfileCommand(String command, String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            String[] descriptionArray \u003d DescriptionParser.parseDescription(description, 6);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.name \u003d NameParser.parseName(descriptionArray[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.age \u003d AgeParser.parseAge(descriptionArray[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.gender \u003d GenderParser.parseGender(descriptionArray[2]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.height \u003d HeightParser.parseHeight(descriptionArray[3]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weight \u003d WeightParser.parseWeight(descriptionArray[4]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weightGoal \u003d WeightParser.parseWeight(descriptionArray[5]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NullPointerException | InvalidHeightException | InvalidWeightException | InvalidAgeException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                | InvalidNameException | InvalidGenderException | InvalidFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setProfile(this.name, this.age, this.gender, this.height, this.weight, this.weightGoal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.PROFILE_UPDATE_MESSAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 64,
      "DDzuikeai": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetWeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetWeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetWeightCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weight \u003d WeightParser.parseWeight(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidWeightException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setWeight(weight);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.WEIGHT_CHANGE_MESSAGE + String.format(\"%.2f.\", profile.getWeight());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 48,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/SetWeightGoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class SetWeightGoalCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean isValidProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param command the command prompt entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public SetWeightGoalCommand(String command, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidCommand \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.weightGoal \u003d WeightParser.parseWeight(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidWeightException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.isValidProfile \u003d profile.isProfileExist();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.isValidCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (this.isValidCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            profile.setWeightGoal(this.weightGoal);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!this.isValidProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.INVALID_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (this.isValidCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.WEIGHT_GOAL_CHANGE_MESSAGE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    + String.format(\"%.2f.\", profile.getWeightGoal());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.resultString \u003d MessageBank.NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 49,
      "DDzuikeai": 8
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/commands/ShowRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.RecipeManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class ShowRecipeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public ShowRecipeCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result execute(Profile profile, UI ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result result \u003d getResult(profile);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Result getResult(Profile profile) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.resultString \u003d RecipeManager.getInstance().getRecipe();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return new Result(this.resultString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 10,
      "DDzuikeai": 16
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/AgeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * AgeParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid Age."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class AgeParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Minimum boundary Age value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static int MIN_AGE \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Maximum boundary Age value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static int MAX_AGE \u003d 150;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Age value parsed from user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cInteger\u003e age;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid Age."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Age in standard form."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidAgeException If input is not a valid Age."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static int parseAge(String description) throws InvalidAgeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            age \u003d Optional.ofNullable(Integer.parseInt(description));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidAgeException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (age.isEmpty() || (age.get() \u003c\u003d MIN_AGE || age.get() \u003e\u003d MAX_AGE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidAgeException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return age.get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Age."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (age.isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (age.get() \u003e MIN_AGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (age.get() \u003c MAX_AGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 63
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/CaloriesParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCaloriesException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * CaloriesParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid Calorie value."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class CaloriesParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Minimum boundary Calorie value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static double MIN_CALORIES \u003d 0.00;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Calorie value parsed from user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cDouble\u003e calories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid Calorie value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Calories in standard form."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidCaloriesException If input is not a valid Calorie value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static double parseCalories(String description) throws InvalidCaloriesException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            calories \u003d Optional.ofNullable(Double.parseDouble(description));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCaloriesException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (calories.isEmpty() || calories.get() \u003c MIN_CALORIES) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCaloriesException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return calories.get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Calories."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (calories.isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (calories.get() \u003e\u003d MIN_CALORIES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 56
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.AddFoodCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.BuildNewRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.CalculateCaloriesCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckBmiCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckRecordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckRequiredCaloriesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckWeightRecordCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.ClearFoodRecordCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.DeleteFoodCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.DeleteWeightCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.ListFoodDatabaseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.RecordMealCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.SetAgeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.SetGenderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.SetHeightCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.SetNameCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.SetProfileCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.SetWeightCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.SetWeightGoalCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.ShowRecipeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * CommandParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid Command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The command prompt parsed from user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cString\u003e commandPrompt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The description parsed from user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The number of arguments in valid Command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final int ARGUMENTS_REQUIRED \u003d 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Parses the user input and prepares it to be analysed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidCommandException if user input has too few arguments."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static void prepareInput(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        commandPrompt \u003d Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        description \u003d Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] inputArray \u003d input.trim().split(\" \", ARGUMENTS_REQUIRED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int numArguments \u003d inputArray.length;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        switch (numArguments) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            commandPrompt \u003d Optional.ofNullable(inputArray[0].trim().toLowerCase());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            commandPrompt \u003d Optional.ofNullable(inputArray[0].trim().toLowerCase());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            description \u003d Optional.ofNullable(inputArray[1].trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid Command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Command generated from the user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidCommandException if command is not supported by application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException  if command format is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static Optional\u003cCommand\u003e parseInput(String input) throws InvalidCommandException, InvalidFormatException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        prepareInput(input);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Optional\u003cCommand\u003e command;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (commandPrompt.isPresent() \u0026\u0026 description.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            switch (commandPrompt.get()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"profile\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new ProfileCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"check-weight-progress\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new CheckWeightRecordCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"check-bmi\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new CheckBmiCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"list-food\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new ListFoodDatabaseCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"show-recipe\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new ShowRecipeCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"clear-records\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                command \u003d Optional.of(new ClearFoodRecordCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new HelpCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new ExitCommand(commandPrompt.get()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else if (commandPrompt.isPresent() \u0026\u0026 description.isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            switch (commandPrompt.get()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"set-profile\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new SetProfileCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"set-name\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new SetNameCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"set-age\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new SetAgeCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"set-gender\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new SetGenderCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"set-height\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new SetHeightCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"set-weight\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new SetWeightCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            case \"set-weight-goal\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new SetWeightGoalCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"record-meal\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new RecordMealCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"check-meal\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new CheckRecordCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"check-required-cal\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new CheckRequiredCaloriesCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"calculate\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new CalculateCaloriesCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            case \"delete-weight\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new DeleteWeightCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"addf\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new AddFoodCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"delf\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new DeleteFoodCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            case \"new-recipe\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                command \u003d Optional.of(new BuildNewRecipeCommand(commandPrompt.get(), description.get()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 163,
      "lamyuewei": 1,
      "DDzuikeai": 14,
      "yuxianglim": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/DescriptionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * DescriptionParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid description array."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class DescriptionParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Description Array parsed from user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String[] descriptionArray;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validates the user input and parsing it into a valid description array."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description       the command description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param argumentsRequired the number of arguments required by the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return descriptionArray in standard form."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if input has the wrong description format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws NullPointerException   if input generates a null value."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseDescription(String description, int argumentsRequired)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throws InvalidFormatException, NullPointerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        descriptionArray \u003d description.trim().split(\"\\\\s+\", argumentsRequired);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (String arg : descriptionArray) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            arg.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(argumentsRequired);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Description Array."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(int argumentsRequired) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (descriptionArray.length \u003d\u003d argumentsRequired);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 49
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/FoodNameParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFoodNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * FoodNameParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid Food Name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class FoodNameParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Food Name value parsed from user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cString\u003e foodName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid Food Name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Food Name in standard form."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFoodNameException If input is not a valid Food Name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String parseFoodName(String description) throws InvalidFoodNameException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodName \u003d Optional.ofNullable(description.trim().toLowerCase());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (foodName.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFoodNameException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodName \u003d Optional.ofNullable(foodName.get().replaceAll(\" \", \"-\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return foodName.get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Food Name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (foodName.isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 46
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/GenderParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * GenderParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid gender."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class GenderParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Standard form for Male gender."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final String MALE \u003d \"male\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Standard form for female gender."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static final String FEMALE \u003d \"female\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * gender value parsed from user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cString\u003e gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid gender."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Gender in standard form."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidGenderException If input is not a valid Gender."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String parseGender(String description) throws InvalidGenderException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        gender \u003d Optional.ofNullable(description.trim().toLowerCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (gender.isEmpty() || !(gender.get().equals(MALE) || gender.get().equals(FEMALE))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidGenderException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return gender.get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Gender."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (gender.isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert ((gender.get().equals(MALE)) || (gender.get().equals(FEMALE)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 58
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/HeightParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * HeightParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid Height."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class HeightParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Minimum boundary Height value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static double MIN_HEIGHT \u003d 0.00;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Maximum boundary Height value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static double MAX_HEIGHT \u003d 300.00;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Height value parsed from user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cDouble\u003e height;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid Height."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Height in standard form."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidHeightException If input is not a valid Height."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static double parseHeight(String description) throws InvalidHeightException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            height \u003d Optional.ofNullable(Double.parseDouble(description));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidHeightException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (height.isEmpty() || (height.get() \u003c\u003d MIN_HEIGHT || height.get() \u003e\u003d MAX_HEIGHT)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidHeightException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return height.get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Height."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (height.isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (height.get() \u003e MIN_HEIGHT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (height.get() \u003c MAX_HEIGHT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 63
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/NameParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * NameParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid Name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class NameParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Name value parsed from user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cString\u003e name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid Name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Name in standard form."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidNameException If input is not a valid Name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String parseName(String description) throws InvalidNameException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        name \u003d Optional.ofNullable(description.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidNameException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        name \u003d Optional.ofNullable(name.get().replaceAll(\" \", \"-\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return name.get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (name.isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 46
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/StorageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * StorageParser is the public class responsible for validating the Storage data and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid description array."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validates the profile storage data and parsing it into a valid description array."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param profileDataLine the profile data description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return descriptionArray in standard form."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if storage data has the wrong description format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws NullPointerException   if storage data generates a null value."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseProfileDataLine(String profileDataLine)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throws InvalidFormatException, NullPointerException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int argumentsRequired \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d profileDataLine.trim().split(\": \", argumentsRequired);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        testAssertions(descriptionArray, argumentsRequired);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Validates the recipe storage data and parsing it into a valid description array."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param recipeDataLine the recipe data description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return description in standard form."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws InvalidFormatException if storage data has the wrong description format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws NullPointerException   if storage data generates a null value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String[] parseRecipeDataLine(String recipeDataLine)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            throws InvalidFormatException, NullPointerException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int argumentsRequired \u003d 4;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String[] descriptionArray \u003d recipeDataLine.trim().split(\"\\\\s+\", argumentsRequired);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        testAssertions(descriptionArray, argumentsRequired);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Validates the recipe storage data and parsing it into a valid description array."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodRecordDataLine the daily food record data description."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return description in standard form."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws InvalidFormatException if storage data has the wrong description format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws NullPointerException   if storage data generates a null value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String[] parseFoodRecordDataLine(String foodRecordDataLine)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            throws InvalidFormatException, NullPointerException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int argumentsRequired \u003d 2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String[] descriptionArray \u003d foodRecordDataLine.trim().split(\": \", 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        testAssertions(descriptionArray, argumentsRequired);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Validates the recipe storage data and parsing it into a valid description array."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param timeDescription the time description of a meal record."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return description in standard form."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws InvalidFormatException if storage data has the wrong description format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @throws NullPointerException   if storage data generates a null value."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static String[] parseTimeDescription(String timeDescription)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            throws InvalidFormatException, NullPointerException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int argumentsRequired \u003d 2;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String[] descriptionArray \u003d timeDescription.trim().split(\"\\\\s+\", argumentsRequired);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(descriptionArray, argumentsRequired);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validates the weightList storage data and parsing it into a valid weight list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param weightListDataLine the weightList data description."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return weightList in standard form."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws NullPointerException if storage data generates a null value."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static List\u003cDouble\u003e parseWeightListDataLine(String weightListDataLine)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throws NullPointerException, InvalidWeightException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d weightListDataLine.trim().split(\",\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        List\u003cDouble\u003e weightList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (String arg : descriptionArray) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            double weight \u003d WeightParser.parseWeight(arg);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            weightList.add(weight);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return weightList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validates the food nutrition record storage data and parsing it into a valid description array."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param foodNutritionRecordDataLine the food nutrition record data description."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return descriptionArray in standard form."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidFormatException if storage data has the wrong description format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws NullPointerException   if storage data generates a null value."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static String[] parseFoodNutritionRecordDataLine(String foodNutritionRecordDataLine)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throws InvalidFormatException, NullPointerException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        int argumentsRequired \u003d 2;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String[] descriptionArray \u003d foodNutritionRecordDataLine.trim().split(\",\", argumentsRequired);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (descriptionArray.length !\u003d argumentsRequired) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions(descriptionArray, argumentsRequired);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return descriptionArray;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Description Array."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions(String[] descriptionArray, int argumentsRequired) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (descriptionArray.length \u003d\u003d argumentsRequired);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 83,
      "DDzuikeai": 60
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/logic/parser/WeightParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * WeightParser is the public class responsible for validating the user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * parsing it into a valid Weight."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class WeightParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Minimum boundary Weight value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static double MIN_WEIGHT \u003d 0.00;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Maximum boundary Weight value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static double MAX_WEIGHT \u003d 500.00;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Weight value parsed from user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static Optional\u003cDouble\u003e weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Validate the user input and parsing it into a valid Weight."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param description User input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return Weight in standard form."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @throws InvalidWeightException If input is not a valid Weight."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static double parseWeight(String description) throws InvalidWeightException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            weight \u003d Optional.ofNullable(Double.parseDouble(description));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (weight.isEmpty() || (weight.get() \u003c\u003d MIN_WEIGHT || weight.get() \u003e\u003d MAX_WEIGHT)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        testAssertions();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return weight.get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Assertion testing for Weight."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static void testAssertions() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (weight.isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (weight.get() \u003e MIN_WEIGHT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assert (weight.get() \u003c MAX_WEIGHT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 63
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/DailyFoodRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class DailyFoodRecord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private ArrayList\u003cFood\u003e morning;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private ArrayList\u003cFood\u003e afternoon;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private ArrayList\u003cFood\u003e night;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Daily Food Record."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord(String date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.morning \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.afternoon \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.night \u003d new ArrayList\u003cFood\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Sets the date of the record."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the date of this record."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the date of this record"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Records the meals consumed into their respective categories."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param mealType type of this meal, divided by time period."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodList the list of foods."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void recordMeals(String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.morning.addAll(foodList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.afternoon.addAll(foodList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.night.addAll(foodList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Clear the records of a certain meal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param mealType type of this meal, divided by time period."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void clearRecords(String mealType) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        switch (mealType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.morning.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.afternoon.clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.night.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Food Record."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void showDailyRecord() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(this.showBreakfast());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(this.showLunch());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        System.out.println(this.showDinner());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Breakfast Record."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showBreakfast() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : this.morning) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Lunch Record."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showLunch() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : this.afternoon) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Displays the Daily Dinner Record."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String showDinner() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : this.night) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d message + food.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            message \u003d \"Oops, you have no record for this meal.\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public boolean isDate(String date) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return this.date.toLowerCase().equals(date.toLowerCase());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Provide a ArrayList of all the foods consumed in a day."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return ArrayList of all the foods consumed in a day"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ArrayList\u003cFood\u003e getDailyFood() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        allDailyFood.addAll(this.morning);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        allDailyFood.addAll(this.afternoon);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        allDailyFood.addAll(this.night);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Provide a ArrayList of the foods consumed in a specific time frame of a day."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return ArrayList of all the foods consumed in a day"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public ArrayList\u003cFood\u003e getDailyFood(String timeFrame) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        switch (timeFrame) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return this.morning;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return this.afternoon;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return this.night;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Calculate the total recorded calories for all the meals."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional double of the calories intake if exist, and Optional empty otherwise."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getDailyCalories() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(Food::hasCaloriesData)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Food::getCalories)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Optional::get)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce(Double::sum);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Calculate the total recorded calories for meals in a specific time frame of a day ."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional double of the calories intake if exist, and Optional empty otherwise."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getDailyCalories(String timeFrame) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e foodInTimeFrame \u003d getDailyFood(timeFrame);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodInTimeFrame.stream().filter(Food::hasCaloriesData)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Food::getCalories)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(Optional::get)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce(Double::sum);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the DailyFoodRecord has any Food with missing calories data."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return False if there exist food without calories, true otherwise."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isCaloriesPresent() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(food -\u003e !food.hasCaloriesData())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(food -\u003e false)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce((first, second) -\u003e first)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(true);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the DailyFoodRecord has any Food in a specific time frame of a day with missing calories data."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return False if there exist food without calories, true otherwise."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isCaloriesPresent(String timeFrame) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        ArrayList\u003cFood\u003e allDailyFood \u003d getDailyFood(timeFrame);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return allDailyFood.stream().filter(food -\u003e !food.hasCaloriesData())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(food -\u003e false)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .reduce((first, second) -\u003e first)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(true);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Express the calculable calories intake for all the meals as a String."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return String representation of the calculable calories."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showDailyCalories() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return getDailyCalories()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(calories -\u003e MessageBank.CALORIES_MESSAGE + String.format(\"%.2f\", calories) + \"cal.\\n\")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(result -\u003e (isCaloriesPresent()) ? result : (result + MessageBank.MISSING_CALORIES_MESSAGE))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(MessageBank.NO_CALORIES_MESSAGE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Express the calculable calories intake for meals within a time frame of the day as a String."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return String representation of the calculable calories within a time frame."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showDailyCalories(String timeFrame) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return getDailyCalories(timeFrame)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .map(calories -\u003e \"For \" + timeFrame + \", \" + MessageBank.TIME_CALORIES_MESSAGE"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                        + String.format(\"%.2f\", calories) + \"cal.\\n\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElse(\"For \" + timeFrame + \", \" + MessageBank.NO_TIME_CALORIES_MESSAGE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns a record of one day."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return one entry of the weekly recipe"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getRecipeEntry() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String message \u003d this.date;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d String.format(\"%1$-10s\", message);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : morning) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            message \u003d message + food.getPair();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d message.substring(0, message.length() - 1);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d String.format(\"%1$-80s\", message);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : afternoon) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            message \u003d message + food.getPair();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d message.substring(0, message.length() - 1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d String.format(\"%1$-150s\", message);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : night) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            message \u003d message + food.getPair();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        message \u003d message.substring(0, message.length() - 1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 64,
      "lamyuewei": 104,
      "DDzuikeai": 114
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    private Optional\u003cDouble\u003e calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for Food with the food name and calories value."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName Name of the food."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param calories Amount of calories the food has."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Food(String foodName, double calories) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.calories \u003d Optional.of(calories);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for Food with the food name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName Name of the food."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public Food(String foodName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        this.calories \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Getter for food name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Name of the food."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String getFoodName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Getter for the calories of the food."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Amount of calories the food has"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cDouble\u003e getCalories() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Check if the food has calories."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return True if food has calories, False otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean hasCaloriesData() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories.isPresent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return calories.map(value -\u003e \"Food: \" + foodName + \", Calories: \" + String.format(\"%.2f\", value) + \"cal\\n\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                .orElseGet(() -\u003e \"Food: \" + foodName + \", Calories: \" + \"No value found.\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getPair() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return calories.map(value -\u003e foodName + \"(\" + String.format(\"%.2f\", value) + \"),\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                .orElseGet(() -\u003e foodName + \"(\" + \"Nan)\" + \",\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 8,
      "lamyuewei": 47,
      "DDzuikeai": 11
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/FoodNutritionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class FoodNutritionRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cFood\u003e foodNutritionRecordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static FoodNutritionRecord theOne \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Public constructor for FoodNutritionInfo of Food from our database."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private FoodNutritionRecord() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"chicken-rice\", 702));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"fried-rice\", 508));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"chicken-curry\", 450));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"prawn-noodles\", 459));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"fishball-noodles\", 330));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"cheeseburger\", 300));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"white-bread\", 77));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"french-fries\", 450));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"orange-juice\", 80));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"soft-drink\", 120));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        foodNutritionRecordList.add(new Food(\"fresh-milk\", 163));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the only instance, if it doesn\u0027t exist, create one first."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the only instance of FoodNutritionInfo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public static FoodNutritionRecord getInstance() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (theOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            theOne \u003d new FoodNutritionRecord();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return theOne;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Search for a food in the database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName The name of the food to be searched for."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return Optional Food that contains the food if exist, and is empty otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public Optional\u003cFood\u003e findFood(String foodName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Optional\u003cFood\u003e foodFound \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : foodNutritionRecordList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            if (food.getFoodName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                foodFound \u003d Optional.of(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return foodFound;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public Food findFood(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return foodNutritionRecordList.get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Search if a food exists in the database."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @param foodName The name of the food to be searched for."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * @return True if food exist in database, false otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public boolean isInDatabase(String foodName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        boolean isFoodFound \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : foodNutritionRecordList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (food.getFoodName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "                isFoodFound \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        return isFoodFound;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     * Print out all the food stored in our database."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public String showFoodDatabase() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        StringBuilder foodDatabase \u003d new StringBuilder(MessageBank.FOOD_DATABASE_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        for (Food food : foodNutritionRecordList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            foodDatabase.append(food);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return foodDatabase.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Adds a new food into the database."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodName name of the new food"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param calories calories content of the new food"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return true if operation succeeds, false if food already exists in database"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean addFoodNutritionRecord(String foodName, Double calories) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!isInDatabase(foodName)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            foodNutritionRecordList.add(new Food(foodName, calories));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Deletes a food from the database."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodName name of the to-be-deleted food"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return true if operation succeeds, false if referred food doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean deleteFoodNutritionRecord(String foodName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (findFood(foodName).isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Food toBeDeleted \u003d findFood(foodName).get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            foodNutritionRecordList.remove(toBeDeleted);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public List\u003cFood\u003e getFoodNutritionRecordList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.foodNutritionRecordList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void clearFoodNutritionRecordList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.foodNutritionRecordList.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.foodNutritionRecordList.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public double getFoodCalories(int index) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return foodNutritionRecordList.get(index).getCalories().get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 45,
      "lamyuewei": 45,
      "DDzuikeai": 52
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/Profile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double height; //Height in centimeter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weight; //Weight in kg"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private double weightGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean profileExist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cDailyFoodRecord\u003e personalFoodRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private List\u003cDouble\u003e weightRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs a new Profile object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Profile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.personalFoodRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Sets the User Profile with the relevant information required."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setProfile(String name, int age, String gender, double height, double weight, double weightGoal) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setName(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setAge(age);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setGender(gender);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setHeight(height);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        weightRecord.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setWeight(weight);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setWeightGoal(weightGoal);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.setProfileExist(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns a daily record of a certain date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param date the date of the wanted record."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return a record of wanted date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord getRecordOfDay(String date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean recordExists \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (DailyFoodRecord r : personalFoodRecord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (r.isDate(date)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                record \u003d r;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                recordExists \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (!recordExists) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            record \u003d addNewRecord(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord getRecordOfDay(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return personalFoodRecord.get(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Creates a new record of a certain date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param date the date of the new record."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return a newly generated daily record."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public DailyFoodRecord addNewRecord(String date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d new DailyFoodRecord(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        personalFoodRecord.add(record);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void clearAllFoodRecords() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        personalFoodRecord.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public List\u003cDouble\u003e getWeightRecord() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.weightRecord;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setHeight(double height) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setWeight(double weight) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightRecord.add(weight);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setWeightGoal(double weightGoal) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.weightGoal \u003d weightGoal;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setProfileExist(boolean profileExist) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profileExist \u003d profileExist;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.gender;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public double getWeightGoal() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return weightGoal;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean isProfileExist() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.profileExist;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 85,
      "DDzuikeai": 54,
      "yuxianglim": 7
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/model/RecipeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.commands.CheckRequiredCaloriesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "public class RecipeManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private ArrayList\u003cDailyFoodRecord\u003e recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static RecipeManager theOnlyOne \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static final int MAX_FOOD_TYPES \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private RecipeManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String curDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (Weekday weekday : Weekday.values()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            curDay \u003d weekday.getName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            assert recipe !\u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            recipe.add(new DailyFoodRecord(curDay));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the only one instance, if it doesn\u0027t exist, create one first."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the only instance of RecipeManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public static RecipeManager getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (theOnlyOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            theOnlyOne \u003d new RecipeManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return theOnlyOne;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Sets a meal into the recipe."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param date     the date of this meal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param mealType the type of this meal"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param foodList foods recommended for this meal"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void setRecipe(String date, String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        Weekday weekday \u003d Weekday.valueOf(date.toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int index \u003d weekday.getIndex() - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe.get(index).recordMeals(mealType, foodList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void setRecipe(int index, String mealType, ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe.get(index).clearRecords(mealType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipe.get(index).recordMeals(mealType, foodList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the recipe of a week."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Each entry of the recipe contains three sections--morning/afternoon/night."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the recipe of a week."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getRecipe() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String recipeTable \u003d this.getRecipeHead();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (DailyFoodRecord record : recipe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            recipeTable \u003d recipeTable + record.getRecipeEntry() + System.lineSeparator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return recipeTable;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the head of the recipe."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the head of the recipe."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getRecipeHead() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String recipeHead \u003d String.format(\"%1$-10s\", \" \") + \"morning\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipeHead \u003d String.format(\"%1$-80s\", recipeHead) + \"afternoon\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        recipeHead \u003d String.format(\"%1$-150s\", recipeHead) + \"night\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return recipeHead;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Returns the body part of the recipe."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return the body of the recipe."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public String getRecipeBody() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        String recipeBody \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        for (DailyFoodRecord record : recipe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            recipeBody \u003d recipeBody + record.getRecipeEntry() + System.lineSeparator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return recipeBody;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Creates a recipe for the week based on user\u0027s needs."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @param num maximum food types the user want to have in a meal."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * @return true if maximum food types is less than 5, else false."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public boolean buildRecipe(Profile profile, int num, String activityLevel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        CheckRequiredCaloriesCommand command \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                new CheckRequiredCaloriesCommand(MessageBank.CHECK_REQUIRED_CAL_COMMAND_PROMPT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        double cap \u003d command.getRecommendedCaloriesIntake(profile, activityLevel) / 3;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord foodInfo \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int maxNum \u003d foodInfo.getListSize();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        boolean overflow \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        if (num \u003e MAX_FOOD_TYPES) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            num \u003d MAX_FOOD_TYPES;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            overflow \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        int success \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        while (success \u003c 21) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            double sum \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            boolean[] checked \u003d new boolean[maxNum];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            int checkedNum \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            for (int i \u003d 0; i \u003c num \u0026\u0026 checkedNum \u003c maxNum; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                while (checkedNum \u003c maxNum) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    int rand \u003d (int) (Math.random() * maxNum);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (!checked[rand]) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        checked[rand] \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        checkedNum +\u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        if (sum + foodInfo.getFoodCalories(rand) \u003c\u003d cap) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                            sum +\u003d foodInfo.getFoodCalories(rand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                            foodList.add(foodInfo.findFood(rand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (sum \u003c\u003d cap) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                success +\u003d 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String mealType \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                switch (success % 3) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    mealType \u003d \"morning\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    mealType \u003d \"afternoon\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    mealType \u003d \"night\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                setRecipe((int) ((success - 1) / 3), mealType, foodList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        return overflow;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 5,
      "DDzuikeai": 159
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.LogsCentre;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.commons.core.Weekday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCaloriesException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFoodNameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.AgeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.CaloriesParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.FoodNameParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.GenderParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.HeightParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.NameParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.StorageParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.parser.WeightParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.DailyFoodRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.FoodNutritionRecord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import seedu.dietmanager.model.RecipeManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * Storage is the public class responsible for creating and managing the data files generated from the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The object containing the list containing all current tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private LogsCentre logsCentre;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private FoodNutritionRecord foodNutritionRecord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the directory that contains the data file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String DATA_DIRECTORY_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains profile information."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String PROFILE_FILE_PATH \u003d DATA_DIRECTORY_PATH"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + File.separator + \"profile.txt\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains food record information."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String DAILY_FOOD_RECORD_FILE_PATH \u003d DATA_DIRECTORY_PATH"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + File.separator + \"daily-food-record.txt\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * To be implemented at a later stage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The file path of the data file that contains food nutritional information."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private static String FOOD_NUTRITION_RECORD_FILE_PATH \u003d DATA_DIRECTORY_PATH"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            + File.separator + \"food-nutrition-record.txt\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * The file path of the data file that contains recommend recipe."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    private static String RECIPE_FILE_PATH \u003d DATA_DIRECTORY_PATH"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            + File.separator + \"recipe.txt\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the Storage object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param ui the object containing user interface functions."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public Storage(UI ui, LogsCentre logsCentre, Profile profile, FoodNutritionRecord foodNutritionRecord) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.logsCentre \u003d logsCentre;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.profile \u003d profile;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.foodNutritionRecord \u003d foodNutritionRecord;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadDataDirectory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadProfileFile();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.loadFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.loadRecipeFile();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        this.loadDailyFoodRecordFile();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the directory, if absent, creates a new directory."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadDataDirectory() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Path directoryPath \u003d Paths.get(DATA_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        if (!Files.exists(directoryPath)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                Files.createDirectory(directoryPath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"New Directory created: \" + directoryPath.getFileName().toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeSevereLog(\"Error in creating new directory\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeInfoLog(\"Existing Directory found: \" + directoryPath.getFileName().toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Searches for the data file in the directory, if absent, creates a new data file. \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * If data file is present, loads the existing data from the file such that it is accessible by the user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void loadDailyFoodRecordFile() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            File foodRecordData \u003d new File(DAILY_FOOD_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (foodRecordData.createNewFile()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                logsCentre.writeInfoLog(\"No existing food record file found, new file created: \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        + foodRecordData.getName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                logsCentre.writeInfoLog(\"Existing food record file found: \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        + foodRecordData.getName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                this.readFoodRecordFile();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            logsCentre.writeSevereLog(\"Error in food record data file\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Reads the data file and parses the existing data in the file, restoring the daily food record."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void readFoodRecordFile() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            File foodRecordData \u003d new File(DAILY_FOOD_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Scanner myReader \u003d new Scanner(foodRecordData);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Optional\u003cString\u003e foodName;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            FoodNutritionRecord foodNutritionRecord \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String dataLine \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String[] dataLineArray \u003d StorageParser.parseFoodRecordDataLine(dataLine);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String timeDescription \u003d dataLineArray[0].trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String foodDescription \u003d dataLineArray[1].trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                if (foodDescription.equals(\"nothing\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String[] timeDescriptionArray \u003d StorageParser.parseTimeDescription(timeDescription);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String date \u003d timeDescriptionArray[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String timeFrame \u003d timeDescriptionArray[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                ArrayList\u003cFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String[] foodList \u003d foodDescription.split(\",\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                for (String foodInfo : foodList) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    int splitIndex \u003d foodInfo.indexOf(\"(\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    String nameDescription \u003d foodInfo.substring(0, splitIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    foodName \u003d Optional.of(FoodNameParser.parseFoodName(nameDescription));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    Optional\u003cFood\u003e curFood \u003d foodNutritionRecord.findFood(foodName.get());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (curFood.isPresent()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        foods.add(curFood.get());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        foods.add(new Food(foodName.get()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                DailyFoodRecord curRecord \u003d profile.getRecordOfDay(date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                curRecord.recordMeals(timeFrame, foods);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            myReader.close();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (FileNotFoundException | InvalidFormatException | InvalidFoodNameException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            logsCentre.writeInfoLog(\"Food record Information Invalid, food record cleared.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            clearFoodRecord();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Clears all content in the daily food record data file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void clearFoodRecord() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(DAILY_FOOD_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Rewrites the data file to reflect the current data."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void writeFoodRecordFile() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(DAILY_FOOD_RECORD_FILE_PATH, false);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            for (Weekday date : Weekday.values()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String curDate \u003d date.getName();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                DailyFoodRecord curRecord \u003d profile.getRecordOfDay(curDate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                ArrayList\u003cFood\u003e morningFoods \u003d curRecord.getDailyFood(\"morning\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String morningFoodDescription \u003d \"\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                for (Food food : morningFoods) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    morningFoodDescription +\u003d food.getPair();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                if (!morningFoodDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    morningFoodDescription \u003d morningFoodDescription.substring(0, morningFoodDescription.length() - 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    myWriter.write(curDate + \" morning: \" + morningFoodDescription + System.lineSeparator());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    myWriter.write(curDate + \" morning: \" + \"nothing\" + System.lineSeparator());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                ArrayList\u003cFood\u003e afternoonFoods \u003d curRecord.getDailyFood(\"afternoon\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String afternoonFoodDescription \u003d \"\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                for (Food food : afternoonFoods) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    afternoonFoodDescription +\u003d food.getPair();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                if (!afternoonFoodDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    afternoonFoodDescription \u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                            afternoonFoodDescription.substring(0, afternoonFoodDescription.length() - 1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    myWriter.write(curDate + \" afternoon: \" + afternoonFoodDescription + System.lineSeparator());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    myWriter.write(curDate + \" afternoon: \" + \"nothing\" + System.lineSeparator());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                ArrayList\u003cFood\u003e nightFoods \u003d curRecord.getDailyFood(\"night\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String nightFoodDescription \u003d \"\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                for (Food food : nightFoods) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    nightFoodDescription +\u003d food.getPair();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                if (!nightFoodDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    nightFoodDescription \u003d nightFoodDescription.substring(0, nightFoodDescription.length() - 1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    myWriter.write(curDate + \" night: \" + nightFoodDescription + System.lineSeparator());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    myWriter.write(curDate + \" night: \" + \"nothing\" + System.lineSeparator());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Searches for the data file in the directory, if absent, creates a new data file. \u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * If data file is present, loads the existing data from the file such that it is accessible by the user."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void loadRecipeFile() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            File recipeData \u003d new File(RECIPE_FILE_PATH);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            if (recipeData.createNewFile()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                logsCentre.writeInfoLog(\"No existing Recipe file found, new file created: \""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        + recipeData.getName());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                logsCentre.writeInfoLog(\"Existing Recipe file found: \""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        + recipeData.getName());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                this.readRecipeFile();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            logsCentre.writeSevereLog(\"Error in Recipe data file\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Reads the data file and parses the existing data in the file, restoring the food items in the recipe."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void readRecipeFile() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            File recipeData \u003d new File(RECIPE_FILE_PATH);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Scanner myReader \u003d new Scanner(recipeData);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            Optional\u003cString\u003e foodName;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            RecipeManager recipeManager \u003d RecipeManager.getInstance();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            FoodNutritionRecord foodNutritionRecord \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String dataLine \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String[] dataLineArray \u003d StorageParser.parseRecipeDataLine(dataLine);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String morningFood \u003d dataLineArray[1].trim();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String afternoonFood \u003d dataLineArray[2].trim();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String nightFood \u003d dataLineArray[2].trim();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                ArrayList\u003cFood\u003e morningFoods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                ArrayList\u003cFood\u003e afternoonFoods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                ArrayList\u003cFood\u003e nightFoods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String[] morningFoodList \u003d morningFood.split(\",\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                for (String foodInfo : morningFoodList) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    int splitIndex \u003d foodInfo.indexOf(\"(\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    String nameDescription \u003d foodInfo.substring(0, splitIndex);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    foodName \u003d Optional.of(FoodNameParser.parseFoodName(nameDescription));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    Optional\u003cFood\u003e curFood \u003d foodNutritionRecord.findFood(foodName.get());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (curFood.isPresent()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        morningFoods.add(curFood.get());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        morningFoods.add(new Food(foodName.get()));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String[] afternoonFoodList \u003d afternoonFood.split(\",\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                for (String foodInfo : afternoonFoodList) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    int splitIndex \u003d foodInfo.indexOf(\"(\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    String nameDescription \u003d foodInfo.substring(0, splitIndex);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    foodName \u003d Optional.of(FoodNameParser.parseFoodName(nameDescription));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    Optional\u003cFood\u003e curFood \u003d foodNutritionRecord.findFood(foodName.get());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (curFood.isPresent()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        afternoonFoods.add(curFood.get());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        afternoonFoods.add(new Food(foodName.get()));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String[] nightFoodList \u003d nightFood.split(\",\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                for (String foodInfo : nightFoodList) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    int splitIndex \u003d foodInfo.indexOf(\"(\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    String nameDescription \u003d foodInfo.substring(0, splitIndex);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    foodName \u003d Optional.of(FoodNameParser.parseFoodName(nameDescription));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    Optional\u003cFood\u003e curFood \u003d foodNutritionRecord.findFood(foodName.get());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    if (curFood.isPresent()) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        nightFoods.add(curFood.get());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                        nightFoods.add(new Food(foodName.get()));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                String date \u003d dataLineArray[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                recipeManager.setRecipe(date, \"morning\", morningFoods);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                recipeManager.setRecipe(date, \"afternoon\", afternoonFoods);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "                recipeManager.setRecipe(date, \"night\", nightFoods);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            myReader.close();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (FileNotFoundException | InvalidFormatException | InvalidFoodNameException e) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            logsCentre.writeInfoLog(\"Recipe Information Invalid, Recipe cleared.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            clearRecipe();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Clears all content in the recipe data file."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void clearRecipe() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(RECIPE_FILE_PATH);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     * Rewrites the data file to reflect the current data."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    public void writeRecipeFile() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(RECIPE_FILE_PATH, false);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            myWriter.write(RecipeManager.getInstance().getRecipeBody());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the data file in the directory, if absent, creates a new data file. \u003cbr\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * If data file is present, loads the existing data from the file such that it is accessible by the user."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadProfileFile() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File profileData \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (profileData.createNewFile()) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"No existing Profile found, new file created: \""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + profileData.getName().toString());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"Existing Profile found: \""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + profileData.getName().toString());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.readProfileFile();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeSevereLog(\"Error in Profile data file\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Reads the data file and parses the existing data in the file, converting it into tasks which is added into"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * the tasklist such that it is accessible by the user."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void readProfileFile() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File profileData \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Scanner myReader \u003d new Scanner(profileData);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cString\u003e name \u003d Optional.empty();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cInteger\u003e age \u003d Optional.empty();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cString\u003e gender \u003d Optional.empty();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cDouble\u003e height \u003d Optional.empty();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cList\u003cDouble\u003e\u003e weightList \u003d Optional.empty();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Optional\u003cDouble\u003e weightGoal \u003d Optional.empty();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String dataLine \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String[] dataLineArray \u003d StorageParser.parseProfileDataLine(dataLine);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String label \u003d dataLineArray[0];"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String description \u003d dataLineArray[1];"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                switch (label) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Name\":"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    name \u003d Optional.of(NameParser.parseName(description));"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Age\":"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    age \u003d Optional.of(AgeParser.parseAge(description));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Gender\":"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    gender \u003d Optional.of(GenderParser.parseGender(description));"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Height\":"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    height \u003d Optional.of(HeightParser.parseHeight(description));"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"WeightList\":"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    weightList \u003d Optional.of(StorageParser.parseWeightListDataLine(description));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                case \"Weight-Goal\":"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    weightGoal \u003d Optional.of(WeightParser.parseWeight(description));"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    throw new InvalidFormatException();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (name.isPresent() \u0026\u0026 age.isPresent() \u0026\u0026 gender.isPresent()"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    \u0026\u0026 height.isPresent() \u0026\u0026 weightList.isPresent() \u0026\u0026 weightGoal.isPresent()) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String profileName \u003d name.get();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                int profileAge \u003d age.get();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String profileGender \u003d gender.get();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double profileHeight \u003d height.get();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                List\u003cDouble\u003e profileWeightList \u003d weightList.get();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double profileWeightGoal \u003d weightGoal.get();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.profile.setProfile(profileName, profileAge, profileGender,"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        profileHeight, profileWeightList.get(profileWeightList.size() - 1), profileWeightGoal);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.profile.getWeightRecord().clear();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                for (int i \u003d 0; i \u003c (profileWeightList.size()); i++) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    this.profile.getWeightRecord().add(profileWeightList.get(i));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                throw new InvalidFormatException();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myReader.close();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException | InvalidFormatException | InvalidNameException | InvalidAgeException"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                | InvalidGenderException | InvalidHeightException | InvalidWeightException e) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeInfoLog(\"Profile Information Invalid, Profile cleared.\");"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            clearProfileFile();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Clears all content in the data file."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void clearProfileFile() {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Rewrites the data file to reflect the current data."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeProfileFile() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(PROFILE_FILE_PATH, false);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Name: \" + this.profile.getName() + System.lineSeparator());"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Age: \" + this.profile.getAge() + System.lineSeparator());"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Gender: \" + this.profile.getGender() + System.lineSeparator());"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Height: \" + this.profile.getHeight() + System.lineSeparator());"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"WeightList: \");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            for (double weightRecord : this.profile.getWeightRecord()) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                myWriter.write(weightRecord + \",\");"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.write(\"Weight-Goal: \" + this.profile.getWeightGoal());"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Searches for the data file in the directory, if absent, creates a new data file. \u003cbr\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * If data file is present, loads the existing data from the file such that it is accessible by the user."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void loadFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File foodNutritionRecordData \u003d new File(FOOD_NUTRITION_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            if (foodNutritionRecordData.createNewFile()) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"No existing Food Nutrition Record found, new file created: \""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + foodNutritionRecordData.getName().toString());"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                logsCentre.writeInfoLog(\"Existing Food Nutrition Record found: \""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + foodNutritionRecordData.getName().toString());"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.readFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeSevereLog(\"Error in Food Nutrition Record data file\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Reads the data file and parses the existing data in the file, converting it into tasks which is added into"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * the tasklist such that it is accessible by the user."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void readFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            File profileData \u003d new File(FOOD_NUTRITION_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            Scanner myReader \u003d new Scanner(profileData);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            this.foodNutritionRecord.clearFoodNutritionRecordList();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String dataLine \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String[] dataLineArray \u003d StorageParser.parseFoodNutritionRecordDataLine(dataLine);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String label \u003d dataLineArray[0];"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String description \u003d dataLineArray[1];"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String foodName \u003d FoodNameParser.parseFoodName(label);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double calories \u003d CaloriesParser.parseCalories(description);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                this.foodNutritionRecord.addFoodNutritionRecord(foodName, calories);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myReader.close();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException | InvalidFormatException"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                | InvalidFoodNameException | InvalidCaloriesException e) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            logsCentre.writeInfoLog(\"Food Nutrition Record Information Invalid, Food Nutrition Record cleared.\");"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            clearFoodNutritionRecordFile();"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Clears all content in the data file."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void clearFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(FOOD_NUTRITION_RECORD_FILE_PATH);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Rewrites the data file to reflect the current data."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void writeFoodNutritionRecordFile() {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(FOOD_NUTRITION_RECORD_FILE_PATH, false);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            for (Food food : this.foodNutritionRecord.getFoodNutritionRecordList()) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                String foodName \u003d food.getFoodName();"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                foodName \u003d FoodNameParser.parseFoodName(foodName);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                double calories \u003d 0.00;"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                if (food.hasCaloriesData()) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    calories \u003d food.getCalories().get();"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                myWriter.write(foodName + \",\" + calories + System.lineSeparator());"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (IOException | InvalidFoodNameException e) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            ui.displayFileErrorMessage();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 333,
      "DDzuikeai": 287
    }
  },
  {
    "path": "src/main/java/seedu/dietmanager/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.CREATE_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.EXIT_APP_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.FILE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.FUNCTION_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_GENDER_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.INVALID_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.LOGO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static seedu.dietmanager.commons.core.MessageBank.WELCOME_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " * UI is the public class responsible for managing all user interface functions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * The exit status determining whether to close the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    private boolean exitStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Constructs the UI object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.exitStatus \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Prints the welcome message for the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(LOGO, WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void displayHelpMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(FUNCTION_LIST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayExitMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(EXIT_APP_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayFileErrorMessage() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(FILE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayInvalidCommandMessage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayInvalidFormatMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(INVALID_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void displayIndexOutOfBoundMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(INVALID_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    public void displayInvalidGenderMessage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(INVALID_GENDER_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void displayCreateProfileMessage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        showMessage(CREATE_PROFILE_MESSAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the exit status."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the exit status."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public boolean isExitStatus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return this.exitStatus;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Updates the exit status."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @param update the updated exit status."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public void setExitStatus(boolean update) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        this.exitStatus \u003d update;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     * @return the next line of user input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Printer to print out strings of messages to user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param message String of message to be shown to user"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void showMessage(String... message) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(m);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 91,
      "lamyuewei": 3,
      "yuxianglim": 26
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/DietManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "class DietManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 3,
      "DDzuikeai": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/commons/core/WeekdayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class WeekdayTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getIndex() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(1, Weekday.MONDAY.getIndex());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(2, Weekday.TUESDAY.getIndex());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(3, Weekday.WEDNESDAY.getIndex());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(4, Weekday.THURSDAY.getIndex());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(5, Weekday.FRIDAY.getIndex());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(6, Weekday.SATURDAY.getIndex());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(7, Weekday.SUNDAY.getIndex());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"MONDAY\", Weekday.MONDAY.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"TUESDAY\", Weekday.TUESDAY.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"WEDNESDAY\", Weekday.WEDNESDAY.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"THURSDAY\", Weekday.THURSDAY.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"FRIDAY\", Weekday.FRIDAY.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"SATURDAY\", Weekday.SATURDAY.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"SUNDAY\", Weekday.SUNDAY.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 30
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/ResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class ResultTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void showResult() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Result test \u003d new Result(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Hello\", test.showResult());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertFalse(\"Hello!\".equals(test.showResult()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 16
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/commands/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package seedu.dietmanager.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.core.MessageBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.logic.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.model.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import seedu.dietmanager.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    void setWeightCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        profile.setProfile(\"John\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Command command \u003d new SetWeightCommand(\"set-weight\", \"50\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        command.execute(profile, ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        assertEquals(\"Your weight has been changed to 50.00.\", command.resultString);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    void deleteWeightCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        profile.setProfile(\"John\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Command command \u003d new DeleteWeightCommand(\"delete-weight\", \"1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        command.execute(profile, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        assertEquals(\"Weight Record: 80.0kg has been removed successfully!\", command.resultString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    void checkWeightRecordCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        profile.setProfile(\"John\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Command command \u003d new CheckWeightRecordCommand(\"check-weight-progress\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        command.execute(profile, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"There has been no change in your weight!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                        + \"-5.00 kg more to go to meet your dream girl/boy!\", command.resultString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setAgeCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Command command \u003d new SetAgeCommand(\"set-age\", \"20\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        command.execute(profile, ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(Result.class, command.getResult(profile).getClass());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(MessageBank.INVALID_PROFILE_MESSAGE, command.getResult(profile).showResult());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        command \u003d new SetAgeCommand(\"set-age\", \"20\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        command.execute(profile, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(Result.class, command.getResult(profile).getClass());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        command \u003d new SetAgeCommand(\"set-age\", \"-10\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        command.execute(profile, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(Result.class, command.getResult(profile).getClass());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(MessageBank.INVALID_AGE_MESSAGE, command.getResult(profile).showResult());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 28,
      "yuxianglim": 39
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/AgeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidAgeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class AgeParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseAge() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(20, AgeParser.parseAge(\"20\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(40, AgeParser.parseAge(\"40\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(40 \u003d\u003d AgeParser.parseAge(\"30\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(20 \u003d\u003d AgeParser.parseAge(\"30\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidAgeException.class, () -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                AgeParser.parseAge(\"Hello\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidAgeException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                AgeParser.parseAge(\"0.10\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidAgeException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                AgeParser.parseAge(\"-10\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidAgeException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                AgeParser.parseAge(\"1000\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidAgeException ignored) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 35
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/CaloriesParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCaloriesException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class CaloriesParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseCalories() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(20.0, CaloriesParser.parseCalories(\"20\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(40, CaloriesParser.parseCalories(\"40.00\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(40 \u003d\u003d CaloriesParser.parseCalories(\"30\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(20 \u003d\u003d CaloriesParser.parseCalories(\"30\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidCaloriesException.class, () -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                CaloriesParser.parseCalories(\"Hello\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidCaloriesException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                CaloriesParser.parseCalories(\".\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidCaloriesException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                CaloriesParser.parseCalories(\"-0.50\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertThrows(InvalidCaloriesException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                CaloriesParser.parseCalories(\"-1000\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidCaloriesException ignored) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 35
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseInput() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            CommandParser.parseInput(\"profile hi\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            CommandParser.parseInput(\"set-weight  \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            CommandParser.parseInput(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            CommandParser.parseInput(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            CommandParser.parseInput(\"set-profile\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            CommandParser.parseInput(\"help-me\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            CommandParser.parseInput(\"0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"profile\", CommandParser.parseInput(\"profile\").get().getCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"list-food\", CommandParser.parseInput(\"list-food\").get().getCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"show-recipe\", CommandParser.parseInput(\"show-recipe\").get().getCommand());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"help\", CommandParser.parseInput(\"help\").get().getCommand());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"exit\", CommandParser.parseInput(\"exit\").get().getCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"set-profile\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"set-profile john 25 Male 175 70 75\").get().getCommand());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"set-name\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"set-name john\").get().getCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"set-age\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"set-age 25\").get().getCommand());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"set-gender\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"set-gender Male\").get().getCommand());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"set-height\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"set-height 175\").get().getCommand());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"set-weight\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"set-weight 70.5\").get().getCommand());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"set-weight-goal\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"set-weight-goal 75.8\").get().getCommand());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"delete-weight\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    CommandParser.parseInput(\"delete-weight 0\").get().getCommand());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidCommandException | InvalidFormatException ignored) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 62
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/DescriptionParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class DescriptionParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            DescriptionParser.parseDescription(\"Hello John\", 3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            DescriptionParser.parseDescription(\"Hello John Doe\", 4);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertTrue(DescriptionParser.parseDescription("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    \"Hello John Doe\", 3).length \u003d\u003d 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(DescriptionParser.parseDescription("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "                    \"Hello John\", 2).length \u003d\u003d 3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidFormatException ignored) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 31
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/FoodNameParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFoodNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class FoodNameParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseFoodName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"apple-cider\", FoodNameParser.parseFoodName(\"Apple cider\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"apple-cider\", FoodNameParser.parseFoodName(\"Apple-Cider\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"apple-cider\", FoodNameParser.parseFoodName(\"APPLE CIDER\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidFoodNameException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 20
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/GenderParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidGenderException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class GenderParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseGender() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidGenderException.class, () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            GenderParser.parseGender(\"Hello\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidGenderException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            GenderParser.parseGender(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidGenderException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            GenderParser.parseGender(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"male\", GenderParser.parseGender(\"male\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"female\", GenderParser.parseGender(\"Female\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"male\", GenderParser.parseGender(\"MALE\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(\"male\".equals(GenderParser.parseGender(\"female\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(\"female\".equals(GenderParser.parseGender(\"Male\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(\"male\".equals(GenderParser.parseGender(\"MA LE\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidGenderException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 34
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/HeightParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidHeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class HeightParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseHeight() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidHeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            HeightParser.parseHeight(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidHeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            HeightParser.parseHeight(\"Hello\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidHeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            HeightParser.parseHeight(\".\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidHeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            HeightParser.parseHeight(\"-1.50\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidHeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            HeightParser.parseHeight(\"10000.00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(2.00, HeightParser.parseHeight(\"2.0\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(2.00, HeightParser.parseHeight(\"2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(1.00 \u003d\u003d HeightParser.parseHeight(\"2\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(2.00 \u003d\u003d HeightParser.parseHeight(\"2.01\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidHeightException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 38
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/NameParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class NameParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"John-Doe\", NameParser.parseName(\"John Doe\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"John-Doe\", NameParser.parseName(\"John-Doe\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"John-Doe\", NameParser.parseName(\" John Doe  \"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(\"John-Doe\".equals(NameParser.parseName(\"John  Doe\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(\"JohnDoe\".equals(NameParser.parseName(\"John Doe\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidNameException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 23
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/StorageParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class StorageParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseProfileDataLine() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseProfileDataLine(\"Name: \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseProfileDataLine(\"Name:John Doe\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseProfileDataLine(\"John Doe\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(String[].class, StorageParser.parseProfileDataLine(\"Name: John Doe\").getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"Name\", StorageParser.parseProfileDataLine(\"Name: John Doe\")[0]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"John Doe\", StorageParser.parseProfileDataLine(\"Name: John Doe\")[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseRecipeDataLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseRecipeDataLine(\"Hello  \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseRecipeDataLine(\" am John\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseRecipeDataLine(\"Hello I am\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(String[].class, StorageParser.parseRecipeDataLine(\"Hello   I  am John\").getClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"Hello\", StorageParser.parseRecipeDataLine(\"Hello I am John\")[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"I\", StorageParser.parseRecipeDataLine(\"Hello   I  am John\")[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseWeightListDataLine() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidWeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseWeightListDataLine(\"Hello\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidWeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseWeightListDataLine(\"Hello,John\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(ArrayList.class, StorageParser.parseWeightListDataLine(\"50,40,30\").getClass());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(50, StorageParser.parseWeightListDataLine(\"50,40, 30\").get(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(40, StorageParser.parseWeightListDataLine(\"50,  40,30  \").get(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidWeightException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseFoodNutritionRecordDataLine() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseFoodNutritionRecordDataLine(\"Chicken500\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseFoodNutritionRecordDataLine(\"Chicken  \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            StorageParser.parseFoodNutritionRecordDataLine(\"500\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(String[].class, StorageParser.parseFoodNutritionRecordDataLine(\"Chicken,500\").getClass());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"Chicken\", StorageParser.parseFoodNutritionRecordDataLine(\"Chicken,500\")[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(\"500\", StorageParser.parseFoodNutritionRecordDataLine(\"Chicken,500  \")[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 90
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/logic/parser/WeightParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import seedu.dietmanager.commons.exceptions.InvalidWeightException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class WeightParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void parseWeight() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidWeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            WeightParser.parseWeight(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidWeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            WeightParser.parseWeight(\"Hello\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidWeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            WeightParser.parseWeight(\".\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidWeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            WeightParser.parseWeight(\"-1.50\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertThrows(InvalidWeightException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            WeightParser.parseWeight(\"10000.00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(2.00, WeightParser.parseWeight(\"2.0\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertEquals(2.00, WeightParser.parseWeight(\"2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(1.00 \u003d\u003d WeightParser.parseWeight(\"2\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            assertFalse(2.00 \u003d\u003d WeightParser.parseWeight(\"2.01\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        } catch (InvalidWeightException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 38
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/model/FoodNutritionRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class FoodNutritionRecordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getInstance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(ArrayList.class, (FoodNutritionRecord.getInstance().getFoodNutritionRecordList()).getClass());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void findFood() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.findFood(\"chicken-rice\").isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void testFindFood() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(Food.class, test.findFood(0).getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void isInDatabase() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.isInDatabase(\"chicken-rice\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void showFoodDatabase() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(String.class, test.showFoodDatabase().getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void addFoodNutritionRecord() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.addFoodNutritionRecord(\"Muffin\", 200.00));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertFalse(test.addFoodNutritionRecord(\"Chicken-Rice\", 200.00));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void deleteFoodNutritionRecord() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertFalse(test.deleteFoodNutritionRecord(\"Cookie\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.deleteFoodNutritionRecord(\"Chicken-Rice\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getFoodNutritionRecordList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(ArrayList.class, (FoodNutritionRecord.getInstance().getFoodNutritionRecordList()).getClass());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void clearFoodNutritionRecordList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        test.clearFoodNutritionRecordList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.getListSize() \u003d\u003d 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getListSize() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.getListSize() \u003e\u003d 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void getFoodCalories() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        FoodNutritionRecord test \u003d FoodNutritionRecord.getInstance();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.getFoodCalories(0) \u003e\u003d 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 79
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/model/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void getFoodName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"apple\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(\"apple\", food.getFoodName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void getCalories() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"orange\", 100);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(100, food.getCalories().get());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void hasCaloriesData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"pear\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertFalse(food.hasCaloriesData());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"grape\", 50);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(\"Food: grape, Calories: 50.00cal\\n\", food.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    void getPair() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        Food food \u003d new Food(\"mango\", 500);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "        assertEquals(\"mango(500.00),\", food.getPair());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyuewei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyuewei": 39
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/model/ProfileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "class ProfileTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setName(\"Jane Doe\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Jane Doe\", profile.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setGender() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setGender(\"Female\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Female\", profile.getGender());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setAge() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setAge(18);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(18, profile.getAge());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setHeight() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setHeight(170);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(170, profile.getHeight());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setWeightGoal() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setWeightGoal(50);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(50, profile.getWeightGoal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void setProfileExist() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfileExist(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(false, profile.isProfileExist());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void isProfileExist() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(true, profile.isProfileExist());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getHeight() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(180, profile.getHeight());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getWeight() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(80, profile.getWeight());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getWeightGoal() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(75, profile.getWeightGoal());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getAge() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(20, profile.getAge());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getGender() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"Male\", profile.getGender());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertEquals(\"John Doe\", profile.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    void getRecordOfDay() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        profile.setProfile(\"John Doe\", 20, \"Male\", 180, 80, 75);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        DailyFoodRecord record \u003d profile.getRecordOfDay(\"WEDNESDAY\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "        assertEquals(\"WEDNESDAY\", record.getDate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DDzuikeai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 91,
      "DDzuikeai": 22
    }
  },
  {
    "path": "src/test/java/seedu/dietmanager/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "package seedu.dietmanager.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void isExitStatus() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        UI test \u003d new UI();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertFalse(test.isExitStatus());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    void setExitStatus() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        UI test \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        test.setExitStatus(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "        assertTrue(test.isExitStatus());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dejunnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 23
    }
  },
  {
    "path": "text-ui-test/data/food-nutrition-record.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "chicken-rice,702.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "fried-rice,508.0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "chicken-curry,450.0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "prawn-noodles,459.0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "fishball-noodles,330.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "cheeseburger,300.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "white-bread,77.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "french-fries,450.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "orange-juice,80.0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "soft-drink,120.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "fresh-milk,163.0"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dejunnn"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "dejunnn": 1
    }
  }
]
