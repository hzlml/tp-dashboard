[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    mainClassName \u003d \"seedu.tp.Main\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    archiveBaseName \u003d \"history-flashcard\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    archiveVersion \u003d \"0.2.1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "quinnyyy": 2,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Guo Lilian | [Github](https://github.com/g-lilian) | [Portfolio](team/g-lilian.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhilin Huang | [Github](https://github.com/Zhilin-Huang) | [Portfolio](team/zhilin-huang.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shiyue Liu | [Github](https://github.com/) | [Portfolio](team/sliu107.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Quinn Meurer | [Github](https://github.com/quinnyyy) | [Portfolio](team/quinnyyy.md)"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 2,
      "sliu107": 1,
      "g-lilian": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Ui Component"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "The structure of the Ui Component is illustrated in the following diagram:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "![UiComponentDiagram](images/UiComponent.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "API : `Ui.java`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "1. The `Ui` class is used to communicate with users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "2. The `Ui` class depends on `Scanner` to get inputs from users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "3. The `Main` class uses `Ui#getNextLine()` to receive `commands` from users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "4. And `FlashcardFactory` and `GroupFactory` classes uses methods in `Ui` class to complete "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "the execution of various commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Given below is the Sequence Diagram for interactions between the `Ui` and `FlashcardFactory` components to complete the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "execution of an example command (`deleteCommand`)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "![UiSequenceDiagram](images/UiSequenceDiagram.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Parser Component"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The structure of the Parser Component is illustrated in the following diagram:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![ParserComponentDiagram](images/ParserComponent.png)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "API : `Parser.java`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. The `Main` class (not shown in the diagram above) uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. The `Parser` class depends on multiple classes including the `FlashcardFactory`, `FlashcardList`, `GroupFactory"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`, `GroupList`, `StudyPlanList` and `Ui` classes to create a `Command` object from user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. The resulting `Command` object which then can be executed by the `Main` class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Given below is the Sequence Diagram for interactions between the `Parser` and `Command` components for the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`parseCommand` API call from `Main` class. We use the interaction between the `Parser` and `DeleteCommand` class as an example: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "\u003cimg src\u003d\"images/ParserAndCommandSequenceDiagram.png\" alt\u003d\"ParserAndCommandSequenceDiagram\" width\u003d\"500\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Storage Component"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "The structure of the Storage component is illustrated in the folowing diagram."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "![StorageComponentDiagram](images/Storage_UML.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "The `Storage` class can be used to save, delete and load classes that implement the `Savable` interface.  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "`Storage` is implemented using the Singleton pattern because there only should be one instance in the program at any given time.  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "`Storage` used the Gson library to serialize/deserialize objects to/from JSON strings.  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "The `ModifyinCommand` class uses the `Storage` class to save/delete objects when a change is made.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "The `Main` class uses the `Storage` object to load objects at the start of exectuion."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Set Priority Feature - Proposed Implementation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The Set Priority feature allows users to mark a flashcard with a specified priority level. The priority level is"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "then reflected when the user requests a list of existing flashcards."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "`PriorityLevel` is stored as an enum with four fields: LOW, MEDIUM, HIGH and DEFAULT."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The feature implements the following operations:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `Flashcard#setPriorityLevel()` - Sets a flashcard to a specified priority level (LOW/MEDIUM/HIGH)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `Flashcard#getPriorityAsString()` - Return an icon indicating the flashcard\u0027s priority level."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The following class diagram shows the structures relevant to the Set Priority feature:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "![SetPriorityFeatureClassDiagram](images/SetPriorityFeatureClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Given below is an example usage scenario and how the set priority mechanism behaves at each step."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Step 1. The user launches the application and creates a new `Flashcard` (of type Event, Person, or Other), "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "with a default priority level of DEFAULT."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Step 2. The user executes `priority [flashcard index] [priority level]` command and the `setPriorityLevel` "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "operation is invoked. Subsequently, the flashcard of specified index is retrieved from the main `FlashcardList` "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "instance. Its priority level is set to the specified priority."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The following sequence diagram shows the relevant interactions behind `setPriorityLevel`:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "![setPriorityLevelSequenceDiagram](images/setPriorityLevelSequenceDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Study Plan Feature - Proposed Implementation"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The Study Plan feature is facilitated by `StudyPlanList`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Internally, it implements a `TreeMap`, with date as key and the list of flashcard indexes to study as value. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Key-value pairs in the `TreeMap` are sorted by dates."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#updateStudyPlan()` - Updates the study plan list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#deleteStudyPlan()` - Deletes a study plan from the study plan list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#getStudyPlanList()` - Gets the list of study plans."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Given below is an example usage scenario and how the study plan mechanism behaves at each step."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 1. The user launches the application and an empty `StudyPlanList` is initialized."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 2. The user executes `plan` command and the `updateStudyPlan` operation is invoked. The application prompts the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "user for date and the corresponding list of flashcards indexes."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `updateStudyPlan` operation works:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![updateStudyPlanSequenceDiagram](images/updateStudyPlanSequenceDiagram.png)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 3. The user executes `delete-plan` command and the `deleteStudyPlan` operation is invoked. The application"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "prompts the user for the date for which the study plan is to be deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `deleteStudyPlan` operation works:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![deleteStudyPlanSequenceDiagram](images/deleteStudyPlanSequenceDiagram.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 4. The user executes `show-plan` command and the `getStudyPlanList` operation is invoked. The application"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "displays the user\u0027s study plan list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `getStudyPlanList` operation works:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![getStudyPlanListSequenceDiagram](images/getStudyPlanListSequenceDiagram.png)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Random Review Feature - Proposed Implementation"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "The random review mechanism is facilitated by `FlashcardList`.It stores an `List\u003cFlashcard\u003e` internally which contains"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": "all the flashcards created by the user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "It implements the following operation:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- `FlashcardList#reviewRandomFlashcards()` -Randomize all the flashcards, then display the details of them one by one "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sliu107"
        },
        "content": "to the user. And update the review status of the flashcards corresponding to the user\u0027s\u0027 responses."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Given below is an example usage scenario and how the random review mechanism behaves at each step."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Step 1. The user launches the application for the first time. The `FlashcardsList` will be initialized with the empty "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sliu107"
        },
        "content": "flashcards list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Step 2. The user executes `event/person/other commands` to add multiple flashcards to the flashcard list "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sliu107"
        },
        "content": "(The detailed implementation of creating flashcards explained in the Flashcard Creation Feature)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Step 3. The user executes `random command` and `reviewRandomFlashcards()` operation is invoked. The application prompts "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "responses for each unreviewed flashcard that whether the user want to mark it as reviewed or not."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "The following sequence diagram shows how the   `reviewRandomFlashcards()` operation works:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sliu107"
        },
        "content": "![randomReviewSequenceDiagram](images/randomReviewSequenceDiagram.png)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "History Flashcard (HF) is for those who are studying history subjects to create flashcards which summarize "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "the most important information for historical events, figures and artifacts. HF is optimized for those who "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "prefer to use a simple Command Line Interface (CLI). "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "History is a subject that usually relies on heavy memorisation of a large amount of content. In order to "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "make revision easier for history students, HF includes features that help with memory retention and organises "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "information in a way that makes it convenient to review."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "In HF, information can be entered in the form of flashcards with different fields, such as the name of the "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "historical event/person, the relevant dates, and a summary. Flashcards can be categorised into user-defined groups"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " to enable students to organise their knowledge better. Users can also create daily study plans."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "In addition, the user can shuffle and display random flashcards for revision."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|add a Person flashcard|record the details about a historical figure|"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|add an Event flashcard|record the details about a historical event|"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|add an Other flashcard|record the details about any other historical item|"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|list all flashcards|get an overview of all my existing flashcards|"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|delete a flashcard|remove the flashcards that I no longer need|"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|view all the fields of a flashcard|review the details of a specific flashcard|"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|mark a flashcard as Reviewed|keep track of my learning progress|"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|assign priority to flashcards|identify the relative importance of flashcards for review|"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|view a timeline of all events and people|better organize my knowledge|"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|make groups for flashcards|group related flashcards together for more organized revision|"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|see all the commands available|find out what commands are available, and their format|"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|set a daily study plan|keep myself motivated to review flashcards every day|"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.0|student|view my daily study plan|keep track of my learning plans|"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|list the flashcards which have been reviewed|keep track of my learning progress|"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|list all existing flashcard groups|view all the groups I have created|"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|list flashcards from a particular group|quickly identify the flashcards belonging to a group|"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|search for flashcards using a keyword|quickly find the flashcard I am looking for|"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|save flashcards to a storage file|flashcards are not lost when I exit the app|"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|save flashcard groups to a storage file|groups are not lost when I exit the app|"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|restrict the timeline to a fixed period|keep track of flashcards belonging to a certain time period|"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|shuffle and display random flashcards|test my knowledge using random flashcards|"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.0|student|reset all the flashcards as unreviewed|review flashcards multiple times|"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.1|student|read in flashcards from a storage file|flashcards can be loaded when I enter the app|"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.1|student|read in flashcard groups from a storage file|flashcard groups can be loaded when I enter the app|"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.1|student|delete a study plan|remove outdated study plans|"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.1|student|save my daily study plan to a storage file|study plans are not lost when I exit the app|"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.1|student|read in study plans from a storage file|study plans can be loaded when I enter the app|"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "|v2.1|student|list flashcards with a specified priority|focus on the flashcards of that importance level|"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Should work on any [mainstream OS](#appendix-d-glossary) as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "2. Should be tailored to history students\u0027 needs e.g. the need to keep track of dates or historical periods."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Appendix D: Glossary"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Given below are instructions to test the app manually. Note that these instructions only provide a starting point for"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "testers to work on; testers are expected to do more exploratory testing."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.1. Launch and Shutdown"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Launch"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Double-click the file to start the application or run the command `java -jar [path-to-history-flashcard-jar-file]` "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    from terminal."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Type in the `bye` to the application."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.2. Getting help"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Getting help."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `help`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application displays a list of commands available."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.3. Flashcard Creation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Adding an Event Flashcard."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `event`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Adding a Person Flashcard."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `person`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Adding an Other Flashcard which name does not duplicate the names of existing flashcards."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisites: List all flashcards using the `list` command and choose a new name for the new flashcard."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `other`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `other blabla`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Same as above because `blabla` should be ignored."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Adding an Other Flashcard which name duplicates one of the names of existing flashcards."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisites: List all flashcards using the `list` command and choose a duplicate name for the new flashcard."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `other`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation and a message"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      saying that the created flashcard is not added due to the duplicate name. "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.4. Flashcard Basic Operations"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Listing all flashcards."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list` when there are flashcards in the application."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards in the application."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list` when there are no flashcard in the application."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a message indicating that the user has no flashcard at the moment."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Showing timeline."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `timeline`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards in order sorted by start/birth date."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `timeline 1900 2000`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards from the 1900 to 2000 period in order sorted by start/birth date."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Deleting a flashcard."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisites: List all flashcards using the `list` command and choose the index of a flashcard to delete"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete 1`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       Expected: Receive a confirmation message from the application for successful flashcard deletion."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       Expected: Receive a message from the application stating that the user should use correct input format."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete -1`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       Expected: Receive a message from the application stating that the user input contains invalid flashcard "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       index(es)."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Showing a flashcard."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `show 1`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application shows all fields from the flashcard at index 1."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Finding flashcards with names containing a specific keyword."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `find war`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application displays all flashcards with names containing `war`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.5. Flashcard Status Operations"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Assigning priority to a flashcard."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There are at least 2 flashcards in the application."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `priority 2 MEDIUM`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a message from the application stating that priority for flashcard at index 2 is updated to"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      MEDIUM."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Listing flashcards of a specified priority."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list-priority MEDIUM`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards which match the MEDIUM priority level."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Marking flashcard as reviewed."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `reviewed 1`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a message from the application stating that review status for flashcard at index 1 is"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      updated to reviewed."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Listing reviewed flashcards."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list-reviewed`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all reviewed flashcards."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Resetting review status of all flashcards."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `reset-reviewed`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application resets status of all flashcards to un-reviewed."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.6. Flashcard Grouping"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Making a flashcard group. "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `group`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard group."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard group creation."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Adding a flashcard to a flashcard group."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `add`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields for adding a flashcard to a flashcard group."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "             "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some valid values for the fields."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful addition of flashcard to"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      the flashcard group."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Displaying flashcard groups."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `show-groups`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all existing flashcard groups."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Listing flashcards in a group."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard group in the application."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list-group 1`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards in the flashcard group at index 1."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Deleting flashcard group from the group list."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard group in the application."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete-group 1`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful deletion of the flashcard group at"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      index 1."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.7. Study Plans"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Creating a new study plan."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `plan`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields for adding a flashcard to a flashcard group."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "             "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some valid values for the fields."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "   "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful update of study plan."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Displaying all study plans."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `show-plan`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all study plans."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Deleting an existing study plan."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete-plan`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter the date for which the study plan is to be deleted."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter a valid date."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful deletion of study plan."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.8. Randomized Review"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Displaying all flashcards in random order."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `random`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application shuffles and displays all the flashcards in a random order and prompts the user to give"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      responses during the review."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter responses."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Reviewed finished."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.9. Saving and Loading"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Saving"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: Add flashcards into the application and exit."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Storage files generated under the `historyflashcards` directory."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Loading"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: Starts the application again."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Saved contents under the `historyflashcards` directory are loaded into the application."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 307,
      "sliu107": 38,
      "quinnyyy": 11,
      "g-lilian": 73,
      "-": 27
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "# History Flashcard"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "History Flashcard (HF) is for those who are studying history subjects to create flashcards which summarize the most important information for historical events, figures and artifacts. HF is optimized for those who prefer to use a simple Command Line Interface (CLI). It includes features that help with memory retention and make information convenient to review, e.g. the ability to organize historical events into timelines and store summarized biographies of history figures."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 2,
      "g-lilian": 1,
      "-": 5
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "# History Flashcard - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "3. [Features](#3-features)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Command Format](#31-command-format)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Basic](#32-basic)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Flashcard Creation](#33-flashcard-creation)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Flashcard Basic Operations](#34-flashcard-basic-operations)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Flashcard Status Operations](#35-flashcard-status-operations)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Flashcard Grouping](#36-flashcard-grouping)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Study Plans](#37-study-plans)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    - [Randomized Review](#38-randomized-review)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    - [Saving and Loading](#39-saving-and-loading)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "4. [FAQ](#4-faq)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "5. [Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "History Flashcard (HF) is for those who are studying history subjects to create flashcards which summarize the most "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "important information for historical events, figures and artifacts. HF is optimized for those who prefer to use a "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "simple Command Line Interface (CLI). It includes features that help with memory retention and make information "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "convenient to review, e.g. the ability to organize historical events into timelines and store bite-size details about history figures."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "2. Download the latest version of `HistoryFlashcard` from [here](https://github.com/AY1920S2-CS2113-T14-1/tp/releases)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Move the JAR file to the folder you want to use as the home folder for `HistoryFlashcard `."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Double-click the file to start the application or run the command `java -jar [path-to-history-flashcard-jar-file]` from terminal"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Type in commands and start using `HistoryFlashcard`!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.1. Command Format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Words in `UPPER_CASE` are parameters to be supplied by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Items in square brackets are optional e.g `TITLE [DETAILS]` can be used as `Title Some Detail` or just `Title`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.2. Basic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.2.1. Getting Help: `help`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Displays a list of commands available."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.2.2. Exiting the program: `bye`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Exits History Flashcard."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.3. Flashcard Creation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.3.1. Adding an Event Flashcard: `event`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds an Event Flashcard."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `event`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `EVENT_NAME`: can be in a natural language format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `START_TIME`: has to be in valid date format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `END_TIME`: has to be in valid date format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `SUMMARY`: can be in a natural language format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DETAIL`: can be in a natural language format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`START_TIME` may not be later than `END_TIME`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "There can be 0 or multiple `DETAIL`s added for an Event Flashcard. To stop entering details, just enter an empty line"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "by hitting `ENTER/RETURN`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "event"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Meiji Restoration"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1868"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1868"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Turning point in Japanese history"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "End of Shogunate"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Centralization of power"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Functional end of Samurai Class"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.3.2. Adding a Person Flashcard: `person`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds a Person Flashcard."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `person` "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `PERSON_NAME `: can be in a natural language format"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `BIRTH_DAY`: has to be in valid date format"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DEATH_DAY`: has to be in valid date format"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `SUMMARY`: can be in a natural language format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DETAIL`: can be in a natural language format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`BIRTH_DAY` may not be later than `DEATH_DAY`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "There can be 0 or multiple `DETAIL`s added for a Person Flashcard. To stop entering details, just enter an empty line"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "by hitting `ENTER/RETURN`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Late August, 1881"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "08 1881"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "30/06/1997"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore was never proud or vain."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "He could find something to value in anyone, however apparently insignificant or wretched"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Dumbledore became most famous for his defeat of Gellert Grindelwald, the discovery of the twelve uses of dragon\u0027s blood, and his work on alchemy with Nicolas Flamel"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.3.3. Adding an Other Flashcard: `other`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds an Other Flashcard."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `other`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `NAME`: can be in a natural language format"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `SUMMARY`: can be in a natural language format"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DETAIL`: can be in a natural language format"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "There can be 0 or multiple `DETAIL`s added for an Other Flashcard. To stop entering details, just enter an empty line"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "by hitting `ENTER/RETURN`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Resurrection Stone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The Resurrection Stone is one of the fabled Deathly Hallows."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "In \"The Tale of the Three Brothers\", it was the second Hallow created, supposedly by Death himself"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "It was bestowed upon Cadmus Peverell after he requested, as his bounty, something with the power to recall loved ones from Death"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "According to legend, whoever reunited it with the other two Hallows (the Elder Wand and the Cloak of Invisibility) would become the Master of Death"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.4. Flashcard Basic Operations"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.4.1. Listing All Flashcards: `list`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Lists all flashcards in the application."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.4.2. Showing Timeline: `timeline`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "List all flashcards in order sorted by start/birth date."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Specifying `STARTDATE` and `ENDDATE` will restrict the timeline to this period, inclusive of both dates."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`STARTDATE` may not be later than `ENDDATE`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `timeline [STARTDATE] [ENDDATE]`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.4.3. Deleting a Flashcard: `delete`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Deletes the flashcard at the specified index in the list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- The `INDEX` must be in a valid number format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.4.4. Showing a Flashcard: `show`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Shows all fields from the flashcard at the specified index in the list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `show INDEX`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- The `INDEX` must be in a valid number format."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`show 3`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.4.5. Finding Flashcards with Names Containing a specific keyword: `find`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Displays all flashcards with names containing the KEYWORD."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`find war`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.5. Flashcard Status Operations"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.5.1. Assigning Priority to a Flashcard: `priority`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Assign Priority Level `LOW`, `MEDIUM`, `HIGH` to the flashcard at the specified index."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `priority INDEX PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `PRIORITY_LEVEL`: must be one of `LOW`, `MEDIUM`, `HIGH`, `DEFAULT`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "`priority 2 MEDIUM`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.5.2. Listing Flashcards of a Specified Priority: `list-priority`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Lists all flashcards which match the specified priority level."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `list-priority PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `PRIORITY_LEVEL`: must be one of `LOW`, `MEDIUM`, `HIGH`, `DEFAULT`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.5.3. Marking Flashcard as Reviewed: `reviewed`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Marks a flashcard at the specified index as reviewed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `reviewed INDEX`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "`reviewed 1`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.5.4. Listing Reviewed Flashcards: `list-reviewed`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Lists all reviewed flashcards."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `list-reviewed`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.5.5. Resetting Review status of Flashcards: `reset-reviewed`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Resets status of all flashcards to un-reviewed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `reset-reviewed`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.6. Flashcard Grouping"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.6.1. Grouping Flashcards: `group`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Creates a new group of flashcards."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `group`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `NAME`: can be in a natural language format"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DESCRIPTION`: can be in a natural language format"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `INDEXES`: a list of index numbers separated by space"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "group"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "This is a group for HP related stuff."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2 3"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### 3.6.2. Adding Flashcard to Group: `add`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds a flashcard to a group."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `add`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- `GROUP_ID`: can be the index of the group in the list generated by `show-groups`, or simply"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sliu107"
        },
        "content": "              the name of the group."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.6.3. Displaying Groups: `show-groups`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Lists all existing groups."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `show-groups`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.6.4. Listing Flashcards in a Group: `list-group`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Lists all flashcards in a group specified by `GROUP_ID`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sliu107"
        },
        "content": "-`GROUP_ID` can be the index of the group in the list generated by `show-groups`, or simply"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "the name of the group."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `list-group GROUP_ID`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sliu107"
        },
        "content": "#### 3.6.5. Deleting flashcard group from the group list: `delete-group`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Deletes an existing group specified by `GROUP_ID` from the group list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sliu107"
        },
        "content": "-`GROUP_ID` can be the index of the group in the list generated by `show-groups`, or simply"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sliu107"
        },
        "content": "the name of the group."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Format: `delete-group GROUP_ID`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.7. Study Plans"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Note that flashcards are identified by their indexes in study plans, so changing the indexes of flashcards could change"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "the flashcards associated with the study plans."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.7.1. Creating a New Study Plan: `plan`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Creates a new study plan by specifying date and indexes of existing flashcards."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `plan`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DATE`: the date which the user want to set a study plan for"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `FLASHCARD_INDEXES`: indexes of the flashcards in the study plan"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/01/2020"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1 3"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.7.2. Displaying All Study Plans: `show-plan`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Lists all study plans."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `show-plan`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.7.3. Deleting a Study Plan: `delete-plan`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Deletes a specified study plan. "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The user will be prompted to enter the date of the study plan they wish to delete."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `delete-plan`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DATE`: the date which the user want to delete study plan"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete-plan"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01-01-2020"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "### 3.8. Randomized Review"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.8.1. Displaying All Flashcards in Random Order: `random`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Shuffles and displays all the flashcards in a random order."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `random`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sliu107"
        },
        "content": "The application will then prompt the user to give responses during the review:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `yes` or `y` to mark the flashcard just shown as reviewed"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `no` or `n` to keep the flashcard just shown as unreviewed"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "### 3.9. Saving and Loading"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "The application will automatically load and save flashcards, groups, and study plans.*   "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "The files will be saved in the `historyflashcards` directory with subdirectories for `flashcards`,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "`groups`, and `studyplans`.  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Files are saved as formatted `.json` files so they will be readable even without using the application."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "\\*`flashcardlist` is also saved but only lists the names of flashcards."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**Q**: How are the flashcards, flashcard groups, and study plans saved?"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**A**: The application automatically saves these information in `JSON` format for you as you make changes to them. "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "There is not a specific command to save these information to storage."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**Q**: Where are the flashcards, flashcard groups, and study plans saved?"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**A**: They are saved under the `historyflashcards/` folder."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**Q**: Can I edit the storage files under the `historyflashcards/` folder?"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**A**: Please avoid editing the files as changing the file format might cause the application to fail on reloads and"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "certain commands when you restart."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Help: `help`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- Exit: `bye`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Add event flashcard: `event`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Add person flashcard: `person`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Add other flashcard: `other`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- List all flashcards: `list`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- Show timeline: `timeline [STARTDATE] [ENDDATE]`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Delete a flashcard: `delete INDEX`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Show a flashcard: `show INDEX`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- Find a flashcard: `find KEYWORD`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Creates a new group: `group`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Adds a flashcard to a group: `add`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- List all groups: `show-groups`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- Delete a group: `delete-group GROUP_ID`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- List flashcards from a group: `list-group GROUP_ID`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Assigns priority to a flashcard: `priority INDEX PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- List flashcards of a specified priority: `list-priority PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Mark a flashcard as reviewed: `reviewed INDEX`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- List all reviewed flashcards: `list-reviewed`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- Reset all flashcards to unreviewed: `reset-reviewed`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- Create a study plan: `plan`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- List all study plans: `show-plan`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- Delete a study plan: `delete-plan`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- Start randomized review: `random`"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 230,
      "sliu107": 20,
      "quinnyyy": 10,
      "g-lilian": 127,
      "-": 31
    }
  },
  {
    "path": "docs/team/g-lilian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "# Guo Lilian - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## PROJECT: History Flashcard"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "History Flashcard (HF) is an app for history students to create flashcards which summarize the "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "most important information for historical events, figures and artifacts. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "HF is optimized for those who prefer to use a simple Command Line Interface (CLI), and includes "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "features that help with memory retention and make information convenient to review."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- **Code contributed**: "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "[Link](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dg-lilian) "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "to my code on tp code dashboard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- **Enhancements implemented**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    1. Mark flashcards as reviewed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Description: Allows the user to input `reviewed INDEX` to change a flashcard\u0027s review"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       status to reviewed. This is so that users can keep track of which flashcards"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       are already reviewed, in order to better plan their revision."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Highlights: This feature involved adding another variable to the abstract `Flashcard` "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "           class to keep track of each flashcard\u0027s review status and modifying `Ui` "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "           to display the review status alongside the flashcard name/descriptions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    2. Assign priority to flashcards and list flashcards of a certain priority"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Description: Allows the user to input `priority INDEX PRIORITY_LEVEL` to assign a "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       flashcard\u0027s priority level, and `list-priority PRIORITY_LEVEL` to list only flashcards with "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       the specified priority. Knowing the relative importance of a flashcard helps users decide "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       on which flashcards to review first."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Highlights: An enum was created for priority level to restrict the input argument to "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "           `LOW`, `MEDIUM`, `HIGH`, or `DEFAULT`. The implementation was complicated by the need "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "           to handle exceptions for incorrect input format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    3. Show the details of a flashcard"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Description: Allows the user to input `show INDEX` to display all fields of a flashcard, "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       so that they can review its specific details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    4. List all existing groups"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Description: Allows the user to input `show-groups` to display all existing groups. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       After creating groups, users should be able to view them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    5. List flashcards from a specific group"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Description: Allows the user to input `list-group INDEX/GROUPNAME` to display all flashcards "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       belonging to a group. After creating groups, users should be able to list the flashcards present in a group."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Highlights: This implementation was complicated by the option to list based on either group name or "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "          the group\u0027s index in the group list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    6. List restricted timeline"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Description: Allows the user to input `timeline [STARTDATE] [ENDDATE]` to display a sorted "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       list of existing flashcards belonging to a restricted period of time. This is so that "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       users can easily identify flashcards from a certain period for review."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       - Highlights: Additional considerations were required for `STARTDATE` and `ENDDATE` to be included as "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "          optional parameters without affecting the function of `timeline` when inputted as a "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "          standalone command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    7. [Bug fix] Prevented users from entering start dates which are later than end dates when creating "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       flashcards or using the timeline command. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "       [Link to PR #188](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/188)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   - Helped maintain the issue tracker"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   - Modified Ui messages for various commands (`help`, study plan commands) to be more precise e.g. in "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [PR #129](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/129)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- **Non-feature-specific contributions to the user and developer guides**:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   - Added user stories for v2.0/2.1, product scope, and non-functional requirements to the DG"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   - Added skeleton of commands and revised command formats in the UG"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   - Updated UG headers and added navigator links at the top"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- **Community contributions**:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   - PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#183](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/183) "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#181](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/181) "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#180](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/180) "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#166](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/166) "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#134](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/134) "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#121](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/121) "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#94](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/94)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   - Forum discussions: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#69](https://github.com/nus-cs2113-AY1920S2/forum/issues/69) "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "   [#70](https://github.com/nus-cs2113-AY1920S2/forum/issues/70)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "My feature-specific contributions to the User Guide are reproduced below:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Showing a Flashcard: `show`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Shows all fields from the flashcard at the specified index in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `show INDEX`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- The `INDEX` must be in a valid number format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "`show 3`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Assigning Priority to a Flashcard: `priority`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Assign Priority Level `LOW`, `MEDIUM`, `HIGH` to the flashcard at the specified index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `priority INDEX PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `PRIORITY_LEVEL`: must be one of `LOW`, `MEDIUM`, `HIGH`, `DEFAULT`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "`priority 2 MEDIUM`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Listing Flashcards of a Specified Priority: `list-priority`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Lists all flashcards which match the specified priority level."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `list-priority PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `PRIORITY_LEVEL`: must be one of `LOW`, `MEDIUM`, `HIGH`, `DEFAULT`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Marking Flashcard as Reviewed: `reviewed`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Marks a flashcard at the specified index as reviewed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `reviewed INDEX`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "`reviewed 1`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Displaying groups: `show-groups`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Lists all existing groups."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `show-groups`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Listing flashcards in a group: `list-group`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Lists all flashcards in a group specified by GROUP_ID."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "GROUP_ID can be the index of the group in the list generated by `show-groups`, or simply"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "the name of the group."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Format: `list-group GROUP_ID`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Features I described in the Developer Guide are reproduced below:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "#### Set Priority Feature - Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The Set Priority feature allows users to mark a flashcard with a specified priority level. The priority level is"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "then reflected when the user requests a list of existing flashcards."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "`PriorityLevel` is stored as an enum with four fields: LOW, MEDIUM, HIGH and DEFAULT."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The feature implements the following operations:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `Flashcard#setPriorityLevel()` - Sets a flashcard to a specified priority level (LOW/MEDIUM/HIGH)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "- `Flashcard#getPriorityAsString()` - Return an icon indicating the flashcard\u0027s priority level."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The following class diagram shows the structures relevant to the Set Priority feature:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "![SetPriorityFeatureClassDiagram](../images/SetPriorityFeatureClassDiagram.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Given below is an example usage scenario and how the set priority mechanism behaves at each step."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Step 1. The user launches the application and creates a new `Flashcard` (of type Event, Person, or Other), "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "with a default priority level of DEFAULT."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Step 2. The user executes `priority [flashcard index] [priority level]` command and the `setPriorityLevel` "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "operation is invoked. Subsequently, the flashcard of specified index is retrieved from the main `FlashcardList` "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "instance. Its priority level is set to the specified priority."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "The following sequence diagram shows the relevant interactions behind `setPriorityLevel`:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "![setPriorityLevelSequenceDiagram](../images/setPriorityLevelSequenceDiagram.png)"
      }
    ],
    "authorContributionMap": {
      "g-lilian": 165
    }
  },
  {
    "path": "docs/team/quinnyyy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "# Quinn Meurer - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "## PROJECT: History Flashcard"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "History Flashcard (HF) is an app for history students to create flashcards which summarize the most important"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " information for historical events, figures and artifacts. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "HF is optimized for those who prefer to use a simple Command Line Interface (CLI), and includes features that help"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " with memory retention and make information convenient to review."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "- **Code Contributed**: [Link](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dquinnyyy\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dfalse) to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " my code on tP Code Dashboard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "- **Enhancements implemented**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    1. Feature: Basic Flashcard Structure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - [Link to the pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/14)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - What it does: Allows the user to create event, person, and other flashcards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - Comments: I used the **factory** design pattern here. I thought this would be a good  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        place to use this pattern because the Flashcards are all instantiated differently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    2. Feature: Implement the Timeline Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - [Link to the pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/31)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - What it does: Allows the user to display a list of flashcards sorted by their start date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - Comments: This feature got me exposed to some of the APIs in the Java Standard Library "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        (not sure if that\u0027s what it\u0027s called). I made extensive use of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        [DateTimeFormatter](https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        which was used to parse the date the user entered. This was especially interesting because"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        the API allows you to supply patterns so the user can enter dates in multiple formats. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        In order to compare two flashcards I made the flashcards implement the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        [Comparable](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html) interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        This makes it so you can use the sorting capabilities of the standard containers. These tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        really helped me get familiar with how to use built-in Java APIs. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    3. Feature: Add saving"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - [Link to the pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/101)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - What it does: Automatically save flashcards and groups as json files."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - Comments: To achieve this I decided to use the Gson serialization library. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        I thought it would be best to use a 3rd party solution because our objects can become  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        quite confusing. When I was implementing the `Storage` class for this feature I used"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        the **Singleton** design pattern. This task helped me see how using the Singleton pattern"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        can make code much cleaner. In our code we do **not** use the Singleton pattern for the Ui class"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        and it resulted in Ui objects being passed around in our code everywhere. I could see perfectly"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        how the Singleton pattern could be used to solve that problem."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    4. Feature: Add loading"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - [Link to the pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/189)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - What it does: Load flashcards, groups from disk into memory on startup"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - Comments: This task was actually surprisingly difficult. The hardship came from the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fact that some information is lost when the `Flashcards` are serialized: we saved the data about"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        `Flashcards` but we didn\u0027t save what **type** of `Flashcard` it was. So when we were trying to read"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        it back in we didn\u0027t know if it was an `EventFlashcard`, `PersonFlashcard`, or `OtherFlashcard`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        All we knew was that it was an abstract `Flashcard`. There was an interesting solution to this. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        We could specify that when we are saving a `Flashcard` we can add an additional field to the json to specify "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        which class it represents. Then when we read it back in we can construct the corresponding `Flashcard`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    5. Bug fix: Delete flashcards from group as well when they are deleted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - [Link to the pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/197)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - What\u0027s the problem: There is a global list of flashcards. When a flashcard was deleted from the global list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        it was not being deleted from groups that contained that flashcard."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - Comments: This task seemed like a good fit for the **Observer** pattern. I made the Flashcard the subject"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        and made the groups the observers. That way when a flashcard was going to be deleted from the global list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        I was able to notify all observers to delete this flashcard as well. This presented some problems with serialization"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        because there was a circular relationship between Flashcards and Groups, but I was able to use a hacky solution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        to avoid this."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    6. Bug fix: User can add the same flashcard to a group twice"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - [Link to the pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/63)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - What\u0027s the problem: same as title"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        - Comments: To solve this I implemented equals methods in flashcards. This way I could check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if the flashcard was equal to a flashcard in the group before adding it. This exposed me to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        the best practices of writing an equals method."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "- **Contributions to user guide and developer guide**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    - I contributed the Storage section in the user and developer guides."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "- **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    - I established and improved a lot of the coding patterns we used. Some examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [Wrote first tests in the project](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/27)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        I was the first person in the team to tackle the challenge of writing tests. In the linked pull request"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Shiyue left a comment saying that it was a helpful reference to base her tests off of. This code was"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        especially difficult to test because it involved input from the user and I was able to tackle that challenge."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [Improved our logging setup pattern](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/62)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        I improved the logging setup pattern that we were using. In the linked pull request Zhilin"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        left a comment saying that this pattern was an improvement in terms of code quality."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [I refactored Commands to improve code quality](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/101)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        I refactored our Commands so that they were cleaner and more testable. This is a change that has no"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        functional changes but improves the developer life by making code more readable and more testable."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        The changes can be seen in the latter half of the linked pull request."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    - I tried to solve tasks that others weren\u0027t eager to take on. For example the first bug fix I "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    highlighted above was left unclaimed on our issue tracker for 14 days before I took it on."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    - I actively maintained the issue tracker"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "- **Reviewing/mentoring contributions**:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    - I was thorough in PR reviews and tried to really examine code quality and suggest places for possible improvement."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    - Examples of PR reviews:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [#21](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/21)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [#25](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/25)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [#36](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/36)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [#45](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/45)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [#59](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/59)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        * [#74](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/74)"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 96
    }
  },
  {
    "path": "docs/team/sliu107.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "# Shiyue Liu - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "## PROJECT: History Flashcard"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "History Flashcard (HF) is an app for history students to create flashcards which summarize the most important"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": " information for historical events, figures and artifacts. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "HF is optimized for those who prefer to use a simple Command Line Interface (CLI), and includes features that help"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": " with memory retention and make information convenient to review."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": " "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- **Code Contributed**: [Link](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dsliu107) to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": " my code on tP Code Dashboard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": " "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- **Enhancements implemented**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    1. Feature: Create group using existing flashcards"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - What it does: Allows users to group multiple existing flashcards with some common characteristics."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - Justification: This feature is needed for users to categorize all the flashcards currently in the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - Highlights:   "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - The feature is implemented in [#28 pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/28)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - The feature builds up the structure of groups, which is the basic of other group relevant commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - `GroupFactory` is used to create new group and `GroupList` includes multiple operations executed on the "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "               groups in the application. The overall flow of group management is quite similar with those of flashcards "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "               and flashcardList, which keeps the consistency of implementation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - Other classes like `Ui` were also modified to display the group information involving name, description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "               and number of flashcards in the group."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "               "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    2. Feature: Add a flashcard to an existing group"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - What it does: Allows users to add a flashcard to a group."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - Justification: This feature is needed for users to edit the content of the groups after creation, which makes "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "          the group management more easier."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - Highlights:  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - The feature is implemented in [#28 pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/28)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - The feature enhances the practicality of the flashcard group."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - The feature support user to specify a group by group index of name, which makes the operation more "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "               convenient for those who prefer to use a simple Command Line Interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "               "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    3. Feature: Delete a group from the group list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - What it does: Allows users to delete a group from the group list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - Justification: This feature is needed for users to remove a group then no longer need."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        - Highlights:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - The feature is implemented in [#182 pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/182)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - The feature is a basic operation to management groups in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             - Similarly, users able to specify a group with its index or name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "             "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    4. Random: Randomize all the flashcards in the application"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - What it does: The feature randomly reorders the flashcards in the flashcard list. And then display the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                       detailed information of groups one by one, and updates their reviewed status after received"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                       response from users."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - Justification: This feature is needed for users to shuffle and randomized all the existing flashcards to help "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                        themselves to self check whether they have mastered the points or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - Highlights:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            - The feature is implemented in [#106 pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/106)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            - The feature provides a helpful way to test users\u0027 familiarity of the flashcards contents which in some"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "              content helps users to schedule their future study plans."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            - And during the review process, users can give response to each flashcard to update the status of it. And "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "              the number of flashcards just reviewed and total number of unreviewed flashcards will be shown after"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "              finishing a round of review."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "              "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    5. Rest-reviewed: Reset all the flashcards in the application as unreviewed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - What it does: The feature reset all the flashcards as unreviewed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - Justification: This feature enables users to do multiple rounds of review by reset the status when all the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                        flashcards are marked as reviewed but users want to review them again."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - Highlights:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            - The feature is implemented in [#109 pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/109)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            - The feature is a complementary operation used to cooperate with random review and study plans."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            - The feature makes the whole process of learning and reviewing more complete."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    6. Help : Send help message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - What it does: The feature send out help message to give information about how to use all the commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - Justification: This feature helps new users to quickly get familiar with the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "       - Highlights:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            - The feature is implemented in [#28 pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/28)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- **Contributions to User Guide**:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    1. Added description for the random review feature."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    2. Update description for group relative feature."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- **Contributions to the Developer Guide**:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    1. Added description for the random review features."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    2. Added description for the Ui component."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- **Review/mentoring contributions**: I reviewed some pull requests from my teammates. For example,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#27](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/27),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#39](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/39),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#70](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/70),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#72](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/14),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#105](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/105),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#114](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/114),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#117](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/117),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#118](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/118),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#121](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/121),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#127](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/127),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#132](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/132),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#134](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/134),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": "[#137](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/137),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "- **Other contributions**:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    - Help maintain the issue tracker"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    - Find and fix bugs for `parse` and some other commands(e.g. `help`, `delete`, `random`)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    - Reported [bugs and suggestions](https://github.com/sliu107/ped/issues) for other project teams."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sliu107"
        },
        "content": "              "
      }
    ],
    "authorContributionMap": {
      "sliu107": 105
    }
  },
  {
    "path": "docs/team/zhilin-huang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "# Zhilin Huang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "## PROJECT: History Flashcard"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "History Flashcard (HF) is an app for history students to create flashcards which summarize the most important"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "information for historical events, figures and artifacts. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "HF is optimized for those who prefer to use a simple Command Line Interface (CLI), and includes features that help"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "with memory retention and make information convenient to review."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- **Code Contributed**: [Link](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dzhilin-huang) to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " my code on tP Code Dashboard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- **Enhancements implemented**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    1. Feature: List all flashcards"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Allows users to input `list` to list all flashcards in the application. This feature is needed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         for users to review all flashcards currently in the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: In the [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/21) to implement this"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        enhancement, I added the `Parser` class and the `Command` for all commands to inherit from and this roughly"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        determines the structure of the code base. The `FlashcardList` class was implemented to handle all flashcards"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        in the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    2. Feature: Delete a flashcard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Allows users to input `delete INDEX` to delete a flashcard. This feature is needed for users"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         to remove a flashcard that they no longer need."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: This feature was implemented in the same "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/21) as the \u0027List all flashcards\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        feature and deletion of the flashcards is handled by the `FlashcardList` class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    3. Feature: Update study plan"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Allows users to input `plan` and then prompt users to input the date for the plan and indexes of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        existing flashcards planned to study on that day. This feature is needed for users to set their study plans"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         for the flashcards so that they"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        can better manage their studies."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: In the [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/94) to implement this"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        enhancement, I added the `StudyPlanList` class to handle all study plans in the application. Study plans"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        are stored in a `TreeMap` with the date as key so that all entries are sorted by date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    4. Feature: Display study plan"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Allows users to input `show-plan` to display all study plans. This feature is needed for users"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         to view all the study plans they\u0027ve added to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: This feature was implemented in the same "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/94) as the \u0027Update study plan\u0027 feature and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        the list of all study plans is retrieved from the `StudyPlanList` class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    5. Feature: Delete study plan"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Allows users to input `delete-plan` to delete a study plan for the study plan list. This"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         feature is needed for users to delete a study plan that they no longer need."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: In the [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/173) to implement this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         enhancement, I added a method in the `StudyPlanList` class to handle the deletion of study plans."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    6. Feature: Save and load study plans"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Automatically saves study plans into storage and reloads study plans from storage when"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         application restarts. This feature is needed to keep users\u0027 study plans across multiple runs of the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "          application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: In the [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/191) to implement this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         feature, I modified the save and reload of `FlashcardList` to retain the order of flashcards so that the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         index of flashcards stored in `StudyPlanList` are still valid upon reload."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    7. Feature: List all reviewed flashcards"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Allows users to input `list-reviewed` to view all reviewed flashcards in the application. This"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "         feature is needed for users to keep track of what flashcards have been reviewed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: In the [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/95) to implement this"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        enhancement, a method was added to the `FlashcardList` class to get all reviewed flashcards from the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcard list. The index of each flashcard in the flashcard list is also printed out for the users."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    8. Feature: Search for all flashcards with names containing a specific keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Description: Allows users to input `find KEYWORD` to display all flashcards with names containing the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        KEYWORD. This feature is needed for users to conveniently search for flashcards when they cannot"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        remember the index of the flashcard(s) they are looking for."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        - Highlights: This feature was implemented in the same "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        [pull request](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/95) as the \u0027List all reviewed flashcards\u0027 "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        feature. A method was added to the `FlashcardList` class to get all flashcards with names containing the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        specified keyword from the flashcard list. The index of each flashcard in the flashcard list is also printed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        out for the users."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- **Contributions to User Guide**:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    1. Updated User Guide for all features implemented in v1.0 in the pull request "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    [here](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/45)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    2. Added description for the `find KEYWORD` and `list-reviewed`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    3. Added description for the Study Plans related features."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- **Contributions to the Developer Guide**:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    1. Added description for the Study Plan related features."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    2. Added description for the Parser component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    3. Added Instructions for Manual Testing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- **Review/mentoring contributions**: I actively reviewed pull requests from my teammates. For example,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#14](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/14), "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#25](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/25), "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#28](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/28), "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#31](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/31),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#36](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/36),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#43](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/43),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#62](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/62),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#70](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/70),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#71](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/71),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#74](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/74),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#98](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/98),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#105](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/105),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#109](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/109),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#113](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/113),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#136](https://github.com/AY1920S2-CS2113-T14-1/tp/pull/136)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- **Contributions beyond the project team**: I actively initialized or participated in forum discussions. For example,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#21](https://github.com/nus-cs2113-AY1920S2/forum/issues/21),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#26](https://github.com/nus-cs2113-AY1920S2/forum/issues/26),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#31](https://github.com/nus-cs2113-AY1920S2/forum/issues/31),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#56](https://github.com/nus-cs2113-AY1920S2/forum/issues/56),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#69](https://github.com/nus-cs2113-AY1920S2/forum/issues/69),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "[#83](https://github.com/nus-cs2113-AY1920S2/forum/issues/83)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- **Other contributions**:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Managed [releases](https://github.com/AY1920S2-CS2113-T14-1/tp/releases) `v1.0`, `v2.0` on GitHub."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Helped maintain the [issue tracker](https://github.com/AY1920S2-CS2113-T14-1/tp/issues)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Reported [bugs and suggestions](https://github.com/Zhilin-Huang/ped/issues) for other project teams."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "## Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "An example of my contribution (study plans section) to the User Guide is extracted as follows:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### 3.7. Study Plans"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Note that flashcards are identified by their indexes in study plans, so changing the indexes of flashcards could change"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "the flashcards associated with the study plans."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.7.1. Creating a New Study Plan: `plan`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Creates a new study plan by specifying date and indexes of existing flashcards."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `plan`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DATE`: the date which the user want to set a study plan for"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `FLASHCARD_INDEXES`: indexes of the flashcards in the study plan"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/01/2020"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1 3"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.7.2. Displaying All Study Plans: `show-plan`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Lists all study plans."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `show-plan`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### 3.7.3. Deleting a Study Plan: `delete-plan`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Deletes a specified study plan. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The user will be prompted to enter the date of the study plan they wish to delete."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `delete-plan`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DATE`: the date which the user want to delete study plan"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete-plan"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01-01-2020"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Another example of my contribution (FAQ) to the User Guide is extracted as follows:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**Q**: How are the flashcards, flashcard groups, and study plans saved?"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**A**: The application automatically saves these information in `JSON` format for you as you make changes to them. "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "There is not a specific command to save these information to storage."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**Q**: Where are the flashcards, flashcard groups, and study plans saved?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**A**: They are saved under the `historyflashcards/` folder."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**Q**: Can I edit the storage files under the `historyflashcards/` folder?"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "**A**: Please avoid editing the files as changing the file format might cause the application to fail on reloads and"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "certain commands when you restart."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "## Contributions to the Developer Guide (Extracts)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "An example of my contribution (Study Plan Feature - Proposed Implementation) to the Developer Guide is extracted as"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "follows:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Study Plan Feature - Proposed Implementation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The Study Plan feature is facilitated by `StudyPlanList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Internally, it implements a `TreeMap`, with date as key and the list of flashcard indexes to study as value. "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Key-value pairs in the `TreeMap` are sorted by dates."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#updateStudyPlan()` - Updates the study plan list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#deleteStudyPlan()` - Deletes a study plan from the study plan list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#getStudyPlanList()` - Gets the list of study plans."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Given below is an example usage scenario and how the study plan mechanism behaves at each step."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 1. The user launches the application and an empty `StudyPlanList` is initialized."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 2. The user executes `plan` command and the `updateStudyPlan` operation is invoked. The application prompts the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "user for date and the corresponding list of flashcards indexes."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `updateStudyPlan` operation works:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![updateStudyPlanSequenceDiagram](../images/updateStudyPlanSequenceDiagram.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 3. The user executes `delete-plan` command and the `deleteStudyPlan` operation is invoked. The application"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "prompts the user for the date for which the study plan is to be deleted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `deleteStudyPlan` operation works:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![deleteStudyPlanSequenceDiagram](../images/deleteStudyPlanSequenceDiagram.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 4. The user executes `show-plan` command and the `getStudyPlanList` operation is invoked. The application"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "displays the user\u0027s study plan list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `getStudyPlanList` operation works:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![getStudyPlanListSequenceDiagram](../images/getStudyPlanListSequenceDiagram.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Another example of my contribution (Appendix E: Instructions for Manual Testing) to the Developer Guide is extracted as"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "follows:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "## Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Given below are instructions to test the app manually. Note that these instructions only provide a starting point for"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "testers to work on; testers are expected to do more exploratory testing."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.1. Launch and Shutdown"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Launch"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Double-click the file to start the application or run the command `java -jar [path-to-history-flashcard-jar-file]` "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    from terminal."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Type in the `bye` to the application."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.2. Getting help"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Getting help."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `help`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application displays a list of commands available."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.3. Flashcard Creation"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Adding an Event Flashcard."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `event`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Adding a Person Flashcard."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `person`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Adding an Other Flashcard which name does not duplicate the names of existing flashcards."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisites: List all flashcards using the `list` command and choose a new name for the new flashcard."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `other`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `other blabla`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Same as above because `blabla` should be ignored."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Adding an Other Flashcard which name duplicates one of the names of existing flashcards."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisites: List all flashcards using the `list` command and choose a duplicate name for the new flashcard."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `other`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard creation and a message"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      saying that the created flashcard is not added due to the duplicate name. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.4. Flashcard Basic Operations"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Listing all flashcards."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list` when there are flashcards in the application."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards in the application."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list` when there are no flashcard in the application."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a message indicating that the user has no flashcard at the moment."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Showing timeline."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `timeline`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards in order sorted by start/birth date."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `timeline 1900 2000`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards from the 1900 to 2000 period in order sorted by start/birth date."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Deleting a flashcard."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisites: List all flashcards using the `list` command and choose the index of a flashcard to delete"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete 1`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       Expected: Receive a confirmation message from the application for successful flashcard deletion."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       Expected: Receive a message from the application stating that the user should use correct input format."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete -1`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       Expected: Receive a message from the application stating that the user input contains invalid flashcard "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       index(es)."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Showing a flashcard."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `show 1`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application shows all fields from the flashcard at index 1."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Finding flashcards with names containing a specific keyword."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `find war`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application displays all flashcards with names containing `war`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.5. Flashcard Status Operations"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Assigning priority to a flashcard."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There are at least 2 flashcards in the application."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `priority 2 MEDIUM`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a message from the application stating that priority for flashcard at index 2 is updated to"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      MEDIUM."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Listing flashcards of a specified priority."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list-priority MEDIUM`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards which match the MEDIUM priority level."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Marking flashcard as reviewed."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `reviewed 1`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a message from the application stating that review status for flashcard at index 1 is"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      updated to reviewed."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Listing reviewed flashcards."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list-reviewed`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all reviewed flashcards."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Resetting review status of all flashcards."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `reset-reviewed`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application resets status of all flashcards to un-reviewed."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.6. Flashcard Grouping"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Making a flashcard group. "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `group`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields of the flashcard group."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some values for the fields."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "       "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful flashcard group creation."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Adding a flashcard to a flashcard group."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `add`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields for adding a flashcard to a flashcard group."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "             "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some valid values for the fields."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful addition of flashcard to"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      the flashcard group."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Displaying flashcard groups."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `show-groups`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all existing flashcard groups."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Listing flashcards in a group."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard group in the application."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `list-group 1`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all flashcards in the flashcard group at index 1."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Deleting flashcard group from the group list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard group in the application."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete-group 1`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful deletion of the flashcard group at"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      index 1."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.7. Study Plans"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Creating a new study plan."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Prerequisite: There is at least 1 flashcard in the application."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `plan`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter multiple fields for adding a flashcard to a flashcard group."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "             "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter some valid values for the fields."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "   "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful update of study plan."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Displaying all study plans."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `show-plan`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application lists all study plans."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Deleting an existing study plan."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `delete-plan`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Being prompted to enter the date for which the study plan is to be deleted."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter a valid date."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Receive a confirmation message from the application for successful deletion of study plan."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.8. Randomized Review"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Displaying all flashcards in random order."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: `random`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Application shuffles and displays all the flashcards in a random order and prompts the user to give"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      responses during the review."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Enter responses."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Reviewed finished."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### E.9. Saving and Loading"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1. Saving"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: Add flashcards into the application and exit."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Storage files generated under the `historyflashcards` directory."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Loading"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    - Test case: Starts the application again."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "      Expected: Saved contents under the `historyflashcards` directory are loaded into the application."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 469
    }
  },
  {
    "path": "src/main/java/seedu/tp/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.commands.CommandFeedback;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidInputFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.ReversedDateOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.utils.LoggerUtils;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Program entry point."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param args CLI args (unused)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void setup() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LoggerUtils.createFolder(LOG_FOLDER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Flashcard.setupLogger();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            FlashcardFactory.setupLogger();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            FlashcardList.setupLogger();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            FlashcardGroup.setupLogger();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            StudyPlanList.setupLogger();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Command.setupLogger();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Ui.setupLogger();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Parser.setupLogger();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Storage.setupLogger();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ui.sendLoggingSetupFailedMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcardFactory \u003d new FlashcardFactory(ui);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Storage.getInstance().loadAll(groupList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcardList \u003d Storage.getInstance().loadFlashcardList(flashcards);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d Storage.getInstance().loadStudyPlanList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        groupFactory \u003d new GroupFactory(ui, flashcardList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        parser \u003d new Parser(flashcardFactory, flashcardList, groupFactory, groupList, studyPlanList, ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void runLoop() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.sendWelcomeMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                String fullCommand \u003d ui.getNextLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                Command command \u003d parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                if (command.isBye()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                CommandFeedback feedback \u003d command.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                ui.showCommandFeedback(feedback);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUnknownCommandResponse();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (InvalidFlashcardIndexException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendInvalidFlashcardIndexResponse();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (InvalidInputFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                ui.sendInvalidInputFormatResponse();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (DuplicateFlashcardException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                ui.sendDuplicateFlashcardResponse();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                ui.sendInvalidDateFormatResponse();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (ReversedDateOrderException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                ui.sendReversedDateOrderResponse();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (DuplicateFlashcardNameException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendDuplicateFlashcardNameResponse();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (HistoryFlashcardException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.printException(e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.sendByeMessage();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.sendUiLineBreak();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 62,
      "sliu107": 4,
      "quinnyyy": 57,
      "g-lilian": 6
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/AddFlashcardToGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.GROUP_ID_FIELD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.INDEX_FIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class AddFlashcardToGroupCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs an addFlashcardToGroupCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param ui            the ui need to pass to the execution method"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupList     the groupList where the flashcard wants to be added in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList the flashcardList where the flashcard is in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public AddFlashcardToGroupCommand(Ui ui, GroupList groupList, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            int flashcardIndex \u003d Integer.parseInt(ui.promptUserForRequiredField(INDEX_FIELD)) - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String groupID \u003d ui.promptUserForRequiredField(GROUP_ID_FIELD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            FlashcardGroup group \u003d groupList.getGroupByID(groupID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(flashcardIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Adding a flashcard to an existing group...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            flashcard.attach(group);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            group.addFlashcardToTheGroup(flashcard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Added the flashcard to the group\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            final CommandFeedback saveFeedback \u003d save(group);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            StringBuilder feedback \u003d new StringBuilder(\"You\u0027ve successfully added the flashcard below:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(flashcard.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(\"To the group:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(group.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (!saveFeedback.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                feedback.append(saveFeedback);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(feedback.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (!(obj instanceof AddFlashcardToGroupCommand)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand otherAddFlashcardToGroupCommand \u003d (AddFlashcardToGroupCommand) obj;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return this.getFlashcardList().equals(otherAddFlashcardToGroupCommand.getFlashcardList())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \u0026\u0026 this.getGroupList().equals(otherAddFlashcardToGroupCommand.getGroupList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupList getGroupList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 50,
      "quinnyyy": 27,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Bye command used in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks whether the command is a bye command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return Boolean value true value since this is a bye command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Ready to quit the program...\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return obj instanceof ByeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 25,
      "sliu107": 1,
      "quinnyyy": 2
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command used in the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(Command.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"command.log\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the command logger. Call once at the start of the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract CommandFeedback execute()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        throws HistoryFlashcardException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks whether the command is a bye command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return Boolean value indicating whether or not the command is a bye command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 47,
      "quinnyyy": 1
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/CommandFeedback.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class CommandFeedback {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final String feedback;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final boolean isEmpty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        feedback \u003d null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        isEmpty \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback(String feedback) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        isEmpty \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return isEmpty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return feedback;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 33
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.DeletionFailedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.storage.Savable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.utils.FlashcardObserver;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DeleteCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList flashcard list for the command to execute on"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param index         index in the delete command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public DeleteCommand(FlashcardList flashcardList, int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets index in the delete command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the delete command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            final Flashcard deletedFlashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            for (FlashcardObserver observer : deletedFlashcard.getObservers()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                observer.delete(deletedFlashcard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                save((Savable) observer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.info(\"Deleting flashcard at index: \" + index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList.deleteFlashcard(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.info(\"Deleted flashcard at index: \" + index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            delete(deletedFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            save(flashcardList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String feedback \u003d \"The following flashcard has been deleted:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                + deletedFlashcard;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.warning(\"IndexOutOfBoundsException occurred when deleting flashcard at index \" + index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.warning(\"Throwing InvalidFlashcardIndexException...\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void delete(Savable savable) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            storage.delete(savable);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (DeletionFailedException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.warning(\"Delete to disk failed for \" + savable.getFileName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherDeleteCommand.getIndex() \u003d\u003d this.index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026\u0026 otherDeleteCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 61,
      "quinnyyy": 30
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/DeleteGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.DeletionFailedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.storage.Savable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class DeleteGroupCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private String groupIdentifier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructor of DeleteGroupCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupList       groupList where the DeleteGroupCommand works on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupIdentifier the index or name of the group to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public DeleteGroupCommand(GroupList groupList, String groupIdentifier) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert groupList !\u003d null : \"Invalid group list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupIdentifier \u003d groupIdentifier;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private CommandFeedback delete(Savable savable) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            storage.delete(savable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new CommandFeedback();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        } catch (DeletionFailedException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.warning(\"Delete to disk failed for \" + savable.getFileName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new CommandFeedback(\"Deletion could not be saved to disk. Sorry\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public CommandFeedback execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Deleting a group from group list ... \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            FlashcardGroup group \u003d groupList.deleteFlashcardGroup(groupIdentifier);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Deleted a group form group list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            CommandFeedback deleteFeedback \u003d delete(group);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String feedback \u003d \"The following flashcard group has been deleted:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                + group;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (!deleteFeedback.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                feedback +\u003d deleteFeedback;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.warning(\"Throwing UnrecognizedFlashcardGroupException ... \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            throw new UnrecognizedFlashcardGroupException(\"Invalid group\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (!(obj instanceof DeleteGroupCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteGroupCommand otherDeleteGroupCommand \u003d (DeleteGroupCommand) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return this.groupList.equals(otherDeleteGroupCommand.groupList)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \u0026\u0026 this.groupIdentifier.equals(otherDeleteGroupCommand.groupIdentifier);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 69
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/DeleteStudyPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DeleteStudyPlanCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for UpdateStudyPlanCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class to be used in the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param studyPlanList the StudyPlanList to be updated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public DeleteStudyPlanCommand(Ui ui, StudyPlanList studyPlanList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \" Invalid null Ui!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert studyPlanList !\u003d null : \"Invalid null StudyPlan!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing DeleteStudyPlanCommand...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList.deleteStudyPlan(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"DeleteStudyPlanCommand executed!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return save(studyPlanList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof DeleteStudyPlanCommand)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteStudyPlanCommand otherDeleteStudyPlanCommand \u003d (DeleteStudyPlanCommand) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.ui.equals(otherDeleteStudyPlanCommand.ui)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.studyPlanList.equals(otherDeleteStudyPlanCommand.studyPlanList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 46
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/DisplayStudyPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DisplayStudyPlanCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for DisplayStudyPlanCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param studyPlanList the study plan to be displayed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list to be used by the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public DisplayStudyPlanCommand(StudyPlanList studyPlanList, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert studyPlanList !\u003d null : \"Invalid null StudyPlan!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing DisplayStudyPlanCommand...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e studyPlans \u003d studyPlanList.getStudyPlanList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (studyPlans.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.info(\"Returning no study plan command feedback...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            feedback.append(\"You have no study plan at this moment.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new CommandFeedback(feedback.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e studyPlanForDay : studyPlans) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            feedback.append(\"Date: \").append(studyPlanForDay.getKey()).append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            for (int index : studyPlanForDay.getValue()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    feedback.append(index + 1).append(\": \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        .append(flashcard.getShortDescription()).append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    feedback.append(\"Flashcard with index \").append(index).append(\" not found. \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        .append(\"Did you delete this flashcard?\").append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning display study plan command feedback...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new CommandFeedback(feedback.toString().trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof DisplayStudyPlanCommand)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand otherDisplayStudyPlanCommand \u003d (DisplayStudyPlanCommand) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.studyPlanList.equals(otherDisplayStudyPlanCommand.studyPlanList)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.flashcardList.equals(otherDisplayStudyPlanCommand.flashcardList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 58,
      "quinnyyy": 17
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/EventFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EVENT_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command to create an event flashcard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class EventFlashcardCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for Event Flashcard Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list for the command to execute on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory the flashcard factory to be used in the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public EventFlashcardCommand(FlashcardList flashcardList, FlashcardFactory flashcardFactory) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardFactory !\u003d null : \"Invalid null FlashcardFactory!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the event flashcard command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public CommandFeedback execute() throws UnrecognizedFlashcardTypeException, DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Creating an event flashcard and adding it to the flashcard list...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard flashcard \u003d flashcardFactory.create(EVENT_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Created an event flashcard and added it to the flashcard list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback saveFeedback \u003d save(flashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        save(flashcardList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return saveFeedback;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof EventFlashcardCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EventFlashcardCommand otherEventFlashcardCommand \u003d (EventFlashcardCommand) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherEventFlashcardCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 49,
      "sliu107": 2,
      "quinnyyy": 7,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list to be used by the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param keyword       the specified keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FindCommand(FlashcardList flashcardList, String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert keyword !\u003d null : \"Invalid null keyword!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing FindCommand...\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardsWithKeyword \u003d flashcardList.getAllFlashcardsWithKeyword(keyword);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String feedback \u003d getFeedback(flashcardsWithKeyword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"FindCommand executed!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String getFeedback(List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardListWithId) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcardListWithId.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return \"You have no flashcard matching your query!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder(\"Here\u0027s the list of flashcards you are looking for:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        feedback.append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int index \u003d 0; index \u003c flashcardListWithId.size(); index++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Map.Entry\u003cInteger, Flashcard\u003e flashcardEntry \u003d flashcardListWithId.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            feedback.append(index + 1).append(\": \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .append(flashcardEntry.getValue().getShortDescription()).append(\" | ID: \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .append(flashcardEntry.getKey() + 1)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return feedback.toString().trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof FindCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand otherFindCommand \u003d (FindCommand) obj;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.flashcardList.equals(otherFindCommand.flashcardList)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.keyword.equals(otherFindCommand.keyword);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 56,
      "quinnyyy": 12
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/GroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Commands to create a new group."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class GroupCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs a group command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupFactory groupFactory the groupCommand use"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupList    groupList where the groupCommand execute on"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public GroupCommand(GroupFactory groupFactory, GroupList groupList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupFactory !\u003d null : \"Invalid null GroupFactory!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupFactory \u003d groupFactory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Creating a new group...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardGroup flashcardGroup \u003d groupFactory.form();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        groupList.addFlashcardGroup(flashcardGroup);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Created a new group\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (Flashcard f : flashcardGroup.getGroupCards().getFlashcards()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            f.attach(flashcardGroup);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback saveFeedback \u003d save(flashcardGroup);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return saveFeedback;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (!(obj instanceof GroupCommand)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand otherGroupCommand \u003d (GroupCommand) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return this.getGroupList().equals(otherGroupCommand.getGroupList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupList getGroupList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "sliu107": 41,
      "quinnyyy": 12,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * HelpCommand class to print the help message which shows the list of possible user commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static String helpMessage \u003d \"Please follow the prompts given by the program in each situation.\" + NEWLINE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"(Note: In the command format, parameters are CAPITALISED)\" + NEWLINE"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"(Note: When a date is required, you can enter it in any of these formats:\" + NEWLINE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"       yyyy, d/m/yyyy, m/yyyy, d-m-yyyy, m-yyyy)\" + NEWLINE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"Commands for History Flashcard are as follows:\" + NEWLINE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"FLASHCARD CREATION\" + NEWLINE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"1. Add an event flashcard: event\" + NEWLINE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"2. Add a person flashcard: person\" + NEWLINE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"3. Add an other flashcard: other\" + NEWLINE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"BASIC OPERATIONS\" + NEWLINE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"4a. List out all the flashcards: list\" + NEWLINE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"4b. List all flashcards in order sorted by start/birth date: timeline\" + NEWLINE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"4c. List all flashcards sorted by start/birth date, within a restricted time period: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"timeline [STARTDATE] [ENDDATE]\" + NEWLINE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"5. Show all details of an existing flashcard: show INDEX\" + NEWLINE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"6. Delete a flashcard from the flashcard list: delete INDEX\" + NEWLINE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"7. Find flashcards matching a keyword: find KEYWORD\" + NEWLINE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"FLASHCARD STATUS OPERATIONS\" + NEWLINE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"8a. Set the priority of an existing flashcard: priority INDEX PRIORITY\" + NEWLINE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"  (Note: There are 4 priority levels: LOW, MEDIUM, HIGH, DEFAULT)\" + NEWLINE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"8b. List flashcards of a specified priority: list-priority PRIORITY\" + NEWLINE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"9a. Set an existing flashcard as reviewed: reviewed INDEX\" + NEWLINE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"9b. List all reviewed flashcards: list-reviewed\" + NEWLINE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"9c. Reset status of all flashcards to Unreviewed: reset-reviewed\" + NEWLINE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"GROUPS\" + NEWLINE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"10a. Set up a new flashcard group: group\" + NEWLINE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"10b. List all existing groups: show-groups\" + NEWLINE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"10c. Add a flashcard to an existing group: add\" + NEWLINE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"10d. List all flashcards in a group: list-group [GROUPNAME/INDEX]\" + NEWLINE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + \"10e. Delete an existing flashcard group from group list: delete-group [GROUPNAME/INDEX]\" + NEWLINE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"STUDY PLANS\" + NEWLINE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        + \"11a. Create or update study plan for a day: plan\" + NEWLINE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        + \"11b. Delete a study plan: delete-plan\" + NEWLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        + \"11c. Show all study plans: show-plan\" + NEWLINE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"RANDOMIZED REVIEW\" + NEWLINE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"12. Shuffle and display a random flashcard: random\" + NEWLINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"OTHER\" + NEWLINE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + \"13. Get the list of commands: help\" + NEWLINE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        + \"14. Exit History Flashcard: bye\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Showing the help message\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback(helpMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 5,
      "sliu107": 10,
      "quinnyyy": 36,
      "g-lilian": 11
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to list all existing flashcards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for list command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList flashcard list for the command to execute on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ListCommand(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the list command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Listing flashcards...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String feedback \u003d getFeedback(flashcardList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String getFeedback(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcardList.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return \"You have no flashcard at this moment!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder(\"Here\u0027s the list of flashcards you have:\" + LINE_SEPARATOR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardList.getTotalFlashcardNum(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            String nextLine \u003d (i + 1) + \": \" + flashcard.getShortDescription() + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(nextLine);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return feedback.toString().trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof ListCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListCommand otherListCommand \u003d (ListCommand) obj;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherListCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 48,
      "quinnyyy": 16,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ListFlashcardsInGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.BULLET_POINT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to list all flashcards in a specified group."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ListFlashcardsInGroupCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private String groupIdentifier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for ListGroupCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupList       list of all existing groups"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupIdentifier name or index of the group to list all flashcards for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public ListFlashcardsInGroupCommand(GroupList groupList, String groupIdentifier) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !groupIdentifier.isEmpty() : \"Invalid empty groupIdentifier!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.groupIdentifier \u003d groupIdentifier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Executing ListFlashcardsInGroupCommand...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            FlashcardList flashcardsInGroup \u003d groupList.getFlashcardsInGroup(groupIdentifier);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String feedback \u003d getFeedback(flashcardsInGroup, groupIdentifier);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (UnrecognizedFlashcardGroupException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"UnrecognizedFlashcardGroupException occurred when executing \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \"ListFlashcardsInGroupCommand.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String errorFeedback \u003d \"Please enter a valid flashcard group name or index.\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                + \" Use \\\"show-groups\\\" to view all groups.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(errorFeedback);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String getFeedback(FlashcardList flashcardList, String groupIdentifier) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcardList.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return \"There are no flashcards in the group!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder(groupIdentifier + \" contains the following flashcards:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (Flashcard flashcard : flashcardList.getFlashcards()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            feedback.append(BULLET_POINT + flashcard.getShortDescription());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return feedback.toString().trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ListFlashcardsInGroupCommand)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListFlashcardsInGroupCommand otherListFlashcardsInGroupCommand \u003d (ListFlashcardsInGroupCommand) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.groupList.equals(otherListFlashcardsInGroupCommand.groupList)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \u0026\u0026 this.groupIdentifier.equals(otherListFlashcardsInGroupCommand.groupIdentifier);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 5,
      "quinnyyy": 21,
      "g-lilian": 49
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ListPriorityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to list flashcards of a specified priority level."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ListPriorityCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private Flashcard.PriorityLevel pl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for the ListPriorityCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param pl            priority level of flashcards to list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public ListPriorityCommand(FlashcardList flashcardList, Flashcard.PriorityLevel pl) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.pl \u003d pl;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Executing ListPriorityCommand...\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e priorityFlashcards \u003d flashcardList.getFlashcardsOfPriority(pl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String feedback \u003d getFeedback(priorityFlashcards);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private String getFeedback(List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardListWithId) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (flashcardListWithId.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"There are no flashcards with this priority level! \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \"Use \\\"priority INDEX PRIORITY_LEVEL\\\" to assign priority to a flashcard.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder(\"Here\u0027s the list of flashcards with priority \" + pl + \":\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardListWithId.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            Map.Entry\u003cInteger, Flashcard\u003e flashcardEntry \u003d flashcardListWithId.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            feedback.append((i + 1) + \": \" + flashcardEntry.getValue().getName()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \" | Reviewed: \" + flashcardEntry.getValue().getReviewIcon()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \" | \" + flashcardEntry.getValue().getPriorityAsString()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \" | ID: \" + (flashcardEntry.getKey() + 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return feedback.toString().trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ListPriorityCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListPriorityCommand otherListPriorityCommand \u003d (ListPriorityCommand) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return this.flashcardList.equals(otherListPriorityCommand.flashcardList)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \u0026\u0026 this.pl \u003d\u003d otherListPriorityCommand.pl;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-lilian": 69
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ListReviewedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListReviewedCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for ListReviewedCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list for the command to execute on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public ListReviewedCommand(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing ListReviewedCommand...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e reviewedFlashcards \u003d flashcardList.getAllReviewedFlashcards();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String feedback \u003d getFeedback(reviewedFlashcards);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"ListReviewedCommand executed!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String getFeedback(List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardListWithId) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcardListWithId.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return \"You have no reviewed flashcards! \" + \"Use \\\"reviewed [INDEX]\\\" to mark a flashcard as reviewed.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder(\"Here\u0027s the list of reviewed flashcards:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        feedback.append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardListWithId.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Map.Entry\u003cInteger, Flashcard\u003e flashcardEntry \u003d flashcardListWithId.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            feedback.append(i + 1).append(\": \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .append(flashcardEntry.getValue().getName())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .append(\" | Reviewed: \").append(flashcardEntry.getValue().getReviewIcon())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .append(\" | \").append(flashcardEntry.getValue().getPriorityAsString())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .append(\" | ID: \").append(flashcardEntry.getKey() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            feedback.append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return feedback.toString().trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof ListReviewedCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand otherListReviewedCommand \u003d (ListReviewedCommand) obj;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.flashcardList.equals(otherListReviewedCommand.flashcardList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 51,
      "quinnyyy": 14
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ModifyingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.storage.Savable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Abstract class for commands that modify an object and need to save to disk after executing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class ModifyingCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected ModifyingCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.storage \u003d Storage.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected CommandFeedback save(Savable savable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.info(\"Attempting to save \" + savable.getFileName() + \" to disk...\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            storage.save(savable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.info(\"Successfully saved \" + savable.getFileName() + \" to disk.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.warning(\"Save to disk failed for \" + savable.getFileName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(\"Uh Oh. Couldn\u0027t save this change. Sorry.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 29
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/OtherFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.OTHER_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command to create an other flashcard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class OtherFlashcardCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for Other Flashcard Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list for the command to execute on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory the flashcard factory to be used in the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public OtherFlashcardCommand(FlashcardList flashcardList, FlashcardFactory flashcardFactory) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardFactory !\u003d null : \"Invalid null FlashcardFactory!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the other flashcard command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public CommandFeedback execute() throws UnrecognizedFlashcardTypeException, DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Creating an other flashcard and adding it to the flashcard list...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard flashcard \u003d flashcardFactory.create(OTHER_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Created an other flashcard and added it to the flashcard list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback saveFeedback \u003d save(flashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        save(flashcardList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return saveFeedback;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof OtherFlashcardCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OtherFlashcardCommand otherOtherFlashcardCommand \u003d (OtherFlashcardCommand) obj;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherOtherFlashcardCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 53,
      "sliu107": 2,
      "quinnyyy": 7,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/PersonFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.PERSON_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command to create a person flashcard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class PersonFlashcardCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for Person Flashcard Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list for the command to execute on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory the flashcard factory to be used in the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public PersonFlashcardCommand(FlashcardList flashcardList, FlashcardFactory flashcardFactory) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardFactory !\u003d null : \"Invalid null FlashcardFactory!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the person flashcard command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public CommandFeedback execute() throws UnrecognizedFlashcardTypeException, DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Creating a person flashcard and adding it to the flashcard list...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard flashcard \u003d flashcardFactory.create(PERSON_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Created a person flashcard and added it to the flashcard list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback saveFeedback \u003d save(flashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        save(flashcardList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return saveFeedback;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof PersonFlashcardCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        PersonFlashcardCommand otherPersonFlashcardCommand \u003d (PersonFlashcardCommand) obj;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherPersonFlashcardCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 53,
      "sliu107": 2,
      "quinnyyy": 7,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/PriorityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to configure priority level of a flashcard."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class PriorityCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Flashcard.PriorityLevel priorityLevel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for the PriorityCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param index         index of the flashcard to show"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param priorityLevel priority level to set the flashcard to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public PriorityCommand(FlashcardList flashcardList, int index, Flashcard.PriorityLevel priorityLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets index in the priority command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets the priority level in the priority command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the priority level"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public Flashcard.PriorityLevel getPriorityLevel() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return priorityLevel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Setting the priority for the flashcard \" + index + \"...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcard.setPriorityLevel(priorityLevel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Set the priority for the flashcard \" + index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            CommandFeedback saveFeedback \u003d save(flashcard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String feedback \u003d \"Priority has been updated:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                + flashcard.getName() + \" | New priority: \" + flashcard.getPriorityAsString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (!saveFeedback.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                feedback +\u003d saveFeedback;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"IndexOutOfBoundsException occurred when executing the priority command.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof PriorityCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand otherPriorityCommand \u003d (PriorityCommand) obj;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return otherPriorityCommand.getIndex() \u003d\u003d this.index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026\u0026 otherPriorityCommand.getPriorityLevel().equals(this.priorityLevel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 9,
      "sliu107": 2,
      "quinnyyy": 10,
      "g-lilian": 62
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/RandomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class RandomCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    FlashcardList flashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for RandomCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the FlashcardList to be used in the command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class to be used in the command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public RandomCommand(FlashcardList flashcardList, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Randomizing flashcards for reviewing ...\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardList.reviewRandomFlashcards(ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Randomized flashcards and finished a review\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 10,
      "sliu107": 21,
      "quinnyyy": 2
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ResetReviewedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class ResetReviewedCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for ResetReviewedCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class to be used in the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the FlashcardList to be used in the command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public ResetReviewedCommand(Ui ui, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \" Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Resetting all the flashcards as unreviewed...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardList.resetAsUnreviewed(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Reset all the flashcards as unreviewed.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 11,
      "sliu107": 20,
      "quinnyyy": 1
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ReviewedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to mark a flashcard as Reviewed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ReviewedCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for ReviewedCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param index         index of the flashcard to show"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ReviewedCommand(FlashcardList flashcardList, int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets index in the reviewed command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Setting flashcard \" + index + \" as reviewed...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            flashcard.setReviewStatus(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            flashcardList.setTotalReviewedNumber(flashcardList.getTotalReviewedNumber() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Set flashcard \" + index + \" as reviewed\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            CommandFeedback saveFeedback \u003d save(flashcard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String feedback \u003d \"You have marked the following flashcard as Reviewed:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                + flashcard.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (!saveFeedback.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                feedback +\u003d saveFeedback;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"InvalidFlashcardIndexException occurred when executing the reviewed command.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ReviewedCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ReviewedCommand otherReviewedCommand \u003d (ReviewedCommand) obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return otherReviewedCommand.getIndex() \u003d\u003d this.index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 3,
      "quinnyyy": 10,
      "g-lilian": 56
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ShowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to show the details of a specified flashcard."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for the ShowCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param index         index of the flashcard to show"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ShowCommand(FlashcardList flashcardList, int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets index in the show command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Showing the information of flashcard \" + index + \"...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Showed the information of the flashcard \" + index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String feedback \u003d \"These are the flashcard details:\" + System.lineSeparator() + flashcard;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"InvalidFlashcardIndexException occurred when executing the show command.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ShowCommand)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ShowCommand otherShowCommand \u003d (ShowCommand) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return otherShowCommand.getIndex() \u003d\u003d this.index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 2,
      "quinnyyy": 4,
      "g-lilian": 57
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ShowGroupsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to list all existing groups."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ShowGroupsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for ShowGroupsCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupList list of flashcard groups"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public ShowGroupsCommand(GroupList groupList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Executing ShowGroupsCommand...\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"ShowGroupsCommand executed!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String feedback \u003d getFeedback(groupList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String getFeedback(GroupList groupList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (groupList.getTotalGroupNum() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return \"There are no existing groups. Use \\\"group\\\" to create a new group.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        List\u003cFlashcardGroup\u003e groups \u003d groupList.getGroups();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder(\"Here are all existing groups:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            FlashcardGroup group \u003d groups.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String groupName \u003d group.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(i + 1 + \". \" + groupName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            feedback.append(\" | Description: \" + group.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return feedback.toString().trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ShowGroupsCommand)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ShowGroupsCommand otherShowGroupsCommand \u003d (ShowGroupsCommand) obj;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.groupList.equals(otherShowGroupsCommand.groupList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "quinnyyy": 21,
      "g-lilian": 38
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/TimelineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.ReversedDateOrderException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.BULLET_POINT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to show a timeline for the existing flashcards."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class TimelineCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for TimelineCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TimelineCommand(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.startDate \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for TimelineCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param startDate     the date to start listing flashcards from (inclusive)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param endDate       the date after which to stop listing flashcards from"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TimelineCommand(FlashcardList flashcardList, String startDate, String endDate)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        throws InvalidDateFormatException, ReversedDateOrderException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert startDate !\u003d null : \"Invalid null startDate!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert endDate !\u003d null : \"Invalid null endDate!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.startDate \u003d Parser.parseDate(startDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.endDate \u003d Parser.parseDate(endDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (startDate.compareTo(endDate) \u003e 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new ReversedDateOrderException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        List\u003cFlashcard\u003e filteredFlashcardList \u003d flashcardList.getFlashcards().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            .filter(flashcard -\u003e isValidFlashcard(flashcard)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.flashcardList \u003d new FlashcardList(filteredFlashcardList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private boolean isValidFlashcard(Flashcard f) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate cardStartDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (f instanceof EventFlashcard) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            EventFlashcard eventFlashcard \u003d (EventFlashcard) f;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            cardStartDate \u003d eventFlashcard.getStartDate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (f instanceof PersonFlashcard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            PersonFlashcard personFlashcard \u003d (PersonFlashcard) f;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            cardStartDate \u003d personFlashcard.getBirthDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return cardStartDate.compareTo(this.startDate) \u003e\u003d 0 \u0026\u0026 cardStartDate.compareTo(this.endDate) \u003c\u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String getFeedback(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        boolean isRestricted \u003d startDate !\u003d null \u0026\u0026 endDate !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcardList.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (isRestricted) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return \"You have no flashcards from \" + startDate + \" to \" + endDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return \"You have no flashcard at this moment!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e(flashcardList.getFlashcards());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Collections.sort(flashcards);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String summaryMessage \u003d isRestricted ? \"Listing flashcards from \" + startDate + \" to \" + endDate + \"...\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            : \"Flashcards sorted by date:\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder feedback \u003d new StringBuilder(summaryMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (Flashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            feedback.append(BULLET_POINT + flashcard.getShortDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            feedback.append(System.lineSeparator());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return feedback.toString().trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Listing the flashcards in time order...\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String feedback \u003d getFeedback(flashcardList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return new CommandFeedback(feedback);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 8,
      "sliu107": 1,
      "quinnyyy": 62,
      "g-lilian": 37
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/UpdateStudyPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UpdateStudyPlanCommand extends ModifyingCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for UpdateStudyPlanCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class to be used in the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param studyPlanList the StudyPlanList to be updated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the FlashcardList to be used in the command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public UpdateStudyPlanCommand(Ui ui, StudyPlanList studyPlanList, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert studyPlanList !\u003d null : \"Invalid null StudyPlan!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public CommandFeedback execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing UpdateStudyPlanCommand...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList.updateStudyPlan(ui, flashcardList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"UpdateStudyPlanCommand executed!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return save(studyPlanList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof UpdateStudyPlanCommand)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand otherUpdateStudyPlanCommand \u003d (UpdateStudyPlanCommand) obj;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.ui.equals(otherUpdateStudyPlanCommand.ui)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.studyPlanList.equals(otherUpdateStudyPlanCommand.studyPlanList)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.flashcardList.equals(otherUpdateStudyPlanCommand.flashcardList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 52,
      "quinnyyy": 1
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/DeletionFailedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for deletion failure."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DeletionFailedException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "quinnyyy": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for duplicate flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DuplicateFlashcardException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "quinnyyy": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/DuplicateFlashcardNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for duplicate flashcard name."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DuplicateFlashcardNameException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 8
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/HistoryFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exceptions specific to the History Flashcard app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public abstract class HistoryFlashcardException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public HistoryFlashcardException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public HistoryFlashcardException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 14
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/InvalidDateFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for invalid date format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class InvalidDateFormatException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "quinnyyy": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/InvalidFlashcardIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for invalid flashcard index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class InvalidFlashcardIndexException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 8
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/InvalidInputFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for invalid input format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class InvalidInputFormatException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "g-lilian": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/ReversedDateOrderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for reversed date order."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ReversedDateOrderException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "g-lilian": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/UnknownCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exception for unknown command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UnknownCommandException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 8
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/UnrecognizedFlashcardGroupException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Unrecognized flashcard group Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class UnrecognizedFlashcardGroupException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public UnrecognizedFlashcardGroupException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 10
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/UnrecognizedFlashcardTypeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Unrecognized flashcard type exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UnrecognizedFlashcardTypeException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public UnrecognizedFlashcardTypeException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "quinnyyy": 6
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/EventFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DIVIDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.END_DATE_FIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.START_DATE_FIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SUMMARY_FIELD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Event flashcard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class EventFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs an \u003ccode\u003eEventFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public EventFlashcard(String name, LocalDate startDate, LocalDate endDate, String summary, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(name, summary, details);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert startDate !\u003d null : \"Invalid null startDate!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert endDate !\u003d null : \"Invalid null endDate!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !summary.isEmpty() : \"Invalid empty summary!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new EventFlashcard: \" + this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Creates an \u003ccode\u003eEventFlashcard\u003c/code\u003e  by prompting the user to enter info."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui used to prompt the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the created \u003ccode\u003eEventFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static EventFlashcard createEventFlashcard(Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate startDate \u003d ui.promptUserForRequiredLocalDate(START_DATE_FIELD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate endDate \u003d ui.promptUserForRequiredLocalDate(END_DATE_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        while (startDate.compareTo(endDate) \u003e 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui.sendReversedDateOrderResponse();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            startDate \u003d ui.promptUserForRequiredLocalDate(START_DATE_FIELD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            endDate \u003d ui.promptUserForRequiredLocalDate(END_DATE_FIELD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String summary \u003d ui.promptUserForRequiredField(SUMMARY_FIELD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d ui.promptUserForDetails();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new EventFlashcard(name, startDate, endDate, summary, details);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the start date of this event flashcard."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the start date of this event flashcard"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the end date of this event flashcard."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the end date of this event flashcard"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets a short description of the flashcard, without summary or details."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return String of shortDescription of the flashcard"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getShortDescription() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String shortDescription \u003d this.name + DIVIDER + \"Time Period: \" + this.startDate + \" to \" + this.endDate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            + DIVIDER + \"Reviewed: \" + this.getReviewIcon() + DIVIDER + \"Priority: \" + this.getPriorityAsString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return shortDescription;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the string representation of event flashcard."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Event name: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        stringBuilder.append(\"Event period: \").append(Parser.localDateToString(startDate)).append(\"-\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            .append(Parser.localDateToString(endDate)).append(System.lineSeparator());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Summary: \").append(summary).append(System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Details:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(getDetailsString(details));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!(obj instanceof EventFlashcard)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        // Will have to make sure in the future to check for null here if we make other optional fields."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        EventFlashcard otherEventFlashcard \u003d (EventFlashcard) obj;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return super.equals(obj) \u0026\u0026 startDate.equals(otherEventFlashcard.getStartDate())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \u0026\u0026 endDate.equals(otherEventFlashcard.getEndDate());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Compares the current instance with the flashcard passed in."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcard the flashcard to be compared with"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the comparison result"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public int compareTo(Flashcard flashcard) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcard instanceof EventFlashcard) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            EventFlashcard eventFlashcard \u003d (EventFlashcard) flashcard;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return startDate.compareTo(eventFlashcard.getStartDate());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (flashcard instanceof PersonFlashcard) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            PersonFlashcard personFlashcard \u003d (PersonFlashcard) flashcard;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return startDate.compareTo(personFlashcard.getBirthDate());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 40,
      "quinnyyy": 84,
      "g-lilian": 20
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.storage.Savable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.utils.FlashcardObserver;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Abstract flashcard class to represent basic properties of flashcard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class Flashcard implements Comparable\u003cFlashcard\u003e, Savable {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String FLASHCARDS_FOLDER \u003d \"flashcards\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final String FILE_PATH \u003d LOG_FOLDER + \"flashcard.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(Flashcard.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String summary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected List\u003cString\u003e details;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    protected boolean isReviewed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    protected PriorityLevel pl;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected transient List\u003cFlashcardObserver\u003e observers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected Flashcard(String name, String summary, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.isReviewed \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.pl \u003d PriorityLevel.DEFAULT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set up the flashcard logger. Call once at the start of the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the details string from the list of details in the flashcard."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param details the list of details"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the string representing the details"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static String getDetailsString(List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder detailsStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            detailsStringBuilder.append(\"* \").append(detail).append(System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return detailsStringBuilder.toString().trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the name of the flashcard."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the name of the flashcard"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the file name of the flashcard."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the file name of the flashcard."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return FLASHCARDS_FOLDER + \"/\" + name;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Sets the review status of the flashcard."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param isReviewed true if flashcard has been reviewed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void setReviewStatus(boolean isReviewed) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.isReviewed \u003d isReviewed;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Returns icon based on flashcard\u0027s review status."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return \"Y\" for Yes if reviewed, else \"N\" for No."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getReviewIcon() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return (isReviewed ? \"/\" : \"X\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Returns boolean value indicating whether or not the flashcards has been reviewed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return true if flashcard is reviewed, else false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isReviewed() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return isReviewed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Returns the flashcard\u0027s priority level."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return priority level"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public PriorityLevel getPriorityLevel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.pl;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sets the flashcard\u0027s priority level."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param pl priority level to be set"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setPriorityLevel(PriorityLevel pl) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.pl \u003d pl;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Returns the number of \"*\"s based on flashcard\u0027s priority level."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return \"*\"s to indicate priority level"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getPriorityAsString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        switch (pl) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"*\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"**\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"***\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"Not indicated\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Gets the summary of the flashcard."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the summary of the flashcard."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Gets the details of the flashcard."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the details of the flashcard"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public List\u003cString\u003e getDetails() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * To be implemented by child classes."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return a shortened description of the flashcard"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public abstract String getShortDescription();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Attach an observer i.e. a group, study-plan to this flashcard."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param observer the observer to be attached"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void attach(FlashcardObserver observer) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Notify observers that this flashcard has been deleted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public List\u003cFlashcardObserver\u003e getObservers() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return observers;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Initialize observers to empty list. Needed because it is transient."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void initializeObservers() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!(obj instanceof Flashcard)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return name.equals(otherFlashcard.getName()) \u0026\u0026 summary.equals(otherFlashcard.getSummary())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \u0026\u0026 details.equals(otherFlashcard.getDetails());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract int compareTo(Flashcard flashcard);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public enum PriorityLevel {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOW,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        MEDIUM,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        HIGH,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DEFAULT"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 52,
      "quinnyyy": 114,
      "g-lilian": 60
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/FlashcardFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Flashcard factory class to create flashcards given string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class FlashcardFactory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static Logger LOGGER \u003d Logger.getLogger(FlashcardFactory.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for FlashcardFactory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui the instance for user interaction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public FlashcardFactory(Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set up the FlashcardFactory logger. Call once at the start of the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(Flashcard.FILE_PATH, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Create a \u003ccode\u003eFlashcard\u003c/code\u003e given a string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param flashcardType string representing type of flashcard to create"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return constructed \u003ccode\u003eFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws UnrecognizedFlashcardTypeException if the string is not a valid flashcard type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Flashcard create(String flashcardType) throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        switch (flashcardType.toLowerCase()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            EventFlashcard eventFlashcard \u003d EventFlashcard.createEventFlashcard(ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.confirmFlashcardCreation(eventFlashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return eventFlashcard;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"person\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            PersonFlashcard personFlashcard \u003d PersonFlashcard.createPersonFlashcard(ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.confirmFlashcardCreation(personFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return personFlashcard;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"other\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            OtherFlashcard otherFlashcard \u003d OtherFlashcard.createOtherFlashcard(ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.confirmFlashcardCreation(otherFlashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return otherFlashcard;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.info(\"Received unknown flashcard type: \" + flashcardType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new UnrecognizedFlashcardTypeException(\"Flashcard types: event, person, other\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 10,
      "quinnyyy": 52,
      "g-lilian": 7
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/FlashcardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.commands.CommandFeedback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.ReviewedCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidInputFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.storage.Savable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.ERROR_CODE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.MS_TO_S_CONVERSION_FACTOR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.NORMAL_CODE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.REGEX_MATCH_ALL_CHARACTER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * List of flashcards."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class FlashcardList implements Savable {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String FLASHCARD_LIST_FOLDER \u003d \"flashcardlist\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String FLASHCARD_LIST_FILE_NAME \u003d \"flashcardlist\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"flashcard_list.log\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(FlashcardList.class.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private int totalReviewedNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for FlashcardList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.totalReviewedNumber \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for FlashcardList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the list of flashcards to be added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList(List\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null flashcard list!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcards.addAll(flashcardList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Copy constructor for FlashcardList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Note that this is a shallow copy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list to be copied from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardList.getTotalFlashcardNum(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            this.flashcards.add(flashcardList.getFlashcardAtIdx(i));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the FlashcardList logger. Call once at the start of the program."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcard the task to be added to the list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the updated flashcardList with new flashcard just be added in"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList addFlashcard(Flashcard flashcard) throws DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (flashcards.stream().anyMatch(o -\u003e o.getName().equals(flashcard.getName()))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            throw new DuplicateFlashcardNameException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcards.add(flashcard);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Added flashcard \" + flashcard.getName() + \" to list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Deletes a flashcard from the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param index the index of the flashcard to be deleted"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void deleteFlashcard(int index) throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Flashcard flashcard \u003d flashcards.remove(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.info(\"Deleted flashcard \" + flashcard.getName() + \" from list.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.warning(\"IndexOutOfBoundsException occurred when deleting flashcard at index \" + index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.warning(\"Throwing InvalidFlashcardIndexException...\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Resets all the flashcards as unreviewed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param ui the ui used to communicate with the user"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void resetAsUnreviewed(Ui ui) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert flashcards !\u003d null : \"Invalid flashcardList\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert ui !\u003d null : \"Invalid ui\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (Flashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            flashcard.setReviewStatus(false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.totalReviewedNumber \u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui.confirmResetCompletion();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Randomize the flashcard list to help user for reviewing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the random flashcard list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardList reviewRandomFlashcards(Ui ui) throws InvalidFlashcardIndexException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        InvalidInputFormatException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert flashcards !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardList randomFlashcards \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.shuffle(randomFlashcards.getFlashcards(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            new Random(System.currentTimeMillis() / MS_TO_S_CONVERSION_FACTOR));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"The flashcards have been randomized.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int reviewedNumber \u003d 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (Flashcard flashcard : randomFlashcards.getFlashcards()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            System.out.println(flashcard);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (flashcard.isReviewed()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                System.out.println(\"You have already reviewed this flashcard.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                reviewedNumber \u003d handleResponse(ui, flashcard, reviewedNumber);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int totalUnreviewedNumber \u003d flashcards.size() - totalReviewedNumber;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui.confirmRandomFlashcardsReviewCompletion(reviewedNumber, totalUnreviewedNumber);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return randomFlashcards;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private int handleResponse(Ui ui, Flashcard flashcard, int reviewedNumber)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        throws InvalidFlashcardIndexException, InvalidInputFormatException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int statusCode \u003d NORMAL_CODE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                String response \u003d ui.promptUserResponseForReviewing(flashcard).toLowerCase();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                switch (response) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                case \"y\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                case \"yes\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    ReviewedCommand reviewedCommand \u003d new ReviewedCommand(this,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                        flashcards.indexOf(flashcard));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    CommandFeedback reviewedCommandFeedback \u003d reviewedCommand.execute();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    ui.showCommandFeedback(reviewedCommandFeedback);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    reviewedNumber++;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                case \"n\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                case \"no\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                return reviewedNumber;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (InvalidInputFormatException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                System.out.println(\"Please enter either yes or no.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                statusCode \u003d ERROR_CODE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        } while (statusCode \u003d\u003d ERROR_CODE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return ERROR_CODE;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Return whether or not this FlashcardList contains specified flashcard."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param flashcard the flashcard to check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not this FlashcardList contains specified flashcard"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean contains(Flashcard flashcard) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard at a specific index."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param idx the index."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard at the specified index"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Flashcard getFlashcardAtIdx(int idx) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcards.get(idx);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks if the flashcard list is empty."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return boolean value indicating whether or not the flashcard list is empty"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcards.isEmpty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the total number of flashcards in the list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return total number of flashcards in the list"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public int getTotalFlashcardNum() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcards.size();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the number of reviewed flashcards."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the total number of reviewed flashcards at this moment"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public int getTotalReviewedNumber() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return totalReviewedNumber;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Updates the number of reviewed flashcards."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param totalReviewedNumber the updated number of reviewed flashcards"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setTotalReviewedNumber(int totalReviewedNumber) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.totalReviewedNumber \u003d totalReviewedNumber;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Gets the list of flashcards."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the list of flashcards"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public List\u003cFlashcard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets all reviewed flashcards with IDs."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the list of reviewed flashcards with IDs"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e getAllReviewedFlashcards() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Getting all reviewed flashcards...\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e reviewedFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size(); i++) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Flashcard flashcard \u003d flashcards.get(i);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (flashcard.isReviewed()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                reviewedFlashcards.add(new AbstractMap.SimpleEntry\u003c\u003e(i, flashcard));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Got all reviewed flashcards!\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return reviewedFlashcards;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets all flashcards with a specified priority level."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param pl desired priority level of flashcards"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the list of flashcards with the specified priority level"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e getFlashcardsOfPriority(Flashcard.PriorityLevel pl) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Getting all flashcards of specified priority...\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e priorityFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size(); i++) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            Flashcard flashcard \u003d flashcards.get(i);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            if (flashcard.getPriorityLevel() \u003d\u003d pl) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                priorityFlashcards.add(new AbstractMap.SimpleEntry\u003c\u003e(i, flashcard));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Got all flashcards with specified priority!\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return priorityFlashcards;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets all flashcards which contain a certain keyword with IDs."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param keyword the specified keyword"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the list of flashcards containing the specified keyword with IDs"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e getAllFlashcardsWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Getting all flashcards with keyword \" + keyword + \"...\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardsWithKeyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size(); i++) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Flashcard flashcard \u003d flashcards.get(i);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (flashcard.getName().matches(REGEX_MATCH_ALL_CHARACTER + keyword + REGEX_MATCH_ALL_CHARACTER)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                flashcardsWithKeyword.add(new AbstractMap.SimpleEntry\u003c\u003e(i, flashcard));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Got all flashcards with keyword \" + keyword + \"!\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardsWithKeyword;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof FlashcardList)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardList otherFlashcards \u003d (FlashcardList) obj;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (this.getTotalFlashcardNum() !\u003d otherFlashcards.getTotalFlashcardNum()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d new ArrayList\u003cFlashcard\u003e(this.getFlashcards());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.sort(flashcardList);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e otherFlashcardList \u003d new ArrayList\u003cFlashcard\u003e(otherFlashcards.getFlashcards());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.sort(otherFlashcardList);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int idx \u003d 0; idx \u003c this.getTotalFlashcardNum(); idx++) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (!flashcardList.get(idx).equals(otherFlashcardList.get(idx))) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Get the file name of the study plan lit."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the file name of the study plan list."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return FLASHCARD_LIST_FOLDER + \"/\" + FLASHCARD_LIST_FILE_NAME;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets all flashcard names."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the list of flashcard names"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cString\u003e getAllFlashcardNames() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e flashcardNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (Flashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardNames.add(flashcard.getName());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardNames;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 225,
      "sliu107": 103,
      "quinnyyy": 26,
      "g-lilian": 22
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/OtherFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.Constants.DIVIDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SUMMARY_FIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Other flashcard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class OtherFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs an \u003ccode\u003eOtherFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public OtherFlashcard(String name, String summary, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        super(name, summary, details);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !summary.isEmpty() : \"Invalid empty summary!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new OtherFlashcard: \" + this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Creates an \u003ccode\u003eOtherFlashcard\u003c/code\u003e by prompting the user to enter info."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui used to prompt the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the created \u003ccode\u003eOtherFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static OtherFlashcard createOtherFlashcard(Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String summary \u003d ui.promptUserForRequiredField(SUMMARY_FIELD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d ui.promptUserForDetails();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new OtherFlashcard(name, summary, details);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets a short description of the flashcard, without summary or details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return String of shortDescription of the flashcard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getShortDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String shortDescription \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            this.name + DIVIDER + \"Reviewed: \" + this.getReviewIcon()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                + DIVIDER + \"Priority: \" + this.getPriorityAsString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return shortDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the string representation of this flashcard."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Title: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Summary: \").append(summary).append(System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Details:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(getDetailsString(details));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public int compareTo(Flashcard flashcard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcard instanceof OtherFlashcard) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 27,
      "quinnyyy": 35,
      "g-lilian": 14
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/PersonFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.BIRTH_DATE_FIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DEATH_DATE_FIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.Constants.DIVIDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SUMMARY_FIELD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Person flashcard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class PersonFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate birthDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate deathDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs a \u003ccode\u003ePersonFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public PersonFlashcard(String name, LocalDate birthDate, LocalDate deathDate, String summary,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                           List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(name, summary, details);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert birthDate !\u003d null : \"Invalid null birthDate!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert deathDate !\u003d null : \"Invalid null deathDate!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !summary.isEmpty() : \"Invalid empty summary!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.birthDate \u003d birthDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.deathDate \u003d deathDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new PersonFlashcard: \" + this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Creates a \u003ccode\u003ePersonFlashcard\u003c/code\u003e by prompting the user to enter info."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui used to prompt the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the created \u003ccode\u003ePersonFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static PersonFlashcard createPersonFlashcard(Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate birthDate \u003d ui.promptUserForRequiredLocalDate(BIRTH_DATE_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate deathDate \u003d ui.promptUserForRequiredLocalDate(DEATH_DATE_FIELD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        while (birthDate.compareTo(deathDate) \u003e 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui.sendReversedDateOrderResponse();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            birthDate \u003d ui.promptUserForRequiredLocalDate(BIRTH_DATE_FIELD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            deathDate \u003d ui.promptUserForRequiredLocalDate(DEATH_DATE_FIELD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String summary \u003d ui.promptUserForRequiredField(SUMMARY_FIELD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d ui.promptUserForDetails();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new PersonFlashcard(name, birthDate, deathDate, summary, details);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the birth date of this person flashcard."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the birth date of this person flashcard"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getBirthDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return birthDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the death date of this person flashcard."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the death date of this person flashcard"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getDeathDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return deathDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the string representation of this flashcard."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Person name: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        stringBuilder.append(\"Born: \").append(Parser.localDateToString(birthDate)).append(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        stringBuilder.append(\"Died: \").append(Parser.localDateToString(deathDate)).append(System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Summary: \").append(summary).append(System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Details:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(getDetailsString(details));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets a short description of the flashcard, without summary or details."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return String of shortDescription of the flashcard"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getShortDescription() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String shortDescription \u003d this.name + DIVIDER + \"Time Period: \" + this.birthDate + \" to \" + this.deathDate"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            + DIVIDER + \"Reviewed: \" + this.getReviewIcon() + DIVIDER + \"Priority: \" + this.getPriorityAsString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return shortDescription;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!(obj instanceof PersonFlashcard)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        // Will have to make sure in the future to check for null here if we make other optional fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PersonFlashcard otherEventFlashcard \u003d (PersonFlashcard) obj;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return super.equals(obj) \u0026\u0026 birthDate.equals(otherEventFlashcard.getBirthDate())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \u0026\u0026 deathDate.equals(otherEventFlashcard.getDeathDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public int compareTo(Flashcard flashcard) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcard instanceof EventFlashcard) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            EventFlashcard eventFlashcard \u003d (EventFlashcard) flashcard;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return birthDate.compareTo(eventFlashcard.getStartDate());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (flashcard instanceof PersonFlashcard) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            PersonFlashcard personFlashcard \u003d (PersonFlashcard) flashcard;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return birthDate.compareTo(personFlashcard.getBirthDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 30,
      "quinnyyy": 88,
      "g-lilian": 21
    }
  },
  {
    "path": "src/main/java/seedu/tp/group/FlashcardGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.storage.Savable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.utils.FlashcardObserver;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.DESCRIPTION_FIELD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.INDEXES_FIELD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * A group of flashcards which have some of the same characteristics."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class FlashcardGroup implements Savable, FlashcardObserver {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String GROUPS_FOLDER \u003d \"groups\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(FlashcardGroup.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"flashcard_group.log\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList groupCards \u003d new FlashcardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs a \u003ccode\u003eFlashcardGroup\u003c/code\u003e using some existing cards from the users original list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param name         the name of the group."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param description  brief description of the group."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param originalList the original list of flashcards."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param indexes      the indexes of the flashcards which are going to be added to this group."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup(String name, String description, FlashcardList originalList, int[] indexes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert originalList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !description.isEmpty() : \"Invalid empty description!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int i : indexes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                Flashcard flashcard \u003d originalList.getFlashcardAtIdx(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                groupCards.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (DuplicateFlashcardNameException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                // Exception ignored because there shouldn\u0027t be any flashcard with duplicate names in the original list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new Flashcard Group: \" + this);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set up the Flashcard Group logger. Call once at the start of the program."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Creates an \u003ccode\u003eflashcardGroup\u003c/code\u003e  by prompting the user to enter info."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param ui            used to prompt the user"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList the flashcardList which used to create the new group"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the new flashcardGroup"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @throws InvalidFlashcardIndexException if the indexes given by the users are not integers or out of bounds"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static FlashcardGroup createGroup(Ui ui, FlashcardList flashcardList) throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String description \u003d ui.promptUserForRequiredField(DESCRIPTION_FIELD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String[] indexesGiven \u003d ui.promptUserForRequiredField(INDEXES_FIELD).split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            assert indexesGiven !\u003d null : \"Invalid null indexes\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            int[] indexes \u003d new int[indexesGiven.length];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                indexes[i] \u003d Integer.parseInt(indexesGiven[i]) - 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new FlashcardGroup(name, description, flashcardList, indexes);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Adds a flashcard to an existing group."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcard the flashcard to be added"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @throws DuplicateFlashcardException if the flashcard is already in the group"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void addFlashcardToTheGroup(Flashcard flashcard) throws DuplicateFlashcardException,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (groupCards.contains(flashcard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        groupCards.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Added \" + flashcard.getName() + \" to \" + name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the string of a group including some basic information."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return String induction of the group."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"Group name: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"Group description: \").append(description).append(System.lineSeparator());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"There are \").append(groupCards.getTotalFlashcardNum())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(\" flashcards in this group.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the file name of the flashcard group."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the file name of the flashcard group."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return GROUPS_FOLDER + \"/\" + name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardList getGroupCards() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupCards;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void delete(Flashcard flashcard) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        groupCards.getFlashcards().remove(flashcard);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (!(obj instanceof FlashcardGroup)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup otherFlashcardGroup \u003d (FlashcardGroup) obj;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return name.equals(otherFlashcardGroup.getName()) \u0026\u0026 description.equals(otherFlashcardGroup.getDescription())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \u0026\u0026 groupCards.equals(otherFlashcardGroup.getGroupCards());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 17,
      "sliu107": 109,
      "quinnyyy": 45,
      "g-lilian": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/group/GroupFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Group factory class to create flashcard group given string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupFactory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for the GroupFactory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui            instance for user interaction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupFactory(Ui ui, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Forms a new group and adds it to groupList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the FlashcardGroup just created"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @throws InvalidFlashcardIndexException if the flashcards used to create the group have invalid index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup form() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup group \u003d FlashcardGroup.createGroup(ui, flashcardList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui.confirmFlashcardGroupCreation(group);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 30,
      "g-lilian": 9
    }
  },
  {
    "path": "src/main/java/seedu/tp/group/GroupList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Lists of flashcard groups."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private List\u003cFlashcardGroup\u003e groups;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs a list of groups."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groups \u003d new ArrayList\u003cFlashcardGroup\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs a list of groups."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardGroups the list of flashcardGroups to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupList(List\u003cFlashcardGroup\u003e flashcardGroups) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert flashcardGroups !\u003d null : \"Invalid flashcardGroups!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groups.addAll(flashcardGroups);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Adds a new group to the group list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param group the new group to be added to the list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardGroup(FlashcardGroup group) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groups.add(group);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Deletes a specific group from group list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupIdentifier either the name or the index of the flashcard group"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the group deleted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup deleteFlashcardGroup(String groupIdentifier) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (FlashcardGroup g : groups) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (g.getName().equals(groupIdentifier)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                groups.remove(g);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                return g;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int groupIndex \u003d Integer.parseInt(groupIdentifier) - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groups.remove(groupIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get a flashcard group by name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupID the index or name of the flashcard group"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the flashcard group"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws UnrecognizedFlashcardGroupException if such a group does not exist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup getGroupByID(String groupID) throws UnrecognizedFlashcardGroupException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (FlashcardGroup g : groups) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (g.getName().equals(groupID)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return g;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            int groupIndex \u003d Integer.parseInt(groupID) - 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return groups.get(groupIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            throw new UnrecognizedFlashcardGroupException(\"There is no such group.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public List\u003cFlashcardGroup\u003e getGroups() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groups;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Returns a FlashcardList of flashcards belonging to the group specified by groupName."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupIdentifier either the name or the index of the flashcard group"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return FlashcardList of flashcards belonging to the group"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public FlashcardList getFlashcardsInGroup(String groupIdentifier) throws UnrecognizedFlashcardGroupException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        FlashcardList flashcardsInGroup;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        for (FlashcardGroup g : groups) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            if (g.getName().equals(groupIdentifier)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                flashcardsInGroup \u003d g.getGroupCards();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return flashcardsInGroup;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            int groupIndex \u003d Integer.parseInt(groupIdentifier) - 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            FlashcardGroup g \u003d groups.get(groupIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return g.getGroupCards();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new UnrecognizedFlashcardGroupException(\"Invalid group!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the flashcard group at a specific index."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param index the index."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the flashcard group at the specified index"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup getGroupAtIdx(int index) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groups.get(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the total number of groups in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return total number of groups in the list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public int getTotalGroupNum() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groups.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList otherGroupList \u003d (GroupList) obj;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (this.getTotalGroupNum() !\u003d otherGroupList.getTotalGroupNum()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int idx \u003d 0; idx \u003c otherGroupList.getTotalGroupNum(); idx++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (!this.getGroupAtIdx(idx).equals(otherGroupList.getGroupAtIdx(idx))) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "sliu107": 117,
      "quinnyyy": 5,
      "g-lilian": 24
    }
  },
  {
    "path": "src/main/java/seedu/tp/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.AddFlashcardToGroupCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DeleteStudyPlanCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DisplayStudyPlanCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.EventFlashcardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.GroupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ListFlashcardsInGroupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ListPriorityCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListReviewedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.OtherFlashcardCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.PersonFlashcardCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.PriorityCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.RandomCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ResetReviewedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ReviewedCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ShowCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ShowGroupsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.commands.TimelineCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.UpdateStudyPlanCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidInputFormatException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.ReversedDateOrderException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.ADD_FLASHCARD_TO_GROUP_COMMAND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DELETE_COMMAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.DELETE_GROUP_COMMAND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DELETE_STUDY_PLAN_COMMAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DISPLAY_STUDY_PLAN_COMMAND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EMPTY_SPACE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EVENT_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.FIND_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.GROUP_COMMAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.HELP_COMMAND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LIST_COMMAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.Constants.LIST_FLASHCARDS_IN_GROUP_COMMAND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.Constants.LIST_PRIORITY_COMMAND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LIST_REVIEWED_COMMAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.OTHER_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.PERSON_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.PRIORITY_COMMAND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.RANDOM_COMMAND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.RESET_REVIEWED_COMMAND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.REVIEWED_COMMAND;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SHOW_COMMAND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SHOW_GROUPS_COMMAND;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.TIMELINE_COMMAND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.UPDATE_STUDY_PLAN_COMMAND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Parser class to handle parsing of user input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"parser.log\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs the Parser class."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory flashcard factory to be passed in as argument to commands"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list to be passed in as argument to commands"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupFactory     group factory to be passes in as argument to commands"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupList        group list to be passed in as argument to commands"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui               UI to be passed in as argument to commands"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public Parser(FlashcardFactory flashcardFactory, FlashcardList flashcardList,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                  GroupFactory groupFactory, GroupList groupList, StudyPlanList studyPlanList, Ui ui) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupFactory \u003d groupFactory;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the Parser logger. Call once at the start of the program."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Attempt to parse a string representing a date by matching it with formatters."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param date the string to be parsed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return LocalDate if the string was parsable, null if not"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static LocalDate parseDate(String date) throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert date !\u003d null : \"Invalid null date!\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        final DateTimeFormatter[] dateTimeFormatters \u003d {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d M yyyy\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"M yyyy\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"yyyy\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/yyyy\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"M/yyyy\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d-M-yyyy\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"M-yyyy\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (DateTimeFormatter formatter : dateTimeFormatters) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(\"User entered invalid date time: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(date);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Converts local date type object to string representation."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param localDate the local date object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return string representation of the LocalDate object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static String localDateToString(LocalDate localDate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert localDate !\u003d null : \"Invalid null LocalDate!\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        final DateTimeFormatter formatter \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).withLocale(Locale.US);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return localDate.format(formatter);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Parses user input and return the command parsed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param userInput the user input"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the command parsed from user input"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws HistoryFlashcardException exception that occurred when parsing user input"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public Command parseCommand(String userInput) throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert userInput !\u003d null : \"Invalid null user input!\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String[] splitInput \u003d userInput.split(EMPTY_SPACE, 3);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String commandType \u003d splitInput[0].toLowerCase();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case EVENT_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new EventFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case PERSON_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new PersonFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case OTHER_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new OtherFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case LIST_COMMAND:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ListCommand(flashcardList);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case LIST_REVIEWED_COMMAND:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new ListReviewedCommand(flashcardList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case LIST_FLASHCARDS_IN_GROUP_COMMAND:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return new ListFlashcardsInGroupCommand(groupList, splitInput[1] + \" \" + splitInput[2]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (IndexOutOfBoundsException e1) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    return new ListFlashcardsInGroupCommand(groupList, splitInput[1]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                } catch (IndexOutOfBoundsException e2) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case SHOW_COMMAND:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return new ShowCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case REVIEWED_COMMAND:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return new ReviewedCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case RANDOM_COMMAND:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new RandomCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case DELETE_COMMAND:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return new DeleteCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case PRIORITY_COMMAND:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                Flashcard.PriorityLevel pl \u003d Flashcard.PriorityLevel.valueOf(splitInput[2]);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return new PriorityCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1, pl);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case LIST_PRIORITY_COMMAND:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                Flashcard.PriorityLevel pl \u003d Flashcard.PriorityLevel.valueOf(splitInput[1]);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return new ListPriorityCommand(flashcardList, pl);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case TIMELINE_COMMAND:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return new TimelineCommand(flashcardList, splitInput[1], splitInput[2]);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return new TimelineCommand(flashcardList);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (ReversedDateOrderException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                LOGGER.warning(\"ReversedDateOrderException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                throw new ReversedDateOrderException();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case GROUP_COMMAND:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new GroupCommand(groupFactory, groupList);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case DELETE_GROUP_COMMAND:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                return new DeleteGroupCommand(groupList, splitInput[1] + \" \" + splitInput[2]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IndexOutOfBoundsException e1) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    return new DeleteGroupCommand(groupList, splitInput[1]);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                } catch (IndexOutOfBoundsException e2) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case ADD_FLASHCARD_TO_GROUP_COMMAND:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new AddFlashcardToGroupCommand(ui, groupList, flashcardList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case SHOW_GROUPS_COMMAND:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new ShowGroupsCommand(groupList);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case UPDATE_STUDY_PLAN_COMMAND:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new UpdateStudyPlanCommand(ui, studyPlanList, flashcardList);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case DELETE_STUDY_PLAN_COMMAND:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new DeleteStudyPlanCommand(ui, studyPlanList);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case DISPLAY_STUDY_PLAN_COMMAND:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new DisplayStudyPlanCommand(studyPlanList, flashcardList);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case FIND_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return new FindCommand(flashcardList, splitInput[1]);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case RESET_REVIEWED_COMMAND:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new ResetReviewedCommand(ui, flashcardList);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case BYE_COMMAND:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.warning(\"UnknownCommandException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 202,
      "sliu107": 54,
      "quinnyyy": 27,
      "g-lilian": 43
    }
  },
  {
    "path": "src/main/java/seedu/tp/storage/AClassAdapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "// Credit to: https://stackoverflow.com/questions/16872492/gson-and-abstract-superclasses-deserialization-issue"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonDeserializationContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonDeserializer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonSerializationContext;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonSerializer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class AClassAdapter\u003cA\u003e implements JsonSerializer\u003cA\u003e, JsonDeserializer\u003cA\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public JsonElement serialize(A src, Type typeOfSrc, JsonSerializationContext context) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        JsonObject result \u003d new JsonObject();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        result.add(\"type\", new JsonPrimitive(src.getClass().getSimpleName()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        result.add(\"properties\", context.serialize(src, src.getClass()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public A deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        throws JsonParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        JsonObject jsonObject \u003d json.getAsJsonObject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String type \u003d jsonObject.get(\"type\").getAsString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        JsonElement element \u003d jsonObject.get(\"properties\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String fullName \u003d typeOfT.getTypeName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String packageText \u003d fullName.substring(0, fullName.lastIndexOf(\".\") + 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return context.deserialize(element, Class.forName(packageText + type));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (ClassNotFoundException cnfe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new JsonParseException(\"Unknown element type: \" + type, cnfe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 41
    }
  },
  {
    "path": "src/main/java/seedu/tp/storage/Savable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Interface for savable objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public interface Savable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the file name to save the object to. In the case of flashcards and groups will be title."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the file name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    String getFileName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 13
    }
  },
  {
    "path": "src/main/java/seedu/tp/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.DeletionFailedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.SAVE_FOLDER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class to save/load savables as JSON."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"storage.log\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String FILE_EXTENSION \u003d \".json\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static Storage storage \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Storage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        GsonBuilder builder \u003d new GsonBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        builder.registerTypeAdapter(Flashcard.class, new AClassAdapter\u003cFlashcard\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        builder.setPrettyPrinting();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.gson \u003d builder.create();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get an instance of the Storage object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the static Storage instance"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static Storage getInstance() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (storage \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            storage \u003d new Storage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set up the Storage logger. Call once at the start of the program."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private String getJson(Savable savable) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return gson.toJson(savable);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Save the savable as a formatted JSON string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param savable the savable to save"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException if the save fails"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void save(Savable savable) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String pathName \u003d SAVE_FOLDER + \"/\" + savable.getFileName() + FILE_EXTENSION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File file \u003d new File(pathName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String fileContents;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (savable instanceof Flashcard) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            fileContents \u003d gson.toJson(savable, Flashcard.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        } else if (savable instanceof StudyPlanList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            fileContents \u003d gson.toJson(((StudyPlanList) savable).getTreeMap(), TreeMap.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        } else if (savable instanceof FlashcardList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            fileContents \u003d gson.toJson(((FlashcardList) savable).getAllFlashcardNames(), List.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (savable instanceof FlashcardGroup) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            fileContents \u003d gson.toJson(savable);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(pathName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileWriter.write(fileContents);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Delete a savable from disk."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param savable the savable to delete"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws DeletionFailedException if the deletion fails"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void delete(Savable savable) throws DeletionFailedException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String pathName \u003d SAVE_FOLDER + \"/\" + savable.getFileName() + FILE_EXTENSION;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File file \u003d new File(pathName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        boolean success \u003d file.delete();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new DeletionFailedException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Call once at the start of the program to load flashcards and groups from file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param groupList the GroupList to load into"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cFlashcard\u003e loadAll(GroupList groupList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final String flashcardsFolderString \u003d SAVE_FOLDER + \"/\" + Flashcard.FLASHCARDS_FOLDER;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final String groupsFolderString \u003d SAVE_FOLDER + \"/\" + FlashcardGroup.GROUPS_FOLDER;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File flashcardsFolder \u003d new File(flashcardsFolderString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File groupsFolder \u003d new File(groupsFolderString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcardsFolder.exists()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            for (File f : Objects.requireNonNull(flashcardsFolder.listFiles())) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    Flashcard flashcard \u003d gson.fromJson(new FileReader(f), Flashcard.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    flashcard.initializeObservers();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    flashcards.add(flashcard);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.info(\"File: \" + f.toString() + \" was loaded from disk.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.warning(\"File: \" + f.toString() + \" was not found when loading from disk.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.warning(\"File: \" + f.toString() + \" could not be loaded (bad formatting).\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (groupsFolder.exists()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            for (File f : Objects.requireNonNull(groupsFolder.listFiles())) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    FlashcardGroup group \u003d gson.fromJson(new FileReader(f), FlashcardGroup.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    for (Flashcard flashcard : group.getGroupCards().getFlashcards()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                        for (Flashcard fcard : flashcards) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                            if (flashcard.equals(fcard)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                                fcard.attach((group));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    groupList.addFlashcardGroup(group);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.info(\"File: \" + f.toString() + \" was loaded from disk.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.warning(\"File: \" + f.toString() + \" was not found when loading from disk.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.warning(\"File: \" + f.toString() + \" could not be loaded (bad formatting).\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Call once at the start of the program to load flashcard list from file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcards the flashcards to be added into flashcard list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list created"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList loadFlashcardList(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        final String flashcardListFolderString \u003d SAVE_FOLDER + \"/\" + FlashcardList.FLASHCARD_LIST_FOLDER;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        File flashcardListFolder \u003d new File(flashcardListFolderString);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (flashcardListFolder.exists()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            for (File file : Objects.requireNonNull(flashcardListFolder.listFiles("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                (dir, name) -\u003e name.equals(FlashcardList.FLASHCARD_LIST_FILE_NAME + FILE_EXTENSION)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ))) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    List flashcardNameList \u003d gson.fromJson(new FileReader(file), List.class);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    FlashcardList flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    for (Object object : flashcardNameList) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        String flashcardName \u003d (String) object;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        Optional\u003cFlashcard\u003e flashcardOptional \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                            flashcards.stream().filter(o -\u003e o.getName().equals(flashcardName)).findFirst();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        flashcardOptional.ifPresent(flashcard -\u003e {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                                flashcardList.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                            } catch (DuplicateFlashcardNameException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                                // Ignore DuplicateFlashcardNameException"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    LOGGER.info(\"File: \" + file.toString() + \" was loaded from disk.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    return flashcardList;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    LOGGER.warning(\"File: \" + file.toString() + \" was not found when loading from disk.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.warning(\"File: \" + file.toString() + \" could not be loaded (bad formatting).\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new FlashcardList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Call once at the start of the program to load study plan list from file."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the loaded StudyPlanList"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public StudyPlanList loadStudyPlanList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        final String studyPlanListFolderString \u003d SAVE_FOLDER + \"/\" + StudyPlanList.STUDY_PLAN_LIST_FOLDER;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        File studyPlanListFolder \u003d new File(studyPlanListFolderString);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (studyPlanListFolder.exists()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            for (File file : Objects.requireNonNull(studyPlanListFolder.listFiles("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                (dir, name) -\u003e name.equals(StudyPlanList.STUDY_PLAN_LIST_FILE_NAME + FILE_EXTENSION)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ))) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    TreeMap studyPlanListTreeMapRaw \u003d gson.fromJson(new FileReader(file), TreeMap.class);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    TreeMap\u003cLocalDate, List\u003cInteger\u003e\u003e studyPlanListTreeMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    ((TreeMap\u003cString, List\u003cDouble\u003e\u003e) studyPlanListTreeMapRaw).forEach((key, value) -\u003e {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        List\u003cInteger\u003e integerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        for (Double index : value) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                            integerList.add(index.intValue());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        studyPlanListTreeMap.put(LocalDate.parse(key), integerList);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    StudyPlanList studyPlanList \u003d new StudyPlanList(studyPlanListTreeMap);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    LOGGER.info(\"File: \" + file.toString() + \" was loaded from disk.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    return studyPlanList;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    LOGGER.warning(\"File: \" + file.toString() + \" was not found when loading from disk.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    LOGGER.warning(\"File: \" + file.toString() + \" could not be loaded (bad formatting).\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new StudyPlanList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 107,
      "quinnyyy": 154
    }
  },
  {
    "path": "src/main/java/seedu/tp/studyplan/StudyPlanList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.storage.Savable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DATE_FIELD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EMPTY_SPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.INDEXES_FIELD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class StudyPlanList implements Savable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String STUDY_PLAN_LIST_FOLDER \u003d \"studyplans\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String STUDY_PLAN_LIST_FILE_NAME \u003d \"studyplanlist\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(StudyPlanList.class.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"study_plan_list.log\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private TreeMap\u003cLocalDate, List\u003cInteger\u003e\u003e studyPlanList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for StudyPlanList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public StudyPlanList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for StudyPlanList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param listOfStudyPlans the list of daily study plans to be added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public StudyPlanList(List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e listOfStudyPlans) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert listOfStudyPlans !\u003d null : \"Invalid null study plan list!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e entry : listOfStudyPlans) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            this.studyPlanList.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for StudyPlanList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param studyPlanListTreeMap the TreeMap to construct the StudyPlanList from"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public StudyPlanList(TreeMap\u003cLocalDate, List\u003cInteger\u003e\u003e studyPlanListTreeMap) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert studyPlanListTreeMap !\u003d null : \"Invalid null study plan list tree map!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanListTreeMap;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the StudyPlanList logger. Call once at the start of the program."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Updates the study plan list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the Ui class to be used for interaction with user"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list used for checking index boundary"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws InvalidFlashcardIndexException exception thrown when user input invalid indexes"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void updateStudyPlan(Ui ui, FlashcardList flashcardList) throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Updating study plan...\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate date \u003d ui.promptUserForRequiredLocalDate(DATE_FIELD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String[] indexesStr \u003d ui.promptUserForRequiredField(INDEXES_FIELD).split(EMPTY_SPACE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            for (String dateStr : indexesStr) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                int index \u003d Integer.parseInt(dateStr) - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                if (index \u003c 0 | index \u003e\u003d flashcardList.getTotalFlashcardNum()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                indexes.add(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.info(\"Throwing InvalidFlashcardIndexException in updateStudyPlan()...\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList.put(date, indexes);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ui.confirmStudyPlanUpdate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Study plan updated!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Deletes a study plan from the study plan list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui the Ui class to be used for interaction with user"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void deleteStudyPlan(Ui ui) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Deleting study plan...\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate date \u003d ui.promptUserForRequiredLocalDate(DATE_FIELD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (studyPlanList.remove(date) !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.confirmStudyPlanDeletion(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.info(\"Study plan for \" + date + \" deleted!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.sendStudyPlanDeletionFailedMessage(date);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.info(\"Study plan for \" + date + \" does not exist!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the list of study plans."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return a list containing all the study plans"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e getStudyPlanList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Getting study plan list...\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new ArrayList\u003c\u003e(studyPlanList.entrySet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the TreeMap from StudyPlanList."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return a TreeMap containing all the study plans"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public TreeMap\u003cLocalDate, List\u003cInteger\u003e\u003e getTreeMap() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.studyPlanList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof StudyPlanList)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList otherStudyPlan \u003d (StudyPlanList) obj;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e otherStudyPlanList \u003d otherStudyPlan.getStudyPlanList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e studyPlanList \u003d this.getStudyPlanList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (otherStudyPlanList.size() !\u003d studyPlanList.size()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c studyPlanList.size(); i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e entry \u003d studyPlanList.get(i);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e otherEntry \u003d otherStudyPlanList.get(i);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (!entry.getKey().equals(otherEntry.getKey())) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (!entry.getValue().equals(otherEntry.getValue())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Get the file name of the study plan lit."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the file name of the study plan list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return STUDY_PLAN_LIST_FOLDER + \"/\" + STUDY_PLAN_LIST_FILE_NAME;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 186,
      "g-lilian": 1
    }
  },
  {
    "path": "src/main/java/seedu/tp/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.commands.CommandFeedback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DETAIL_FIELD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Ui class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"ui.log\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Ui.class.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the Ui logger. Call once at the start of the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends welcome message to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendWelcomeMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Welcome to History Flashcard App!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends bye message to user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendByeMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Thanks for using History Flashcard!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prompts the user for a list of details for a flashcard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the list of details entered by user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cString\u003e promptUserForDetails() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for details...\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Optional\u003cString\u003e newDetailOptional \u003d promptUserForOptionalField(DETAIL_FIELD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        while (newDetailOptional.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            details.add(newDetailOptional.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            newDetailOptional \u003d promptUserForOptionalField(DETAIL_FIELD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning details...\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prompts the user for a piece of optional data used in the construction of a \u003ccode\u003eFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * The user can leave the line empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param fieldName string representing the name of the data to prompt for"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the user\u0027s input"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public Optional\u003cString\u003e promptUserForOptionalField(String fieldName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert !fieldName.isEmpty() : \"Invalid empty field name!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for optional field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Please enter \" + fieldName + \" (optional):\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning optional field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return input.equals(EMPTY_STRING) ? Optional.empty() : Optional.of(input);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prompts the user for a piece of required data used in the construction of a \u003ccode\u003eFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param fieldName string representing the name of the data to prompt for"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the user\u0027s input"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public String promptUserForRequiredField(String fieldName) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert !fieldName.isEmpty() : \"Invalid empty field name!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for required field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Please enter \" + fieldName + \":\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        while (input.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            System.out.println(\"That is a required field! Please enter again.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning required field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Prompts the user for a required date used in the construction of a \u003ccode\u003eFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param fieldName string representing name of the date to prompt for"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the parsed date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate promptUserForRequiredLocalDate(String fieldName) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert !fieldName.isEmpty() : \"Invalid empty field name!\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for required local date field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"Please enter \" + fieldName + \":\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate localDate \u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                localDate \u003d Parser.parseDate(input);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                System.out.println(\"That date format couldn\u0027t be parsed! Please enter again.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } while (localDate \u003d\u003d null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning required local date field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the response from the user after the user reviewed a flashcard."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcard the flashcard the user just reviewed"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the response given by the user"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String promptUserResponseForReviewing(Flashcard flashcard) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"Do you want to mark this flashcard as reviewed?\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        String input \u003d getNextLine().trim().toLowerCase();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends confirmation message for completion o random flashcard review."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param reviewedNumber        the number of flashcards reviewed during this self test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param totalUnreviewedNumber the total number of unreviewed flashcards"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmRandomFlashcardsReviewCompletion(int reviewedNumber, int totalUnreviewedNumber) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"You have just gone through all the flashcard(s).\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"You have marked \" + reviewedNumber + \" flashcard(s) as reviewed this time.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"You still have \" + totalUnreviewedNumber + \" unreviewed flashcard(s).\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends flashcard creation confirmation to user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcard the flashcard created"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void confirmFlashcardCreation(Flashcard flashcard) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"You\u0027ve successfully created the flashcard below:\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(flashcard);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends flashcard group creation confirmation to user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardGroup the flashcard group created"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmFlashcardGroupCreation(FlashcardGroup flashcardGroup) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardGroup !\u003d null : \"Invalid null flashcard group!\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"You\u0027ve successfully created the group below:\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(flashcardGroup);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends reset completion confirmation message to user."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmResetCompletion() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"All the flashcards have been reset as unreviewed successfully.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Prints confirmation that study plan has been updated."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void confirmStudyPlanUpdate() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Your study plan has been updated.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Prints confirmation that study plan has been deleted."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void confirmStudyPlanDeletion(LocalDate date) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Your study plan for \" + date + \" has been deleted.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prints message for failed study plan deletion."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendStudyPlanDeletionFailedMessage(LocalDate date) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Study plan for \" + date + \" does not exist!\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prints out exception to UI."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param exception the exception to be printed out"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void printException(Exception exception) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(\"Sending exception to user...\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(exception.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"An exception has occurred!\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(exception.getMessage());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends response to unknown command entered by user."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendUnknownCommandResponse() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending unknown command response to user...\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Sorry, I don\u0027t know how to help with that yet.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends response to invalid flashcard index entered by user."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendInvalidFlashcardIndexResponse() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending invalid flashcard index response to user...\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Your input contains invalid flashcard index(es)\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends logging setup failed message to user."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void sendLoggingSetupFailedMessage() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending logging set up failed response to user...\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"Logging setup failed! Logs will be printed to console instead of saved to file.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends invalid input format response to user."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void sendInvalidInputFormatResponse() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending invalid input format response to user...\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Please use the correct input format. Use \\\"help\\\" to view all commands.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends duplicate flashcard response to user."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void sendDuplicateFlashcardResponse() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending duplicate flashcard response to user...\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"Duplicate flashcard detected. The flashcard has not been added.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Display the feedback of a command to the user."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param commandFeedback the commandFeedback to display."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void showCommandFeedback(CommandFeedback commandFeedback) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending command feedback to user...\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!commandFeedback.isEmpty()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            System.out.println(commandFeedback);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends invalid date format response to user."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void sendInvalidDateFormatResponse() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending invalid date format response to user...\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"That date format couldn\u0027t be parsed!\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends reversed date order response to user."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void sendReversedDateOrderResponse() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending reversed date order response to user...\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"The start/birth date cannot be after the end/death date! Please try again.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends duplicate flashcard name response to user."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendDuplicateFlashcardNameResponse() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending duplicate flashcard name response to user...\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Flashcards with duplicate names are not allowed!\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Your newly created flashcard is not added. Please try again.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends Ui line break."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendUiLineBreak() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending Ui line break to user...\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"--------------------------------------------\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the next user input line."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return next line"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getNextLine() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Getting next user input line...\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 190,
      "sliu107": 42,
      "quinnyyy": 77,
      "g-lilian": 19
    }
  },
  {
    "path": "src/main/java/seedu/tp/utils/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String EVENT_FLASHCARD_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String PERSON_FLASHCARD_COMMAND \u003d \"person\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String OTHER_FLASHCARD_COMMAND \u003d \"other\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String LIST_REVIEWED_COMMAND \u003d \"list-reviewed\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String LIST_FLASHCARDS_IN_GROUP_COMMAND \u003d \"list-group\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String SHOW_COMMAND \u003d \"show\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String REVIEWED_COMMAND \u003d \"reviewed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String PRIORITY_COMMAND \u003d \"priority\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String LIST_PRIORITY_COMMAND \u003d \"list-priority\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String TIMELINE_COMMAND \u003d \"timeline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String GROUP_COMMAND \u003d \"group\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SHOW_GROUPS_COMMAND \u003d \"show-groups\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String DELETE_GROUP_COMMAND \u003d \"delete-group\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String ADD_FLASHCARD_TO_GROUP_COMMAND \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String UPDATE_STUDY_PLAN_COMMAND \u003d \"plan\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DELETE_STUDY_PLAN_COMMAND \u003d \"delete-plan\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DISPLAY_STUDY_PLAN_COMMAND \u003d \"show-plan\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String FIND_FLASHCARD_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESET_REVIEWED_COMMAND \u003d \"reset-reviewed\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RANDOM_COMMAND \u003d \"random\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String NAME_FIELD \u003d \"name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String START_DATE_FIELD \u003d \"start date\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String END_DATE_FIELD \u003d \"end date\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SUMMARY_FIELD \u003d \"summary\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DETAIL_FIELD \u003d \"detail\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String BIRTH_DATE_FIELD \u003d \"birth date\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DEATH_DATE_FIELD \u003d \"death date\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String DESCRIPTION_FIELD \u003d \"description\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String GROUP_ID_FIELD \u003d \"group id\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_FIELD \u003d \"indexes\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String INDEX_FIELD \u003d \"index\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DATE_FIELD \u003d \"date\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final int MS_TO_S_CONVERSION_FACTOR \u003d 1000;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final int ERROR_CODE \u003d -1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final int NORMAL_CODE \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String EMPTY_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String BULLET_POINT \u003d \"- \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String DIVIDER \u003d \" | \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String REGEX_MATCH_ALL_CHARACTER \u003d \".*\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String LOG_FOLDER \u003d \"logs/\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String SAVE_FOLDER \u003d \"historyflashcards\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 31,
      "sliu107": 12,
      "quinnyyy": 5,
      "g-lilian": 7
    }
  },
  {
    "path": "src/main/java/seedu/tp/utils/FlashcardObserver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Observer interface so containers can be notified when a flashcard is deleted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public interface FlashcardObserver {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Call this when a flashcard is deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param flashcard the flashcard that was deleted."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    void delete(Flashcard flashcard);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 15
    }
  },
  {
    "path": "src/main/java/seedu/tp/utils/LoggerUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class LoggerUtils {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Create a folder if it does not exist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param folderName String representing the folder name"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void createFolder(String folderName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File folder \u003d new File(folderName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 17
    }
  },
  {
    "path": "src/test/java/seedu/tp/MainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "quinnyyy": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/AddFlashcardToGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME_1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_5;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_6;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getAddFlashcardToGroupCommandWithInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getGroupFactoryWithInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class AddFlashcardToGroupCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardToGroupCommand_execute_Successfully() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup expectedGroup \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_3));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList expectedGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedGroupList.addFlashcardGroup(expectedGroup);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        //Test case1: Adding flashcards in the order as expected"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup actualGroup1 \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList actualGroupList1 \u003d new GroupList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        actualGroupList1.addFlashcardGroup(actualGroup1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand1 \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_3, fullFlashcardList, actualGroupList1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        addFlashcardToGroupCommand1.execute();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, actualGroupList1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        //Test case2: Adding flashcards in an different order"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup actualGroup2 \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList actualGroupList2 \u003d new GroupList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        actualGroupList2.addFlashcardGroup(actualGroup2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand2 \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_1, fullFlashcardList, actualGroupList2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        addFlashcardToGroupCommand2.execute();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, actualGroupList2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardToGroupCommand_invalidFlashcardIndex_throwsException()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList originalGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand groupCommand \u003d new GroupCommand(groupFactory, originalGroupList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupCommand.execute();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_2, fullFlashcardList, originalGroupList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            InvalidFlashcardIndexException.class, addFlashcardToGroupCommand::execute"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardToGroupCommand_unrecognizedFlashcardGroupType_throwsException()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList originalGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand groupCommand \u003d new GroupCommand(groupFactory, originalGroupList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupCommand.execute();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        //Test case1: Given an invalid group name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand1 \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_4, fullFlashcardList, originalGroupList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            UnrecognizedFlashcardGroupException.class, addFlashcardToGroupCommand1::execute"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        //Test case2: Given an negative group index"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand2 \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_5, fullFlashcardList, originalGroupList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            UnrecognizedFlashcardGroupException.class, addFlashcardToGroupCommand2::execute"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        //Test case3: Given an group index out of bound"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand3 \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_6, fullFlashcardList, originalGroupList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            UnrecognizedFlashcardGroupException.class, addFlashcardToGroupCommand3::execute"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 48,
      "sliu107": 99
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_delete_successful() throws InvalidFlashcardIndexException, DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedFlashcardList.addFlashcard(EVENT_FLASHCARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedFlashcardList.addFlashcard(OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList(fullFlashcardList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(flashcardList, 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedFlashcardList, flashcardList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_deleteFromEmptyList_throwsInvalidFlashcardIndexException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(emptyFlashcardList, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            deleteCommand::execute,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_deleteNegativeIndex_throwsInvalidFlashcardIndexException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(fullFlashcardList, -10);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            deleteCommand::execute,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_deleteOutOfBoundIndex_throwsInvalidFlashcardIndexException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(fullFlashcardList, 100);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            deleteCommand::execute,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 97,
      "sliu107": 1
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/DeleteGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.utils.InputTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME_1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME_2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEX_1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEX_2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEX_3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class DeleteGroupCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final FlashcardList FLASHCARD_LIST \u003d new FlashcardList(Arrays.asList(EVENT_FLASHCARD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        PERSON_FLASHCARD, OTHER_FLASHCARD));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final FlashcardGroup GROUP_1 \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, FLASHCARD_LIST,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        InputTestUtil.convertStringIndexesToIntArray(INDEXES_1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final FlashcardGroup GROUP_2 \u003d new FlashcardGroup(GROUP_NAME_2, DESCRIPTION, FLASHCARD_LIST,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        InputTestUtil.convertStringIndexesToIntArray(INDEXES_2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList emptyGroupList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        emptyGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcardGroup\u003e groups \u003d Arrays.asList(GROUP_1, GROUP_2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupList \u003d new GroupList(groups);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute_deleteGroupFromEmptyList_throwsUnrecognizedFlashcardGroupException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(emptyGroupList, INDEX_2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            UnrecognizedFlashcardGroupException.class,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            deleteGroupCommand::execute,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Expected UnrecognizedFlashcardGroupException\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute_deleteGroupByName_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList expectedGroupList \u003d new GroupList(Arrays.asList(GROUP_2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(groupList, GROUP_NAME_1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        deleteGroupCommand.execute();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, groupList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute_deleteGroupByIndex_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList expectedGroupList \u003d new GroupList(Arrays.asList(GROUP_1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(groupList, INDEX_1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        deleteGroupCommand.execute();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, groupList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute_deleteGroupByIndex_throwsUnrecognizedFlashcardGroupException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(emptyGroupList, INDEX_3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            UnrecognizedFlashcardGroupException.class,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            deleteGroupCommand::execute,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Expected UnrecognizedFlashcardGroupException\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "sliu107": 112
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/DeleteStudyPlanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_DELETE_STUDY_PLAN_INPUT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DeleteStudyPlanCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_1 \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_1, Arrays.asList(0, 1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_2 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_2, Arrays.asList(0, 2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final InputStream backupStdin \u003d System.in;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList emptyStudyPlanList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyStudyPlanList \u003d new StudyPlanList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e studyPlans \u003d Arrays.asList(STUDY_PLAN_ENTRY_1, STUDY_PLAN_ENTRY_2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList(studyPlans);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdin() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(backupStdin);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void deleteStudyPlanCommand_execute_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ByteArrayInputStream(SIMULATED_DELETE_STUDY_PLAN_INPUT.getBytes());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteStudyPlanCommand deleteStudyPlanCommand \u003d new DeleteStudyPlanCommand(new Ui(), studyPlanList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        deleteStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e expectedStudyPlanList \u003d Collections.singletonList(STUDY_PLAN_ENTRY_2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList expectedStudyPlan \u003d new StudyPlanList(expectedStudyPlanList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedStudyPlan, studyPlanList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void deleteStudyPlanCommand_executeEmpty_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ByteArrayInputStream(SIMULATED_DELETE_STUDY_PLAN_INPUT.getBytes());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteStudyPlanCommand deleteStudyPlanCommand \u003d new DeleteStudyPlanCommand(new Ui(), emptyStudyPlanList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        deleteStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e expectedStudyPlanList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList expectedStudyPlan \u003d new StudyPlanList(expectedStudyPlanList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedStudyPlan, emptyStudyPlanList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 78
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/DisplayStudyPlanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DisplayStudyPlanCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_1 \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_1, Arrays.asList(0, 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_2 \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_2, Arrays.asList(0, 2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e studyPlans \u003d Arrays.asList(STUDY_PLAN_ENTRY_1, STUDY_PLAN_ENTRY_2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList(studyPlans);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void displayStudyPlanCommand_execute_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedEventOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"Date: 2020-01-18\" + System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"1: \" + EVENT_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"3: \" + OTHER_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"Date: 2020-02-27\" + System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"1: \" + EVENT_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"2: \" + PERSON_FLASHCARD.getShortDescription());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand displayStudyPlanCommand \u003d new DisplayStudyPlanCommand(studyPlanList, fullFlashcardList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback displayStudyPlanCommandFeedback \u003d displayStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedEventOutput.toString(), displayStudyPlanCommandFeedback.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 90,
      "quinnyyy": 2
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/EventFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FULL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class EventFlashcardCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void eventFlashcardCommand_execute_addsFlashcardSuccessfully() throws UnrecognizedFlashcardTypeException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedFlashcardList.addFlashcard(new EventFlashcard(FLASHCARD_NAME, START_LOCAL_DATE, END_LOCAL_DATE, SUMMARY,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DETAILS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList actualFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        EventFlashcardCommand eventFlashcardCommand \u003d new EventFlashcardCommand(actualFlashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        eventFlashcardCommand.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcardList, actualFlashcardList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcardList.getFlashcardAtIdx(0) instanceof EventFlashcard);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 6,
      "sliu107": 2,
      "quinnyyy": 29
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void findCommand_execute_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"Here\u0027s the list of flashcards you are looking for:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"1: \" + EVENT_FLASHCARD.getShortDescription() + \" | ID: 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"2: \" + PERSON_FLASHCARD.getShortDescription() + \" | ID: 2\" + System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"3: \" + OTHER_FLASHCARD.getShortDescription() + \" | ID: 3\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(fullFlashcardList, \"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback findCommandFeedback \u003d findCommand.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), findCommandFeedback.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void findCommand_executeEmptyList_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String expectedOutput \u003d \"You have no flashcard matching your query!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(emptyFlashcardList, \"1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback findCommandFeedback \u003d findCommand.execute();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput, findCommandFeedback.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 78,
      "quinnyyy": 5
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/GroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME_1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getGroupFactoryWithInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void groupCommand_execute_Successfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup expectedGroup \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList expectedGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedGroupList.addFlashcardGroup(expectedGroup);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList actualGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand groupCommand \u003d new GroupCommand(groupFactory, actualGroupList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupCommand.execute();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, actualGroupList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 43,
      "sliu107": 30
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Execution test for help command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    Execution of HelpCommand only involves UI interaction with users and is tested in text-ui-test."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 10
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listCommand_execute_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"Here\u0027s the list of flashcards you have:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"1: \" + EVENT_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"2: \" + PERSON_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"3: \" + OTHER_FLASHCARD.getShortDescription());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(fullFlashcardList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback listCommandFeedback \u003d listCommand.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), listCommandFeedback.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listCommand_executeEmptyList_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String expectedOutput \u003d \"You have no flashcard at this moment!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(emptyFlashcardList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback listCommandFeedback \u003d listCommand.execute();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput, listCommandFeedback.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 71,
      "quinnyyy": 7,
      "g-lilian": 4
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ListFlashcardsInGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME_1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ListFlashcardsInGroupCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showGroupsCommand_execute_listFlashcardsInGroupSuccessfullyUsingName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup group \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        GroupList groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        groupList.addFlashcardGroup(group);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListFlashcardsInGroupCommand listFlashcardsInGroupCommand \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            new ListFlashcardsInGroupCommand(groupList, GROUP_NAME_1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final CommandFeedback listFlashcardsInGroupCommandFeedback \u003d listFlashcardsInGroupCommand.execute();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"Example flashcard group name 1 contains the following flashcards:\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + System.lineSeparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"- \" + EVENT_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"- \" + PERSON_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"- \" + OTHER_FLASHCARD.getShortDescription());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), listFlashcardsInGroupCommandFeedback.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showGroupsCommand_execute_listFlashcardsInGroupSuccessfullyUsingIndex() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup group \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_3));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        GroupList groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        groupList.addFlashcardGroup(group);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListFlashcardsInGroupCommand listFlashcardsInGroupCommand \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ListFlashcardsInGroupCommand(groupList, \"1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final CommandFeedback listFlashcardsInGroupCommandFeedback \u003d listFlashcardsInGroupCommand.execute();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"1 contains the following flashcards:\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + System.lineSeparator());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"- \" + EVENT_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"- \" + PERSON_FLASHCARD.getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"- \" + OTHER_FLASHCARD.getShortDescription());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), listFlashcardsInGroupCommandFeedback.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void execute_listGroupWithOutOfBoundIndex_catchesUnrecognizedFlashcardGroupException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup group \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_3));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        GroupList groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        groupList.addFlashcardGroup(group);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListFlashcardsInGroupCommand listFlashcardsInGroupCommand \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ListFlashcardsInGroupCommand(groupList, \"0\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback listFlashcardsInGroupCommandFeedback \u003d listFlashcardsInGroupCommand.execute();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Please enter a valid flashcard group name or index.\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            + \" Use \\\"show-groups\\\" to view all groups.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), listFlashcardsInGroupCommandFeedback.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void execute_listGroupWithFalseName_catchesUnrecognizedFlashcardGroupException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup group \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_3));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        GroupList groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        groupList.addFlashcardGroup(group);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListFlashcardsInGroupCommand listFlashcardsInGroupCommand \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ListFlashcardsInGroupCommand(groupList, \"badname\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback listFlashcardsInGroupCommandFeedback \u003d listFlashcardsInGroupCommand.execute();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Please enter a valid flashcard group name or index.\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            + \" Use \\\"show-groups\\\" to view all groups.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), listFlashcardsInGroupCommandFeedback.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 11,
      "sliu107": 7,
      "quinnyyy": 10,
      "g-lilian": 111
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ListPriorityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ListPriorityCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        EVENT_FLASHCARD.setPriorityLevel(Flashcard.PriorityLevel.HIGH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PERSON_FLASHCARD.setPriorityLevel(Flashcard.PriorityLevel.HIGH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        OTHER_FLASHCARD.setPriorityLevel(Flashcard.PriorityLevel.LOW);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Restores standard output and variables."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdoutAndVariables() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        EVENT_FLASHCARD.setPriorityLevel(Flashcard.PriorityLevel.DEFAULT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PERSON_FLASHCARD.setPriorityLevel(Flashcard.PriorityLevel.DEFAULT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        OTHER_FLASHCARD.setPriorityLevel(Flashcard.PriorityLevel.DEFAULT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void listPriorityCommand_execute_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Here\u0027s the list of flashcards with priority HIGH:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"1: Event 1 | Reviewed: X | *** | ID: 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"2: Person 1 | Reviewed: X | *** | ID: 2\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListPriorityCommand listPriorityCommand \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            new ListPriorityCommand(fullFlashcardList, Flashcard.PriorityLevel.HIGH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        CommandFeedback listPriorityCommandFeedback \u003d listPriorityCommand.execute();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedOutput.toString(), listPriorityCommandFeedback.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void listPriorityCommand_executeEmptyList_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String expectedOutput \u003d \"There are no flashcards with this priority level! \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + \"Use \\\"priority INDEX PRIORITY_LEVEL\\\" to assign priority to a flashcard.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListPriorityCommand listPriorityCommand \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            new ListPriorityCommand(emptyFlashcardList, Flashcard.PriorityLevel.MEDIUM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        CommandFeedback listPriorityCommandFeedback \u003d listPriorityCommand.execute();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedOutput, listPriorityCommandFeedback.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-lilian": 94
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ListReviewedCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListReviewedCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EVENT_FLASHCARD.setReviewStatus(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OTHER_FLASHCARD.setReviewStatus(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Restores standard output and variables."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdoutAndVariables() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EVENT_FLASHCARD.setReviewStatus(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OTHER_FLASHCARD.setReviewStatus(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listReviewedCommand_execute_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Here\u0027s the list of reviewed flashcards:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"1: Event 1 | Reviewed: / | Not indicated | ID: 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"2: Title 1 | Reviewed: / | Not indicated | ID: 3\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand listReviewedCommand \u003d new ListReviewedCommand(fullFlashcardList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback listReviewedCommandFeedback \u003d listReviewedCommand.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), listReviewedCommandFeedback.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listReviewedCommand_executeEmptyList_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String expectedOutput \u003d \"You have no reviewed flashcards! \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            + \"Use \\\"reviewed [INDEX]\\\" to mark a flashcard as reviewed.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand listReviewedCommand \u003d new ListReviewedCommand(emptyFlashcardList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback listReviewedCommandFeedback \u003d listReviewedCommand.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput, listReviewedCommandFeedback.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 82,
      "quinnyyy": 5,
      "g-lilian": 3
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/OtherFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.PARTIAL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class OtherFlashcardCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void otherFlashcardCommand_execute_addsFlashcardSuccessfully() throws UnrecognizedFlashcardTypeException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedFlashcardList.addFlashcard(new OtherFlashcard(FLASHCARD_NAME, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList actualFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(PARTIAL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        OtherFlashcardCommand otherFlashcardCommand \u003d new OtherFlashcardCommand(actualFlashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        otherFlashcardCommand.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcardList, actualFlashcardList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcardList.getFlashcardAtIdx(0) instanceof OtherFlashcard);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 5,
      "sliu107": 1,
      "quinnyyy": 27
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/PersonFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FULL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class PersonFlashcardCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void personFlashcardCommand_execute_addsFlashcardSuccessfully() throws UnrecognizedFlashcardTypeException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedFlashcardList.addFlashcard(new PersonFlashcard(FLASHCARD_NAME, START_LOCAL_DATE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList actualFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PersonFlashcardCommand personFlashcardCommand \u003d new PersonFlashcardCommand(actualFlashcardList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            flashcardFactory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        personFlashcardCommand.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcardList, actualFlashcardList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcardList.getFlashcardAtIdx(0) instanceof PersonFlashcard);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "sliu107": 3,
      "quinnyyy": 30
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/PriorityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.flashcard.Flashcard.PriorityLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class PriorityCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setDefaultPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedEventOutputDefault \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutputDefault.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedEventOutputDefault.append(\"Event 1 | New priority: Not indicated\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 0, PriorityLevel.DEFAULT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback priorityCommandFeedback \u003d priorityCommand.execute();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedEventOutputDefault.toString(), priorityCommandFeedback.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setHighPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedEventOutputHigh \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutputHigh.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedEventOutputHigh.append(\"Event 1 | New priority: ***\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 0, PriorityLevel.HIGH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback priorityCommandFeedback \u003d priorityCommand.execute();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedEventOutputHigh.toString(), priorityCommandFeedback.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setMediumPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedPersonOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedPersonOutput.append(\"Person 1 | New priority: **\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 1, PriorityLevel.MEDIUM);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback priorityCommandFeedback \u003d priorityCommand.execute();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedPersonOutput.toString(), priorityCommandFeedback.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setLowPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOtherOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedOtherOutput.append(\"Title 1 | New priority: *\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 2, PriorityLevel.LOW);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback priorityCommandFeedback \u003d priorityCommand.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOtherOutput.toString(), priorityCommandFeedback.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 2,
      "quinnyyy": 16,
      "g-lilian": 82
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/RandomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.NEWLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_RANDOM_COMMAND_INPUT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class RandomCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final InputStream backupStdin \u003d System.in;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void restoreStdinStdout() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(backupStdin);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void randomCommand_execute_Successfully() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardList expectedRandomList \u003d new FlashcardList(fullFlashcardList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.shuffle(expectedRandomList.getFlashcards(), new Random(System.currentTimeMillis() / 1000));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(0).toString()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"Do you want to mark this flashcard as reviewed?\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(NEWLINE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You have marked the following flashcard as Reviewed:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(0).getName()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(1).toString()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"Do you want to mark this flashcard as reviewed?\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(NEWLINE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(2).toString()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"Do you want to mark this flashcard as reviewed?\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(NEWLINE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You have marked the following flashcard as Reviewed:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(2).getName()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"You have just gone through all the flashcard(s).\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You have marked 2 flashcard(s) as reviewed this time.\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"You still have 1 unreviewed flashcard(s).\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator()).append((NEWLINE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(SIMULATED_RANDOM_COMMAND_INPUT.getBytes());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        RandomCommand randomCommand \u003d new RandomCommand(fullFlashcardList, new Ui());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        randomCommand.execute();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 14,
      "sliu107": 88,
      "g-lilian": 2
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ResetReviewedCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class ResetReviewedCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList.getFlashcardAtIdx(1).setReviewStatus(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList.getFlashcardAtIdx(2).setReviewStatus(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void resetReviewedCommand_execute_Successfully() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"All the flashcards have been reset as unreviewed successfully.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ResetReviewedCommand resetReviewedCommand \u003d new ResetReviewedCommand(ui, fullFlashcardList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        resetReviewedCommand.execute();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (Flashcard flashcard : fullFlashcardList.getFlashcards()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            assertFalse(flashcard.isReviewed());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 7,
      "sliu107": 75
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ReviewedCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ReviewedCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void reviewedCommand_execute_setReviewStatusSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"You have marked the following flashcard as Reviewed:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedOutput.append(\"Event 1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ReviewedCommand reviewedCommand \u003d new ReviewedCommand(flashcardList, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback reviewedCommandFeedback \u003d reviewedCommand.execute();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), reviewedCommandFeedback.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "quinnyyy": 4,
      "g-lilian": 60
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ShowCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS_BULLET_FORM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showCommand_execute_showEventFlashcardSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedEventOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"These are the flashcard details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Event name: Event 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Event period: July 31, 1843-December 25, 1892\" + System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Summary: This is an event summary\" + System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedEventOutput.append(DETAILS_BULLET_FORM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(fullFlashcardList, 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback showCommandFeedback \u003d showCommand.execute();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedEventOutput.toString(), showCommandFeedback.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showCommand_execute_showPersonFlashcardSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedPersonOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"These are the flashcard details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Person name: Person 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Born: July 31, 1843\" + System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Died: December 25, 1892\" + System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Summary: This is a person\u0027s summary\" + System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedPersonOutput.append(DETAILS_BULLET_FORM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(fullFlashcardList, 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback showCommandFeedback \u003d showCommand.execute();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedPersonOutput.toString(), showCommandFeedback.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showCommand_execute_showOtherFlashcardSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOtherOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"These are the flashcard details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Title: Title 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Summary: This is a summary\" + System.lineSeparator());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedOtherOutput.append(DETAILS_BULLET_FORM);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(fullFlashcardList, 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback showCommandFeedback \u003d showCommand.execute();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOtherOutput.toString(), showCommandFeedback.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void showCommand_getFlashcardFromInvalidIndex_throwsInvalidFlashcardIndexException()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        throws DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        flashcardList.addFlashcard(new OtherFlashcard(FLASHCARD_NAME, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(flashcardList, 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            showCommand::execute,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 39,
      "quinnyyy": 13,
      "g-lilian": 75
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ShowGroupsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ShowGroupsCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showGroupsCommand_execute_listGroupsSuccessfully() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        FlashcardGroup group1 \u003d new FlashcardGroup(\"Group 1\", DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        FlashcardGroup group2 \u003d new FlashcardGroup(\"Group 2\", DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        GroupList groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        groupList.addFlashcardGroup(group1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        groupList.addFlashcardGroup(group2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ShowGroupsCommand showGroupsCommand \u003d new ShowGroupsCommand(groupList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final CommandFeedback showGroupsCommandFeedback \u003d showGroupsCommand.execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Here are all existing groups:\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"1. Group 1 | Description: Example description\" + System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"2. Group 2 | Description: Example description\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), showGroupsCommandFeedback.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "quinnyyy": 2,
      "g-lilian": 83
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/TimelineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.ReversedDateOrderException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.BULLET_POINT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class TimelineCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void timelineCommand_execute_listsAllFlashcardsSuccessfully() throws DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.of(1834, 2, 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate middleDate \u003d LocalDate.of(1834, 7, 3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate lastDate \u003d LocalDate.of(1921, 7, 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new EventFlashcard(\"Middle\", middleDate, middleDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new OtherFlashcard(\"Bottom\", SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new EventFlashcard(\"Last\", lastDate, lastDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new PersonFlashcard(\"First\", firstDate, firstDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        expectedOutput.append(\"Flashcards sorted by date:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(3).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(0).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(2).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(1).getShortDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        TimelineCommand timelineCommand \u003d new TimelineCommand(flashcardList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        CommandFeedback timelineCommandFeedback \u003d timelineCommand.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), timelineCommandFeedback.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void timelineCommand_execute_listsRestrictedFlashcardsSuccessfully() throws DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.of(1834, 2, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate middleDate \u003d LocalDate.of(1834, 7, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate lastDate \u003d LocalDate.of(1921, 7, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        flashcardList.addFlashcard(new EventFlashcard(\"Middle\", middleDate, middleDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        flashcardList.addFlashcard(new OtherFlashcard(\"Bottom\", SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        flashcardList.addFlashcard(new EventFlashcard(\"Last\", lastDate, lastDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        flashcardList.addFlashcard(new PersonFlashcard(\"First\", firstDate, firstDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Listing flashcards from 1834-02-01 to 1834-07-03...\" + System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(3).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(0).getShortDescription());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            TimelineCommand timelineCommand \u003d new TimelineCommand(flashcardList,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                \"01-02-1834\", \"03-07-1834\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            CommandFeedback timelineCommandFeedback \u003d timelineCommand.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            assertEquals(expectedOutput.toString(), timelineCommandFeedback.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (InvalidDateFormatException | ReversedDateOrderException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 5,
      "quinnyyy": 58,
      "g-lilian": 30
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/UpdateStudyPlanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_UPDATE_STUDY_PLAN_INPUT_1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_UPDATE_STUDY_PLAN_INPUT_2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UpdateStudyPlanCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_1 \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_1, Arrays.asList(0, 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_2 \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_2, Arrays.asList(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final InputStream backupStdin \u003d System.in;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdin() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(backupStdin);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void updateStudyPlanCommand_executeFromEmpty_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ByteArrayInputStream(SIMULATED_UPDATE_STUDY_PLAN_INPUT_1.getBytes());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand updateStudyPlanCommand \u003d new UpdateStudyPlanCommand(new Ui(), studyPlanList,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            fullFlashcardList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        updateStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e expectedStudyPlanList \u003d Collections.singletonList(STUDY_PLAN_ENTRY_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList expectedStudyPlan \u003d new StudyPlanList(expectedStudyPlanList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedStudyPlan, studyPlanList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void updateStudyPlanCommand_execute_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ByteArrayInputStream(SIMULATED_UPDATE_STUDY_PLAN_INPUT_2.getBytes());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList(Collections.singletonList(STUDY_PLAN_ENTRY_1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand updateStudyPlanCommand \u003d new UpdateStudyPlanCommand(new Ui(), studyPlanList,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            fullFlashcardList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        updateStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e expectedStudyPlanList \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Arrays.asList(STUDY_PLAN_ENTRY_1, STUDY_PLAN_ENTRY_2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList expectedStudyPlan \u003d new StudyPlanList(expectedStudyPlanList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedStudyPlan, studyPlanList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 109
    }
  },
  {
    "path": "src/test/java/seedu/tp/flashcard/FlashcardFactoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.EVENT_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.OTHER_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.PERSON_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FULL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.NEWLINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.PARTIAL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class FlashcardFactoryTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_eventFlashcard_correctlyConstructed() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Flashcard expectedFlashcard \u003d new EventFlashcard(FLASHCARD_NAME, START_LOCAL_DATE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE, SUMMARY, DETAILS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard actualFlashcard \u003d flashcardFactory.create(EVENT_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcard instanceof EventFlashcard);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcard, actualFlashcard);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_personFlashcard_correctlyConstructed() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Flashcard expectedFlashcard \u003d new PersonFlashcard(FLASHCARD_NAME, START_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE, SUMMARY, DETAILS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard actualFlashcard \u003d flashcardFactory.create(PERSON_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcard instanceof PersonFlashcard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcard, actualFlashcard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_otherFlashcard_correctlyConstructed() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Flashcard expectedFlashcard \u003d new OtherFlashcard(FLASHCARD_NAME, SUMMARY, DETAILS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(PARTIAL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard actualFlashcard \u003d flashcardFactory.create(OTHER_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcard instanceof OtherFlashcard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcard, actualFlashcard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_unrecognizedFlashcardType_throwsException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final String[] unrecognizedFlashcardTypes \u003d {\"eventbds\", \"PeRson123\", \"OTHERASDF\", \"\", \"List\", NEWLINE};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d new FlashcardFactory(new Ui());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (String unrecognizedFlashcardType : unrecognizedFlashcardTypes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                UnrecognizedFlashcardTypeException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                () -\u003e flashcardFactory.create(unrecognizedFlashcardType)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 6,
      "quinnyyy": 60
    }
  },
  {
    "path": "src/test/java/seedu/tp/group/GroupFactoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getGroupFactoryWithInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupFactoryTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void group_correctly_formed() throws InvalidFlashcardIndexException, DuplicateFlashcardNameException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup expectedGroup \u003d new FlashcardGroup(GROUP_NAME_1, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup actualGroup \u003d groupFactory.form();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroup, actualGroup);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void groupFactory_invalidFlashcardIndex_throwsException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_2, fullFlashcardList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            InvalidFlashcardIndexException.class, groupFactory::form"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 46,
      "sliu107": 30
    }
  },
  {
    "path": "src/test/java/seedu/tp/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.AddFlashcardToGroupCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DeleteStudyPlanCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DisplayStudyPlanCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.EventFlashcardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.GroupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListReviewedCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.OtherFlashcardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.PersonFlashcardCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.PriorityCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ReviewedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ShowCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.UpdateStudyPlanCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidInputFormatException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "// Solution below referenced and adopted from:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "// https://github.com/se-edu/addressbook-level2/blob/master/test/java/seedu/addressbook/parser/ParserTest.java"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Initializes a new Parser for each test case."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardFactory \u003d new FlashcardFactory(ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupFactory \u003d new GroupFactory(ui, flashcardList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        parser \u003d new Parser(flashcardFactory, flashcardList, groupFactory, groupList, studyPlanList, ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_eventFlashcardCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"event\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EventFlashcardCommand expectedEventFlashcardCommand \u003d new EventFlashcardCommand(flashcardList,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardFactory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedEventFlashcardCommand, command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_eventFlashcardCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"EveNt\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EventFlashcardCommand expectedEventFlashcardCommand \u003d new EventFlashcardCommand(flashcardList,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardFactory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedEventFlashcardCommand, command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_personFlashcardCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"person\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        PersonFlashcardCommand expectedPersonFlashcardCommand \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new PersonFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedPersonFlashcardCommand, command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_personFlashcardCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"pERson\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        PersonFlashcardCommand expectedPersonFlashcardCommand \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new PersonFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedPersonFlashcardCommand, command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_otherFlashcardCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"other\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OtherFlashcardCommand expectedOtherFlashcardCommand \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new OtherFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOtherFlashcardCommand, command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_otherFlashcardCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"oThER\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OtherFlashcardCommand expectedOtherFlashcardCommand \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new OtherFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOtherFlashcardCommand, command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"list\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(flashcardList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListCommand, command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"LISt\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(flashcardList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListCommand, command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_showCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"show 1\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ShowCommand expectedShowCommand \u003d new ShowCommand(flashcardList, 0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedShowCommand, command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_showCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"SHow 1\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ShowCommand expectedShowCommand \u003d new ShowCommand(flashcardList, 0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedShowCommand, command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_priorityCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"priority 1 LOW\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand expectedPriorityCommand \u003d new PriorityCommand(flashcardList, 0,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Flashcard.PriorityLevel.LOW);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedPriorityCommand, command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_priorityCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"PriOriTY 1 LOW\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand expectedPriorityCommand \u003d new PriorityCommand(flashcardList, 0,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Flashcard.PriorityLevel.LOW);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedPriorityCommand, command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_reviewedCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"reviewed 1\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ReviewedCommand expectedReviewedCommand \u003d new ReviewedCommand(flashcardList, 0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedReviewedCommand, command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_reviewedCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"rEvIeWeD 1\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ReviewedCommand expectedReviewedCommand \u003d new ReviewedCommand(flashcardList, 0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedReviewedCommand, command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"delete 1\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand expectedDeleteCommand \u003d new DeleteCommand(flashcardList, 0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDeleteCommand, command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"dELEte 1\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand expectedDeleteCommand \u003d new DeleteCommand(flashcardList, 0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDeleteCommand, command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteCommand_wrongNumberFormat() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        // Solution below adopted from:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        // https://stackoverflow.com/questions/40268446/junit-5-how-to-assert-an-exception-is-thrown"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            () -\u003e parser.parseCommand(\"delete random\"),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_byeCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"bye\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByeCommand expectedByeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedByeCommand, command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_byeCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"ByE\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByeCommand expectedByeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedByeCommand, command);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_groupCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand expectedGroupCommand \u003d new GroupCommand(groupFactory, groupList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualGroupCommand \u003d parser.parseCommand(\"group\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupCommand, actualGroupCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_groupCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand expectedGroupCommand \u003d new GroupCommand(groupFactory, groupList);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualGroupCommand \u003d parser.parseCommand(\"gRouP\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupCommand, actualGroupCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_addFlashcardToGroupCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand expectedAddFlashcardToGroupCommand \u003d new AddFlashcardToGroupCommand(ui,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            groupList, flashcardList);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualAddFlashcardToGroupCommand \u003d parser.parseCommand(\"add\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedAddFlashcardToGroupCommand, actualAddFlashcardToGroupCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_addFlashcardToGroupCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand expectedAddFlashcardToGroupCommand \u003d new AddFlashcardToGroupCommand(ui,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            groupList, flashcardList);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualAddFlashcardToGroupCommand \u003d parser.parseCommand(\"aDd\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedAddFlashcardToGroupCommand, actualAddFlashcardToGroupCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_updateStudyPlanCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand expectedUpdateStudyPlanCommand \u003d new UpdateStudyPlanCommand(ui, studyPlanList,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualUpdateStudyPlanCommand \u003d parser.parseCommand(\"plan\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedUpdateStudyPlanCommand, actualUpdateStudyPlanCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_updateStudyPlanCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand expectedUpdateStudyPlanCommand \u003d new UpdateStudyPlanCommand(ui, studyPlanList,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualUpdateStudyPlanCommand \u003d parser.parseCommand(\"pLAn\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedUpdateStudyPlanCommand, actualUpdateStudyPlanCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteStudyPlanCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteStudyPlanCommand expectedDeleteStudyPlanCommand \u003d new DeleteStudyPlanCommand(ui, studyPlanList);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualDeleteStudyPlanCommand \u003d parser.parseCommand(\"delete-plan\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDeleteStudyPlanCommand, actualDeleteStudyPlanCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteStudyPlanCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteStudyPlanCommand expectedDeleteStudyPlanCommand \u003d new DeleteStudyPlanCommand(ui, studyPlanList);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualDeleteStudyPlanCommand \u003d parser.parseCommand(\"DelETe-plAn\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDeleteStudyPlanCommand, actualDeleteStudyPlanCommand);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_displayStudyPlanCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand expectedDisplayStudyPlanCommand \u003d new DisplayStudyPlanCommand(studyPlanList,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualDisplayStudyPlanCommand \u003d parser.parseCommand(\"show-plan\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDisplayStudyPlanCommand, actualDisplayStudyPlanCommand);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_displayStudyPlanCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand expectedDisplayStudyPlanCommand \u003d new DisplayStudyPlanCommand(studyPlanList,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualDisplayStudyPlanCommand \u003d parser.parseCommand(\"shOw-plAn\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDisplayStudyPlanCommand, actualDisplayStudyPlanCommand);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listReviewedCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand expectedListReviewedCommand \u003d new ListReviewedCommand(flashcardList);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualListReviewedCommand \u003d parser.parseCommand(\"list-reviewed\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListReviewedCommand, actualListReviewedCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listReviewedCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand expectedListReviewedCommand \u003d new ListReviewedCommand(flashcardList);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualListReviewedCommand \u003d parser.parseCommand(\"liST-revIewEd\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListReviewedCommand, actualListReviewedCommand);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_findCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(flashcardList, \"word\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualFindCommand \u003d parser.parseCommand(\"find word\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedFindCommand, actualFindCommand);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_findCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(flashcardList, \"word\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualFindCommand \u003d parser.parseCommand(\"FInD word\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedFindCommand, actualFindCommand);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_findCommand_throwsInvalidInputFormatException() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidInputFormatException.class,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            () -\u003e parser.parseCommand(\"find\"),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidInputFormatException\""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void parse_dateStrings_successfully() throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] dateStrings \u003d {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 07 1999\","
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 7 1999\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"3 7 1999\","
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"03 7 1843\","
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"07 0413\","
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"1942\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"1/8/2012\","
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"6/2012\","
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"1-8-2012\","
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"8-2012\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate[] expectedLocalDates \u003d {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1999, 7, 31),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1999, 7, 31),"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1999, 7, 3),"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1843, 7, 3),"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(413, 7, 1),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1942, 1, 1),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 8, 1),"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 6, 1),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 8, 1),"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 8, 1)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c dateStrings.length; i++) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate actualLocalDate \u003d Parser.parseDate(dateStrings[i]);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            assertEquals(expectedLocalDates[i], actualLocalDate);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void parse_invalidDateStrings_throwsInvalidDateFormatException() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] invalidDateStrings \u003d {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"asdf\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 13 1999\","
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"32 12 1234\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"07 413\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"33 02 0512\","
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"July 31 1999\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31/17 1999\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31/7-1999\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 7-1999\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (String invalidDateString : invalidDateStrings) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                InvalidDateFormatException.class,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                () -\u003e Parser.parseDate(invalidDateString)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 224,
      "sliu107": 44,
      "quinnyyy": 68,
      "g-lilian": 42
    }
  },
  {
    "path": "src/test/java/seedu/tp/utils/ExampleInputConstants.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ExampleInputConstants {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String BULLET_POINT \u003d \"- \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String FLASHCARD_NAME \u003d \"Example flashcard name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String GROUP_NAME_1 \u003d \"Example flashcard group name 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String GROUP_NAME_2 \u003d \"Example flashcard group name 2\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String UNIONIZED_GROUP_NAME \u003d \"blah blah blah\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String DESCRIPTION \u003d \"Example description\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String START_DATE \u003d \"31 07 1843\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String END_DATE \u003d \"25 12 1892\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final LocalDate START_LOCAL_DATE \u003d LocalDate.of(1843, 7, 31);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final LocalDate END_LOCAL_DATE \u003d LocalDate.of(1892, 12, 25);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String SUMMARY \u003d \"Example summary\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String DETAIL_1 \u003d \"Detail 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String DETAIL_2 \u003d \"Detail 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final List\u003cString\u003e DETAILS \u003d Arrays.asList(DETAIL_1, DETAIL_2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String DETAILS_BULLET_FORM \u003d \"* \" + DETAIL_1 + System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        + \"* \" + DETAIL_2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEX_1 \u003d \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEX_2 \u003d \"-1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEX_3 \u003d \"3\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEX_4 \u003d \"1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_1 \u003d \"1 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_2 \u003d \"1 3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_3 \u003d \"1 2 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INVALID_INDEXES \u003d \"0 -1 5\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DATE_1 \u003d \"27 02 2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DATE_2 \u003d \"18 01 2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final LocalDate LOCAL_DATE_1 \u003d LocalDate.of(2020, 2, 27);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final LocalDate LOCAL_DATE_2 \u003d LocalDate.of(2020, 1, 18);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESPONSE_1 \u003d \"YeS\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESPONSE_2 \u003d \"yes\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESPONSE_3 \u003d \"nO\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String FULL_SIMULATED_INPUT \u003d FLASHCARD_NAME + NEWLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + START_DATE + NEWLINE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + END_DATE + NEWLINE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + SUMMARY + NEWLINE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_1 + NEWLINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_2 + NEWLINE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String PARTIAL_SIMULATED_INPUT \u003d FLASHCARD_NAME + NEWLINE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + SUMMARY + NEWLINE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_1 + NEWLINE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_2 + NEWLINE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_GROUP_COMMAND_INPUT_1 \u003d GROUP_NAME_1 + NEWLINE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + INDEXES_1 + NEWLINE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_GROUP_COMMAND_INPUT_2 \u003d GROUP_NAME_1 + NEWLINE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + INVALID_INDEXES + NEWLINE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_1 \u003d INDEX_1 + NEWLINE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + GROUP_NAME_1 + NEWLINE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_2 \u003d INDEX_2 + NEWLINE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + GROUP_NAME_1 + NEWLINE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_3 \u003d INDEX_3 + NEWLINE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + INDEX_4 + NEWLINE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_4 \u003d INDEX_1 + NEWLINE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + UNIONIZED_GROUP_NAME + NEWLINE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_5 \u003d INDEX_1 + NEWLINE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + INDEX_2 + NEWLINE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_6 \u003d INDEX_1 + NEWLINE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + INDEX_3 + NEWLINE"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SIMULATED_UPDATE_STUDY_PLAN_INPUT_1 \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DATE_1 + NEWLINE + INDEXES_1 + NEWLINE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SIMULATED_UPDATE_STUDY_PLAN_INPUT_2 \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DATE_2 + NEWLINE + INDEX_1 + NEWLINE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SIMULATED_DELETE_STUDY_PLAN_INPUT \u003d DATE_1 + NEWLINE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_RANDOM_COMMAND_INPUT \u003d RESPONSE_1 + NEWLINE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + RESPONSE_3 + NEWLINE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + RESPONSE_2 + NEWLINE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 18,
      "sliu107": 53,
      "quinnyyy": 26,
      "g-lilian": 2
    }
  },
  {
    "path": "src/test/java/seedu/tp/utils/InputTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.AddFlashcardToGroupCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class InputTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final InputStream SYS_IN_BACKUP \u003d System.in;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Used to simulate user creation of a flashcard in JUnit testing environment."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param simulatedInput The desired input of the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return a \u003ccode\u003eFlashcardFactory\u003c/code\u003e object that can be used to create Flashcards based on simulatedInput"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static FlashcardFactory getFlashcardFactoryWithInput(String simulatedInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(simulatedInput.getBytes());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d new FlashcardFactory(new Ui());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setIn(SYS_IN_BACKUP);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return flashcardFactory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Used to simulate user creation of a group in JUnit testing environment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param simulatedInput The desired input of the use"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList  The flashcard list used to create the group"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return a \u003ccode\u003eGroupFactory\u003c/code\u003e object that can be used to create Flashcard Group based on simulatedInput"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static GroupFactory getGroupFactoryWithInput(String simulatedInput, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(simulatedInput.getBytes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupFactory groupFactory \u003d new GroupFactory(new Ui(), flashcardList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(SYS_IN_BACKUP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupFactory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Used to simulate user creation of an addFlashcardToGroupCommand in JUnit testing environment."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param simulatedInput    The desired input of the use"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList     The flashcard list used to create the group"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param originalGroupList The group list before the addition"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return A \u003ccode\u003eaddFlashcardToGroupCommand\u003c/code\u003e object based on simulatedInput"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static AddFlashcardToGroupCommand getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        String simulatedInput, FlashcardList flashcardList, GroupList originalGroupList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(simulatedInput.getBytes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return new AddFlashcardToGroupCommand(new Ui(), originalGroupList, flashcardList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Convert an String of the indexes given by the user to an int array."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param givenIndexes The string indexes given by user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return The int array of indexes based on the users input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static int[] convertStringIndexesToIntArray(String givenIndexes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        String[] idxs \u003d givenIndexes.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int[] indexes \u003d new int[idxs.length];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            indexes[i] \u003d Integer.parseInt(idxs[i]) - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 50,
      "quinnyyy": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "asdf"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Meiji Restoration"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "1868"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1868"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Turning point in Japanese history"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "End of Shogunate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Centralization of power"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Functional end of Samurai Class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Meiji Restoration"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "1900"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "1855"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "1900"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "2000"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "testing summary"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Late August, 1881"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "08 1881"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "30/06/1997"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore was never proud or vain."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "He could find something to value in anyone, however apparently insignificant or wretched"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Dumbledore became most famous for his defeat of Gellert Grindelwald, the discovery of the twelve uses of dragon\u0027s blood, and his work on alchemy with Nicolas Flamel"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Albus Dummydore"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "2000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "1000"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "2010"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "2011"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "Albus Dummydore was never proud or vain."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "other"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Resurrection Stone"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The Resurrection Stone is one of the fabled Deathly Hallows."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "In \"The Tale of the Three Brothers\", it was the second Hallow created, supposedly by Death himself"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "It was bestowed upon Cadmus Peverell after he requested, as his bounty, something with the power to recall loved ones from Death"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "According to legend, whoever reunited it with the other two Hallows (the Elder Wand and the Cloak of Invisibility) would become the Master of Death"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 01-01-2020 01-01-2020"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 01-01-1868 01-01-2020"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 01-01-1850 20-05-1870"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline asdfghjkl"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 9999-99-99 9999-99-99"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 1999 1998"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "person"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Quinn"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "31/07/1870"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "24/02/1943"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "8)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "timeline"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete-plan"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "13/11/2020"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/01/2020"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1 3"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/03/2020"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete-plan"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random date"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "03/11/2020"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete-plan"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/03/2020"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete-plan"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/01/2020"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01-01-2020"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1 2 3"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "02-02-2020"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2 3"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-groups"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "delete-group 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "group"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "New Flashcard Group"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Blah Blah Blah"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random random"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "group"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "This is a group for HP related stuff."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2 3"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Group that does not exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sliu107"
        },
        "content": "2"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sliu107"
        },
        "content": "1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sliu107"
        },
        "content": "add"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sliu107"
        },
        "content": "4"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "5"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sliu107"
        },
        "content": "add"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sliu107"
        },
        "content": "4"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "add"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "group"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Harry Potter Flashcards Copy"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": "This is a group for HP related stuff."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "2 3"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": "add"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "1"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "Harry Potter Flashcards Copy"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find Meiji"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find o"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find Stone"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete random"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list-reviewed"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "reviewed 1"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list-reviewed"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "reviewed 2"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list-reviewed"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "show 1"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "priority 2 MEDIUM"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-priority asdfghjkl"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-priority HIGH"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-priority DEFAULT"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-groups"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group 1"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group Harry Potter Flashcards"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sliu107"
        },
        "content": "delete-group Harry Potter Flashcards"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sliu107"
        },
        "content": "list-group 1"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sliu107"
        },
        "content": "delete-group 1"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group abc"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group abc def"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "group"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "This is a group for HP related stuff."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2 3"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-groups"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 94,
      "sliu107": 22,
      "quinnyyy": 19,
      "g-lilian": 35
    }
  },
  {
    "path": "text-ui-test/input2.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-groups"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "cd build/libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "if exist \"historyflashcards\" ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "rmdir /s /q historyflashcards"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "java -jar -ea %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 6,
      "-": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "rm -rf logs/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "rm -rf historyflashcards/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "java -jar -ea $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    echo \"Test 1 passed!\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    echo \"Test 1 failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "java -jar -ea $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input2.txt \u003e ACTUAL2.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "diff EXPECTED2.TXT ACTUAL2.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    echo \"Test 2 passed!\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    echo \"Test 2 failed!\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 17,
      "-": 18
    }
  }
]
