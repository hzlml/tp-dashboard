[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    mainClassName \u003d \"seedu.tp.Main\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    archiveBaseName \u003d \"history-flashcard\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    archiveVersion \u003d \"0.1.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 2,
      "sliu107": 1,
      "quinnyyy": 1,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Guo Lilian | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![](https://picsum.photos/200) | Zhilin Huang | [Github](https://github.com/Zhilin-Huang) | [Portfolio](docs/team/zhilinhuang.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shiyue Liu | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Quinn Meurer | [Github](https://github.com/quinnyyy) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 1,
      "quinnyyy": 1,
      "g-lilian": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 Implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Design"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Architecture"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "{Description of overall architecture}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Ui Component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "{Description for Ui Component}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Parser Component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "{Description for Parser Component}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Storage Component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "{Description for Storage Component}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Implementation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "#### Study Plan Feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "##### Proposed Implementation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The Study Plan feature is facilitated by `StudyPlanList`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Internally, it implements a `TreeMap`, with date as key and the list of flashcard indexes to study as value. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Key-value pairs in the `TreeMap` are sorted by dates."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#updateStudyPlan()` - Updates the study plan list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `StudyPlanList#getStudyPlanList()` - Gets the list of study plans."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Given below is an example usage scenario and how the study plan mechanism behaves at each step."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 1. The user launches the application and an empty `StudyPlanList` is initialized."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 2. The user executes `plan` command and the `updateStudyPlan` operation is invoked. The application prompts the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "user for date and the corresponding list of flashcards indexes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `updateStudyPlan` operation works:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![updateStudyPlanSequenceDiagram](images/updateStudyPlanSequenceDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Step 3. The user executes `show-plan` command and the `getStudyPlanList` operation is invoked. The application"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "displays the user\u0027s study plan list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The following sequence diagram shows how the `getStudyPlanList` operation works:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "![getStudyPlanListSequenceDiagram](images/getStudyPlanListSequenceDiagram.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "## Product Scope"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "History Flashcard (HF) is for those who are studying history subjects to create flashcards which summarize "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "the most important information for historical events, figures and artifacts. HF is optimized for those who "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "prefer to use a simple Command Line Interface (CLI). "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "History is a subject that usually relies on heavy memorisation of a large amount of content. In order to "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "make revision easier for history students, HF includes features that help with memory retention and organises "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "information in a way that makes it convenient to review."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "In HF, information can be entered in the form of flashcards with different fields, such as the name of the "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "historical event/person, the relevant dates, and a summary. Flashcards can be categorised into user-defined groups"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " to enable students to organise their knowledge better. Users can also create daily study plans."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " In addition, the user can shuffle and display random flashcards for revision."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|add a Person flashcard|record the details about a historical figure|"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|add an Event flashcard|record the details about a historical event|"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|add an Other flashcard|record the details about any other historical item|"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|list all flashcards|get an overview of all my existing flashcards|"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|delete a flashcard|remove the flashcards that I no longer need|"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|view all the fields of a flashcard|review the details of a specific flashcard|"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|mark a flashcard as Reviewed|keep track of my learning progress|"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|assign priority to flashcards|identify the relative importance of flashcards for review|"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|view a timeline of all events and people|better organize my knowledge|"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|make groups for flashcards|group related flashcards together for more organized revision|"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v1.0|student|see all the commands available|find out what commands are available, and their format|"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|set a daily study plan|keep myself motivated to review flashcards every day|"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|list the flashcards which have been reviewed|keep track of my learning progress|"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|list all existing flashcard groups|view all the groups I have created|"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|list flashcards from a particular group|quickly identify the flashcards belonging to a group|"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|search for flashcards using a keyword|quickly find the flashcard I am looking for|"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|save flashcards to a storage file|flashcards are not lost when I exit the app|"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|read in flashcards from a storage file|flashcards can be loaded when I enter the app|"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|save my daily study plan to a storage file|study plans are not lost when I exit the app|"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|read in study plans from a storage file|study plans can be loaded when I enter the app|"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|save flashcard groups to a storage file|groups are not lost when I exit the app|"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|read in flashcard groups from a storage file|groups can be loaded when I enter the app|"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|restrict the timeline to a fixed period|keep track of flashcards belonging to a certain time period|"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "|v2.0|student|shuffle and display random flashcards|test my knowledge using random flashcards|"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for Manual Testing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 50,
      "g-lilian": 36,
      "-": 31
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "History Flashcard (HF) is for those who are studying history subjects to create flashcards which summarize the most important information for historical events, figures and artifacts. HF is optimized for those who prefer to use a simple Command Line Interface (CLI). It includes features that help with memory retention and make information convenient to review, e.g. the ability to organize historical events into timelines and store summarized biographies of history figures."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2. Down the latest version of `HistoryFlashcard` from [here](https://github.com/AY1920S2-CS2113-T14-1/tp/releases)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "3. Move the JAR file to the folder you want to use as the home folder for `HistoryFlashcard `."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "4. Double-click the file to start the application or run the command `java -jar [path-to-history-flashcard-jar-file]` from terminal"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "5. Type in commands and start using `HistoryFlashcard`!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add other t/TITLE`, `TITLE` is a parameter which can be used as add t/Some Title."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Items in square brackets are optional e.g `t/TITLE [d/DETAILS]` can be used as `t/Some Title d/Some Details` or `t/Some Title`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Items with `...`​ after them can be used multiple times including zero times e.g. `[d/DETAILS]...​` can be omitted or used as `d/Detail 1 d/Detail 2`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Parameters can be added in any order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Getting Help: `help`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Gets a list of command available for us."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Adding an Event Flashcard: `event`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds an Event Flashcard."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `event`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `EVENT_NAME`: can be in a natural language format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `START_TIME`: has to be in valid date format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `END_TIME`: has to be in valid date format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `SUMMARY`: can be in a natural language format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DETAIL`: can be in a natural language format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "There can be 0 or multiple `DETAIL` added for an Event Flashcard."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "event"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Meiji Restoration"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1868"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1868"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Turning point in Japanese history"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "End of Shogunate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Centralization of power"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Functional end of Samurai Class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Adding a Person Flashcard: `person`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds a Person Flashcard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `person` "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `PERSON_NAME `: can be in a natural language format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `BIRTH_DAY`: has to be in valid date format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DEATH_DAY`: has to be in valid date format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `SUMMARY`: can be in a natural language format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DETAIL`: can be in a natural language format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "There can be 0 or multiple `DETAIL` added for a Person Flashcard."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Late August, 1881"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "08 1881"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "30/06/1997"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore was never proud or vain."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "He could find something to value in anyone, however apparently insignificant or wretched"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Dumbledore became most famous for his defeat of Gellert Grindelwald, the discovery of the twelve uses of dragon\u0027s blood, and his work on alchemy with Nicolas Flamel"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Adding an Other Flashcard: `other`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds an Other Flashcard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `other`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `NAME`: can be in a natural language format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `SUMMARY`: can be in a natural language format"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DETAIL`: can be in a natural language format"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "There can be 0 or multiple `DETAIL` added for a Person Flashcard."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Resurrection Stone"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The Resurrection Stone is one of the fabled Deathly Hallows."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "In \"The Tale of the Three Brothers\", it was the second Hallow created, supposedly by Death himself"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "It was bestowed upon Cadmus Peverell after he requested, as his bounty, something with the power to recall loved ones from Death"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "According to legend, whoever reunited it with the other two Hallows (the Elder Wand and the Cloak of Invisibility) would become the Master of Death"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Listing All Flashcards: `list`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Lists all flashcards in the application."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Deleting a Flashcard: `delete`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Deletes the flashcard at the specified index in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- The `INDEX` must be in a valid number format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Showing a Flashcard: `show`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Shows all fields from the flashcard at the specified index in the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `show INDEX`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- The `INDEX` must be in a valid number format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`show 3`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Showing Timeline: `timeline`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Shows the timeline of all events and people."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `timeline`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Grouping Flashcards: `group`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Creates a new group of flashcards."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `group`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `NAME`: can be in a natural language format"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `DESCRIPTION`: can be in a natural language format"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `INDEXES`: a list of index numbers separated by space"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "group"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "This is a group for HP related stuff."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2 3"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Adding Flashcard to Group: `add`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Adds a flashcard to a group."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `add`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The application will then prompt the user to enter the following fields:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `GROUP_NAME`: can be in a natural language format"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Assigning Priority to a Flashcard: `priority`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Assign Priority Level `LOW`, `MEDIUM`, `HIGH` to the flashcard at the specified index."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `priority INDEX PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `PRIORITY_LEVEL`: must be one of `LOW`, `MEDIUM`, `HIGH`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`priority 2 MEDIUM`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "### Marking Flashcard as Reviewed: `reviewed`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Marks a flashcard at the specified index as reviewed."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Format: `reviewed INDEX`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- `INDEX`: must be in a valid number format"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "`reviewed 1`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Well, write the User Guide in active voice anyway."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Help: `help`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Add event flashcard: `event`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Add person flashcard: `person`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Add other flashcard: `other`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- List all flashcards: `list`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Delete a flashcard: `delete INDEX`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Show a flashcard: `show INDEX`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Show timeline: `timeline`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Creates a new group: `group`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Adds a flashcard to a group: `add`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Assigns priority to a flashcard: `priority INDEX PRIORITY_LEVEL`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "- Mark a flashcard as reviewed: `reviewed INDEX`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 204,
      "-": 33
    }
  },
  {
    "path": "docs/team/zhilinhuang.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "# Zhilin Huang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 2
    }
  },
  {
    "path": "src/main/java/seedu/tp/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidInputFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.utils.LoggerUtils;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Main class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Program entry point."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param args CLI args (unused)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void setup() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcardFactory \u003d new FlashcardFactory(ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupFactory \u003d new GroupFactory(ui, flashcardList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        parser \u003d new Parser(flashcardFactory, flashcardList, groupFactory, groupList, studyPlanList, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LoggerUtils.createFolder(LOG_FOLDER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Flashcard.setupLogger();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            FlashcardFactory.setupLogger();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            FlashcardList.setupLogger();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            FlashcardGroup.setupLogger();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            StudyPlanList.setupLogger();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Command.setupLogger();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Ui.setupLogger();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Parser.setupLogger();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ui.sendLoggingSetupFailedMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void runLoop() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.sendWelcomeMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        boolean isBye \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        while (!isBye) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                String fullCommand \u003d ui.getNextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                Command command \u003d parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                isBye \u003d command.isBye();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendUnknownCommandResponse();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (InvalidFlashcardIndexException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.sendInvalidFlashcardIndexResponse();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (InvalidInputFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                ui.sendInvalidInputFormatResponse();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (DuplicateFlashcardException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                ui.sendDuplicateFlashcardResponse();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (HistoryFlashcardException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                ui.printException(e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.sendByeMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 39,
      "sliu107": 6,
      "quinnyyy": 50,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/AddFlashcardToGroupCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class AddFlashcardToGroupCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs an addFlashcardToGroupCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param ui            the ui need to pass to the execution method"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupList     the groupList where the flashcard wants to be added in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList the flashcardList where the flashcard is in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public AddFlashcardToGroupCommand(Ui ui, GroupList groupList, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Adding a flashcard to an existing group...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupList.addFlashcardToOneGroup(ui, flashcardList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Added the flashcard to the group.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (!(obj instanceof AddFlashcardToGroupCommand)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand otherAddFlashcardToGroupCommand \u003d (AddFlashcardToGroupCommand) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return this.getFlashcardList().equals(otherAddFlashcardToGroupCommand.getFlashcardList())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \u0026\u0026 this.getGroupList().equals(otherAddFlashcardToGroupCommand.getGroupList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupList getGroupList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 50,
      "g-lilian": 5
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Bye command used in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks whether the command is a bye command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return Boolean value true value since this is a bye command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Ready to quit the program...\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return obj instanceof ByeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 27,
      "sliu107": 1
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command used in the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(Command.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"command.log\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the command logger. Call once at the start of the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public abstract void execute()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        throws HistoryFlashcardException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks whether the command is a bye command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return Boolean value indicating whether or not the command is a bye command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 48
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for delete command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList flashcard list for the command to execute on"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param index         index in the delete command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public DeleteCommand(FlashcardList flashcardList, int index, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets index in the delete command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the delete command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Deleting flashcard at index: \" + index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardList.deleteFlashcard(ui, index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Deleted flashcard at index: \" + index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherDeleteCommand.getIndex() \u003d\u003d this.index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026\u0026 otherDeleteCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 60,
      "sliu107": 5
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/DisplayStudyPlanCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DisplayStudyPlanCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    FlashcardList flashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for DisplayStudyPlanCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class to be used by the command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param studyPlanList the study plan to be displayed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list to be used by the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public DisplayStudyPlanCommand(Ui ui, StudyPlanList studyPlanList, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert studyPlanList !\u003d null : \"Invalid null StudyPlan!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing DisplayStudyPlanCommand...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.displayStudyPlan(studyPlanList, flashcardList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"DisplayStudyPlanCommand executed!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof DisplayStudyPlanCommand)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand otherDisplayStudyPlanCommand \u003d (DisplayStudyPlanCommand) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.ui.equals(otherDisplayStudyPlanCommand.ui)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.studyPlanList.equals(otherDisplayStudyPlanCommand.studyPlanList)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.flashcardList.equals(otherDisplayStudyPlanCommand.flashcardList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 51
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/EventFlashcardCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EVENT_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command to create an event flashcard."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class EventFlashcardCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for Event Flashcard Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list for the command to execute on"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory the flashcard factory to be used in the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public EventFlashcardCommand(FlashcardList flashcardList, FlashcardFactory flashcardFactory) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardFactory !\u003d null : \"Invalid null FlashcardFactory!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the event flashcard command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Creating an Event flashcard and adding it to the flashcard list...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcardList.addFlashcard(flashcardFactory.create(EVENT_FLASHCARD_COMMAND));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Created an Event flashcard and added it to the flashcard list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof EventFlashcardCommand)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EventFlashcardCommand otherEventFlashcardCommand \u003d (EventFlashcardCommand) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherEventFlashcardCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 50,
      "g-lilian": 5
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list to be used by the command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the Ui to be used for interaction with user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param keyword       the specified keyword"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FindCommand(FlashcardList flashcardList, Ui ui, String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert keyword !\u003d null : \"Invalid null keyword!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing FindCommand...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardsWithKeyword \u003d flashcardList.getAllFlashcardsWithKeyword(keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.listAllFlashcardsWithId(flashcardsWithKeyword);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Finished executing FindCommand!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof FindCommand)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand otherFindCommand \u003d (FindCommand) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.ui.equals(otherFindCommand.ui)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.flashcardList.equals(otherFindCommand.flashcardList)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.keyword.equals(otherFindCommand.keyword);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 55
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/GroupCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Commands to create a new group."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs a group command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupFactory groupFactory the groupCommand use"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupList    groupList where the groupCommand execute on"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupCommand(GroupFactory groupFactory, GroupList groupList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupFactory !\u003d null : \"Invalid null GroupFactory!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupFactory \u003d groupFactory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Creating a new group...\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupList.addFlashcardGroup(groupFactory.form());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Created a new group.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (!(obj instanceof GroupCommand)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand otherGroupCommand \u003d (GroupCommand) obj;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return this.getGroupList().equals(otherGroupCommand.getGroupList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupList getGroupList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "sliu107": 44,
      "g-lilian": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * HelpCommand class to print the help message which shows the list of possible user commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for HelpCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui the instance for user interaction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public HelpCommand(Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui.sendHelpMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Showed the help message.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 17,
      "g-lilian": 11
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to list all existing flashcards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for list command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList flashcard list for the command to execute on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class to be used by the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public ListCommand(FlashcardList flashcardList, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the list command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Listing all existing flashcards...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.listAllFlashcards(flashcardList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Listed all existing flashcards.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof ListCommand)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListCommand otherListCommand \u003d (ListCommand) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherListCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 50,
      "g-lilian": 6
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ListFlashcardsInGroupCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to list all flashcards in a specified group."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ListFlashcardsInGroupCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private String groupIdentifier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for ListGroupCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupList       list of all existing groups"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui              instance for user interaction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupIdentifier name or index of the group to list all flashcards for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public ListFlashcardsInGroupCommand(GroupList groupList, Ui ui, String groupIdentifier) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !groupIdentifier.isEmpty() : \"Invalid empty groupIdentifier!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.groupIdentifier \u003d groupIdentifier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Executing ListGroupCommand...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            FlashcardList flashcardsInGroup \u003d groupList.getFlashcardsInGroup(groupIdentifier);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui.listFlashcardsInGroup(flashcardsInGroup, groupIdentifier);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (UnrecognizedFlashcardGroupException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui.sendInvalidFlashcardGroupResponse();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"UnrecognizedFlashcardGroupException occurred when executing ListGroupCommand.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Finished executing ListGroupCommand!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ListFlashcardsInGroupCommand)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ListFlashcardsInGroupCommand otherListFlashcardsInGroupCommand \u003d (ListFlashcardsInGroupCommand) obj;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return this.ui.equals(otherListFlashcardsInGroupCommand.ui)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \u0026\u0026 this.groupList.equals(otherListFlashcardsInGroupCommand.groupList)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \u0026\u0026 this.groupIdentifier.equals(otherListFlashcardsInGroupCommand.groupIdentifier);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-lilian": 60
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ListReviewedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListReviewedCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for ListReviewedCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list for the command to execute on"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class for handling interaction with the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public ListReviewedCommand(FlashcardList flashcardList, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing ListReviewedCommand...\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e reviewedFlashcards \u003d flashcardList.getAllReviewedFlashcards();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ui.listAllFlashcardsWithId(reviewedFlashcards);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Finished executing ListReviewedCommand!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof ListReviewedCommand)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand otherListReviewedCommand \u003d (ListReviewedCommand) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.ui.equals(otherListReviewedCommand.ui)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.flashcardList.equals(otherListReviewedCommand.flashcardList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 50
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/OtherFlashcardCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.OTHER_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command to create an other flashcard."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class OtherFlashcardCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for Other Flashcard Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list for the command to execute on"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory the flashcard factory to be used in the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public OtherFlashcardCommand(FlashcardList flashcardList, FlashcardFactory flashcardFactory) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardFactory !\u003d null : \"Invalid null FlashcardFactory!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the other flashcard command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Creating an Other flashcard and adding it to the flashcard list...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcardList.addFlashcard(flashcardFactory.create(OTHER_FLASHCARD_COMMAND));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Created an Other flashcard and added it to the flashcard list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof OtherFlashcardCommand)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OtherFlashcardCommand otherOtherFlashcardCommand \u003d (OtherFlashcardCommand) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherOtherFlashcardCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 50,
      "g-lilian": 5
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/PersonFlashcardCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.PERSON_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Command to create a person flashcard."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class PersonFlashcardCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for Person Flashcard Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list for the command to execute on"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory the flashcard factory to be used in the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public PersonFlashcardCommand(FlashcardList flashcardList, FlashcardFactory flashcardFactory) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardFactory !\u003d null : \"Invalid null FlashcardFactory!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard list in the person flashcard command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Creating a Person flashcard and adding it to the flashcard list...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcardList.addFlashcard(flashcardFactory.create(PERSON_FLASHCARD_COMMAND));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Created a Person flashcard and added it to the flashcard list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof PersonFlashcardCommand)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        PersonFlashcardCommand otherPersonFlashcardCommand \u003d (PersonFlashcardCommand) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return otherPersonFlashcardCommand.getFlashcardList().equals(this.flashcardList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 50,
      "g-lilian": 5
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/PriorityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to configure priority level of a flashcard."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class PriorityCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private Flashcard.PriorityLevel pl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for the PriorityCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param index         index of the flashcard to show"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui            instance for user interaction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param pl            priority level to set the flashcard to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public PriorityCommand(FlashcardList flashcardList, int index, Ui ui, Flashcard.PriorityLevel pl) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.pl \u003d pl;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets index in the priority command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets the priority level in the priority command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the priority level"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public Flashcard.PriorityLevel getPl() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return pl;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Setting the priority for the flashcard \" + index + \"...\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            flashcardList.getFlashcardAtIdx(index).setPriorityLevel(pl);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Set the priority for the flashcard \" + index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui.confirmFlashcardPriority(flashcardList.getFlashcardAtIdx(index));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"IndexOutOfBoundsException occurred when executing the priority command.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof PriorityCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand otherPriorityCommand \u003d (PriorityCommand) obj;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return otherPriorityCommand.getIndex() \u003d\u003d this.index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \u0026\u0026 otherPriorityCommand.getPl().equals(this.pl);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 2,
      "g-lilian": 79
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/RandomCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class RandomCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    FlashcardList flashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public RandomCommand(FlashcardList flashcardList, Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Randomizing flashcards for reviewing ...\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardList.reviewRandomFlashcards(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Randomized flashcards and finished a review\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 22
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ResetReviewedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class ResetReviewedCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public ResetReviewedCommand(Ui ui, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Resetting all the flashcards as unreviewed...\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardList.resetAsUnreviewed(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"Reset all the flashcards as unreviewed.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 22
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ReviewedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to mark a flashcard as Reviewed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ReviewedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for ReviewedCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param index         index of the flashcard to show"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui            instance for user interaction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public ReviewedCommand(FlashcardList flashcardList, int index, Ui ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets index in the reviewed command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Setting flashcard \" + index + \" as reviewed...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            flashcard.setReviewStatus(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.info(\"Set flashcard \" + index + \" as reviewed.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            flashcardList.setTotalReviewedNumber(flashcardList.getTotalReviewedNumber() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui.confirmFlashcardReview(flashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"InvalidFlashcardIndexException occurred when executing the reviewed command.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ReviewedCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ReviewedCommand otherReviewedCommand \u003d (ReviewedCommand) obj;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return otherReviewedCommand.getIndex() \u003d\u003d this.index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 2,
      "g-lilian": 66
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to show the details of a specified flashcard."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for the ShowCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param index         index of the flashcard to show"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui            instance for user interaction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public ShowCommand(FlashcardList flashcardList, int index, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets index in the show command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void execute() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Showing the information of flashcard \" + index + \"...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui.showFlashcard(flashcard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            LOGGER.info(\"Showed the information of the flashcard \" + index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.warning(\"InvalidFlashcardIndexException occurred when executing the show command.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ShowCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ShowCommand otherShowCommand \u003d (ShowCommand) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return otherShowCommand.getIndex() \u003d\u003d this.index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 2,
      "g-lilian": 65
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/ShowGroupsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to list all existing groups."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ShowGroupsCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for ShowGroupsCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupList list of flashcard groups"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui        instance for user interaction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public ShowGroupsCommand(GroupList groupList, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Executing ShowGroupsCommand...\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ui.listAllGroups(groupList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"ShowGroupsCommand executed!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (!(obj instanceof ShowGroupsCommand)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ShowGroupsCommand otherShowGroupsCommand \u003d (ShowGroupsCommand) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return this.groupList.equals(otherShowGroupsCommand.groupList)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \u0026\u0026 this.ui.equals(otherShowGroupsCommand.ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-lilian": 47
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/TimelineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " * Command to show a timeline for the existing flashcards."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class TimelineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for TimelineCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui            instance for user interaction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TimelineCommand(FlashcardList flashcardList, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.startDate \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for TimelineCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui            instance for user interaction"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param startDate     the date to start listing flashcards from (inclusive)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param endDate       the date after which to stop listing flashcards from"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public TimelineCommand(FlashcardList flashcardList, Ui ui, String startDate, String endDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert startDate !\u003d null : \"Invalid null startDate!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert endDate !\u003d null : \"Invalid null endDate!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            this.startDate \u003d Parser.parseDate(startDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            this.endDate \u003d Parser.parseDate(endDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            System.out.println(\"That date format couldn\u0027t be parsed!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Listing the flashcards in order sorted by time...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ui.listAllFlashcardsOrdered(flashcardList, startDate, endDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Listed the flashcards in order sorted by time.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 18,
      "g-lilian": 47
    }
  },
  {
    "path": "src/main/java/seedu/tp/commands/UpdateStudyPlanCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UpdateStudyPlanCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for UpdateStudyPlanCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the UI class to be used in the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param studyPlanList the StudyPlanList to be updated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public UpdateStudyPlanCommand(Ui ui, StudyPlanList studyPlanList, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert studyPlanList !\u003d null : \"Invalid null StudyPlan!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Executing UpdateStudyPlanCommand...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList.updateStudyPlan(ui, flashcardList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"UpdateStudyPlanCommand executed!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof UpdateStudyPlanCommand)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand otherUpdateStudyPlanCommand \u003d (UpdateStudyPlanCommand) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return this.ui.equals(otherUpdateStudyPlanCommand.ui)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.studyPlanList.equals(otherUpdateStudyPlanCommand.studyPlanList)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \u0026 this.flashcardList.equals(otherUpdateStudyPlanCommand.flashcardList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 51
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/DuplicateFlashcardException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DuplicateFlashcardException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/HistoryFlashcardException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Exceptions specific to the History Flashcard app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public abstract class HistoryFlashcardException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public HistoryFlashcardException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public HistoryFlashcardException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 14
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/InvalidDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class InvalidDateFormatException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/InvalidFlashcardIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class InvalidFlashcardIndexException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 5
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/InvalidInputFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class InvalidInputFormatException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "g-lilian": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UnknownCommandException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 7
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/UnrecognizedFlashcardGroupException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Unrecognized flashcard group Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class UnrecognizedFlashcardGroupException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public UnrecognizedFlashcardGroupException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 10
    }
  },
  {
    "path": "src/main/java/seedu/tp/exceptions/UnrecognizedFlashcardTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Unrecognized flashcard type exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UnrecognizedFlashcardTypeException extends HistoryFlashcardException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public UnrecognizedFlashcardTypeException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 4,
      "quinnyyy": 6
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/EventFlashcard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DIVIDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.END_DATE_FIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.START_DATE_FIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SUMMARY_FIELD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Event flashcard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class EventFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs an \u003ccode\u003eEventFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public EventFlashcard(String name, LocalDate startDate, LocalDate endDate, String summary, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(name, summary, details);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert startDate !\u003d null : \"Invalid null startDate!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert endDate !\u003d null : \"Invalid null endDate!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !summary.isEmpty() : \"Invalid empty summary!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new EventFlashcard: \" + this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Creates an \u003ccode\u003eEventFlashcard\u003c/code\u003e  by prompting the user to enter info."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui used to prompt the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the created \u003ccode\u003eEventFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static EventFlashcard createEventFlashcard(Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate startDate \u003d ui.promptUserForRequiredLocalDate(START_DATE_FIELD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate endDate \u003d ui.promptUserForRequiredLocalDate(END_DATE_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String summary \u003d ui.promptUserForRequiredField(SUMMARY_FIELD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d ui.promptUserForDetails();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new EventFlashcard(name, startDate, endDate, summary, details);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the start date of this event flashcard."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the start date of this event flashcard"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the end date of this event flashcard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the end date of this event flashcard"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets a short description of the flashcard, without summary or details."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return String of shortDescription of the flashcard"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getShortDescription() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String shortDescription \u003d this.name + DIVIDER + this.startDate + \" to \" + this.endDate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + DIVIDER + this.getReviewIcon() + DIVIDER + this.getPriorityAsString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return shortDescription;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the string representation of event flashcard."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Event name: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        stringBuilder.append(\"Event period: \").append(Parser.localDateToString(startDate)).append(\"-\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            .append(Parser.localDateToString(endDate)).append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Summary: \").append(summary).append(System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Details:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(getDetailsString(details));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!(obj instanceof EventFlashcard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        // Will have to make sure in the future to check for null here if we make other optional fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        EventFlashcard otherEventFlashcard \u003d (EventFlashcard) obj;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return super.equals(obj) \u0026\u0026 startDate.equals(otherEventFlashcard.getStartDate())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \u0026\u0026 endDate.equals(otherEventFlashcard.getEndDate());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Compares the current instance with the flashcard passed in."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcard the flashcard to be compared with"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the comparison result"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public int compareTo(Flashcard flashcard) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcard instanceof EventFlashcard) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            EventFlashcard eventFlashcard \u003d (EventFlashcard) flashcard;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return startDate.compareTo(eventFlashcard.getStartDate());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (flashcard instanceof PersonFlashcard) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            PersonFlashcard personFlashcard \u003d (PersonFlashcard) flashcard;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return startDate.compareTo(personFlashcard.getBirthDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 38,
      "quinnyyy": 84,
      "g-lilian": 17
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/Flashcard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Abstract flashcard class to represent basic properties of flashcard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class Flashcard implements Comparable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final String FILE_PATH \u003d LOG_FOLDER + \"flashcard.log\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(Flashcard.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String summary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected List\u003cString\u003e details;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    protected boolean isReviewed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    protected PriorityLevel pl;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected Flashcard(String name, String summary, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.isReviewed \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.pl \u003d PriorityLevel.DEFAULT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set up the flashcard logger. Call once at the start of the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static String getDetailsString(List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder detailsStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            detailsStringBuilder.append(\"* \").append(detail).append(System.lineSeparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return detailsStringBuilder.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the name of the flashcard."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the name of the flashcard"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Sets the review status of the flashcard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param isReviewed true if flashcard has been reviewed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void setReviewStatus(boolean isReviewed) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.isReviewed \u003d isReviewed;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Returns icon based on flashcard\u0027s review status."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return \"Y\" for Yes if reviewed, else \"N\" for No."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getReviewIcon() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return (isReviewed ? \"/\" : \"X\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Returns boolean value indicating whether or not the flashcards has been reviewed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return true if flashcard is reviewed, else false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isReviewed() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return isReviewed;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Sets the flashcard\u0027s priority level."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param pl priority level to be set"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void setPriorityLevel(PriorityLevel pl) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        this.pl \u003d pl;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Returns the number of \"*\"s based on flashcard\u0027s priority level."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return \"*\"s to indicate priority level"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getPriorityAsString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        switch (pl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"*\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"**\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"***\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return \"Not indicated\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Gets the summary of the flashcard."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the summary of the flashcard."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Gets the details of the flashcard."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the details of the flashcard"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public List\u003cString\u003e getDetails() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * To be implemented by child classes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return a shortened description of the flashcard"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public abstract String getShortDescription();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!(obj instanceof Flashcard)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) obj;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return name.equals(otherFlashcard.getName()) \u0026\u0026 summary.equals(otherFlashcard.getSummary())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \u0026\u0026 details.equals(otherFlashcard.getDetails());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract int compareTo(Flashcard flashcard);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public enum PriorityLevel {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOW,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        MEDIUM,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        HIGH,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DEFAULT"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 40,
      "quinnyyy": 76,
      "g-lilian": 57
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/FlashcardFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Flashcard factory class to create flashcards given string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class FlashcardFactory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static Logger LOGGER \u003d Logger.getLogger(FlashcardFactory.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for FlashcardFactory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui the instance for user interaction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public FlashcardFactory(Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set up the FlashcardFactory logger. Call once at the start of the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(Flashcard.FILE_PATH, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Create a \u003ccode\u003eFlashcard\u003c/code\u003e given a string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param flashcardType string representing type of flashcard to create"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return constructed \u003ccode\u003eFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws UnrecognizedFlashcardTypeException if the string is not a valid flashcard type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Flashcard create(String flashcardType) throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        switch (flashcardType.toLowerCase()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            EventFlashcard eventFlashcard \u003d EventFlashcard.createEventFlashcard(ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.confirmFlashcardCreation(eventFlashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return eventFlashcard;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"person\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            PersonFlashcard personFlashcard \u003d PersonFlashcard.createPersonFlashcard(ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.confirmFlashcardCreation(personFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return personFlashcard;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"other\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            OtherFlashcard otherFlashcard \u003d OtherFlashcard.createOtherFlashcard(ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            ui.confirmFlashcardCreation(otherFlashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return otherFlashcard;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LOGGER.info(\"Received unknown flashcard type: \" + flashcardType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new UnrecognizedFlashcardTypeException(\"Flashcard types: event, person, other\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 10,
      "quinnyyy": 52,
      "g-lilian": 7
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/FlashcardList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.ReviewedCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.MS_TO_S_CONVERSION_FACTOR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.REGEX_MATCH_ALL_CHARACTER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * List of flashcards."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class FlashcardList {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"flashcard_list.log\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(FlashcardList.class.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private int totalReviewedNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for FlashcardList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.totalReviewedNumber \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for FlashcardList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the list of flashcards to be added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList(List\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null flashcard list!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcards.addAll(flashcardList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Copy constructor for FlashcardList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Note that this is a shallow copy."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list to be copied from"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public FlashcardList(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardList.getTotalFlashcardNum(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            this.flashcards.add(flashcardList.getFlashcardAtIdx(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the FlashcardList logger. Call once at the start of the program."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcard the task to be added to the list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the updated flashcardList with new flashcard just be added in"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardList addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        flashcards.add(flashcard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Added flashcard \" + flashcard.getName() + \" to list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Deletes a flashcard from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param index the index of the flashcard to be deleted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void deleteFlashcard(Ui ui, int index) throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Flashcard flashcard \u003d flashcards.remove(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            LOGGER.info(\"Deleted flashcard \" + flashcard.getName() + \" from list.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            ui.confirmFlashcardDeletion(flashcard);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.warning(\"IndexOutOfBoundsException occurred when deleting flashcard at index \" + index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.warning(\"Throwing InvalidFlashcardIndexException...\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Resets all the flashcards as unreviewed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param ui the ui used to communicate with the user"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void resetAsUnreviewed(Ui ui) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert flashcards !\u003d null : \"Invalid flashcardList\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert ui !\u003d null : \"Invalid ui\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (Flashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            flashcard.setReviewStatus(false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui.confirmResetCompletion();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Randomize the flashcard list to help user for reviewing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the random flashcard list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardList reviewRandomFlashcards(Ui ui) throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assert flashcards !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardList randomFlashcards \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.shuffle(randomFlashcards.getFlashcards(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                new Random(System.currentTimeMillis() / MS_TO_S_CONVERSION_FACTOR));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        LOGGER.info(\"The flashcards have been randomized.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int reviewedNumber \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (Flashcard flashcard : randomFlashcards.getFlashcards()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            System.out.println(flashcard);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (flashcard.isReviewed) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                System.out.println(\"You have already reviewed this flashcard.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } else if (ui.promptUserResponseForReviewing(flashcard).equals(\"yes\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                ReviewedCommand reviewedCommand \u003d new ReviewedCommand(this,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    flashcards.indexOf(flashcard), ui);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                reviewedCommand.execute();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                reviewedNumber++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int totalUnreviewedNumber \u003d flashcards.size() - totalReviewedNumber;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui.confirmRandomFlashcardsReviewCompletion(reviewedNumber, totalUnreviewedNumber);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return randomFlashcards;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Return whether or not this FlashcardList contains specified flashcard."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param flashcard the flashcard to check"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not this FlashcardList contains specified flashcard"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean contains(Flashcard flashcard) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the flashcard at a specific index."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param idx the index."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the flashcard at the specified index"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public Flashcard getFlashcardAtIdx(int idx) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcards.get(idx);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Checks if the flashcard list is empty."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return boolean value indicating whether or not the flashcard list is empty"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcards.isEmpty();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the total number of flashcards in the list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return total number of flashcards in the list"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public int getTotalFlashcardNum() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcards.size();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the number of reviewed flashcards."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the total number of reviewed flashcards at this moment"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public int getTotalReviewedNumber() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return totalReviewedNumber;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Updates the number of reviewed flashcards."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param totalReviewedNumber the updated number of reviewed flashcards"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setTotalReviewedNumber(int totalReviewedNumber) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.totalReviewedNumber \u003d totalReviewedNumber;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Gets the list of flashcards."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the list of flashcards"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public List\u003cFlashcard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets all reviewed flashcards with IDs."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the list of reviewed flashcards with IDs"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e getAllReviewedFlashcards() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Getting all reviewed flashcards...\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e reviewedFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size(); i++) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Flashcard flashcard \u003d flashcards.get(i);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (flashcard.isReviewed()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                reviewedFlashcards.add(new AbstractMap.SimpleEntry\u003c\u003e(i, flashcard));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Got all reviewed flashcards!\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return reviewedFlashcards;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets all flashcards which contain a certain keyword with IDs."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param keyword the specified keyword"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the list of flashcards containing the specified keyword with IDs"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e getAllFlashcardsWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Getting all flashcards with keyword \" + keyword + \"...\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardsWithKeyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size(); i++) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Flashcard flashcard \u003d flashcards.get(i);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (flashcard.getName().matches(REGEX_MATCH_ALL_CHARACTER + keyword + REGEX_MATCH_ALL_CHARACTER)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                flashcardsWithKeyword.add(new AbstractMap.SimpleEntry\u003c\u003e(i, flashcard));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Got all flashcards with keyword \" + keyword + \"!\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return flashcardsWithKeyword;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof FlashcardList)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardList otherFlashcards \u003d (FlashcardList) obj;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (this.getTotalFlashcardNum() !\u003d otherFlashcards.getTotalFlashcardNum()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d new ArrayList\u003cFlashcard\u003e(this.getFlashcards());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.sort(flashcardList);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e otherFlashcardList \u003d new ArrayList\u003cFlashcard\u003e(otherFlashcards.getFlashcards());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.sort(otherFlashcardList);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int idx \u003d 0; idx \u003c this.getTotalFlashcardNum(); idx++) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (!flashcardList.get(idx).equals(otherFlashcardList.get(idx))) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 195,
      "sliu107": 79,
      "quinnyyy": 20,
      "g-lilian": 3
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/OtherFlashcard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.Constants.DIVIDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SUMMARY_FIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Other flashcard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class OtherFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs an \u003ccode\u003eOtherFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public OtherFlashcard(String name, String summary, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        super(name, summary, details);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !summary.isEmpty() : \"Invalid empty summary!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new OtherFlashcard: \" + this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Creates an \u003ccode\u003eOtherFlashcard\u003c/code\u003e by prompting the user to enter info."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui used to prompt the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the created \u003ccode\u003eOtherFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static OtherFlashcard createOtherFlashcard(Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String summary \u003d ui.promptUserForRequiredField(SUMMARY_FIELD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d ui.promptUserForDetails();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new OtherFlashcard(name, summary, details);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets a short description of the flashcard, without summary or details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return String of shortDescription of the flashcard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getShortDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String shortDescription \u003d this.name + DIVIDER"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + this.getReviewIcon() + DIVIDER + this.getPriorityAsString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return shortDescription;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the string representation of this flashcard."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Title: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Summary: \").append(summary).append(System.lineSeparator());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Details:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(getDetailsString(details));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public int compareTo(Flashcard flashcard) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcard instanceof OtherFlashcard) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 24,
      "quinnyyy": 34,
      "g-lilian": 16
    }
  },
  {
    "path": "src/main/java/seedu/tp/flashcard/PersonFlashcard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.BIRTH_DATE_FIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DEATH_DATE_FIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.Constants.DIVIDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SUMMARY_FIELD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Person flashcard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class PersonFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate birthDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate deathDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs a \u003ccode\u003ePersonFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public PersonFlashcard(String name, LocalDate birthDate, LocalDate deathDate, String summary,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                           List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(name, summary, details);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert birthDate !\u003d null : \"Invalid null birthDate!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert deathDate !\u003d null : \"Invalid null deathDate!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !summary.isEmpty() : \"Invalid empty summary!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.birthDate \u003d birthDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.deathDate \u003d deathDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new PersonFlashcard: \" + this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Creates a \u003ccode\u003ePersonFlashcard\u003c/code\u003e by prompting the user to enter info."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui used to prompt the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the created \u003ccode\u003ePersonFlashcard\u003c/code\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static PersonFlashcard createPersonFlashcard(Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate birthDate \u003d ui.promptUserForRequiredLocalDate(BIRTH_DATE_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate deathDate \u003d ui.promptUserForRequiredLocalDate(DEATH_DATE_FIELD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String summary \u003d ui.promptUserForRequiredField(SUMMARY_FIELD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d ui.promptUserForDetails();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new PersonFlashcard(name, birthDate, deathDate, summary, details);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the birth date of this person flashcard."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the birth date of this person flashcard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getBirthDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return birthDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the death date of this person flashcard."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the death date of this person flashcard"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate getDeathDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return deathDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the string representation of this flashcard."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Person name: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        stringBuilder.append(\"Born: \").append(Parser.localDateToString(birthDate)).append(System.lineSeparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        stringBuilder.append(\"Died: \").append(Parser.localDateToString(deathDate)).append(System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Summary: \").append(summary).append(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(\"Details:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        stringBuilder.append(getDetailsString(details));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Gets a short description of the flashcard, without summary or details."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return String of shortDescription of the flashcard"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public String getShortDescription() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String shortDescription \u003d this.name + DIVIDER + this.birthDate + \" to \" + this.deathDate"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + DIVIDER + this.getReviewIcon() + DIVIDER + this.getPriorityAsString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        return shortDescription;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!(obj instanceof PersonFlashcard)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        // Will have to make sure in the future to check for null here if we make other optional fields."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PersonFlashcard otherEventFlashcard \u003d (PersonFlashcard) obj;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return super.equals(obj) \u0026\u0026 birthDate.equals(otherEventFlashcard.getBirthDate())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \u0026\u0026 deathDate.equals(otherEventFlashcard.getDeathDate());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public int compareTo(Flashcard flashcard) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcard instanceof EventFlashcard) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            EventFlashcard eventFlashcard \u003d (EventFlashcard) flashcard;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return birthDate.compareTo(eventFlashcard.getStartDate());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (flashcard instanceof PersonFlashcard) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            PersonFlashcard personFlashcard \u003d (PersonFlashcard) flashcard;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return birthDate.compareTo(personFlashcard.getBirthDate());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 28,
      "quinnyyy": 88,
      "g-lilian": 18
    }
  },
  {
    "path": "src/main/java/seedu/tp/group/FlashcardGroup.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.DESCRIPTION_FIELD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.INDEXES_FIELD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * A group of flashcards which have some of the same characteristics."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class FlashcardGroup {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(FlashcardGroup.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"flashcard_group.log\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList groupCards \u003d new FlashcardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs a \u003ccode\u003eFlashcardGroup\u003c/code\u003e using some existing cards from the users original list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param name         the name of the group."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param description  brief description of the group."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param originalList the original list of flashcards."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param indexes      the indexes of the flashcards which are going to be added to this group."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup(String name, String description, FlashcardList originalList, int[] indexes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert originalList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !name.isEmpty() : \"Invalid empty name!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert !description.isEmpty() : \"Invalid empty description!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int i : indexes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            groupCards.addFlashcard(originalList.getFlashcardAtIdx(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Constructed new Flashcard Group: \" + this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set up the Flashcard Group logger. Call once at the start of the program."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Creates an \u003ccode\u003eflashcardGroup\u003c/code\u003e  by prompting the user to enter info."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param ui            used to prompt the user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList the flashcardList which used to create the new group"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the new flashcardGroup"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @throws InvalidFlashcardIndexException if the indexes given by the users are not integers or out of bounds"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static FlashcardGroup createGroup(Ui ui, FlashcardList flashcardList) throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String name \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String description \u003d ui.promptUserForRequiredField(DESCRIPTION_FIELD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String[] indexesGiven \u003d ui.promptUserForRequiredField(INDEXES_FIELD).split(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            assert indexesGiven !\u003d null : \"Invalid null indexes\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            int[] indexes \u003d new int[indexesGiven.length];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                indexes[i] \u003d Integer.parseInt(indexesGiven[i]) - 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new FlashcardGroup(name, description, flashcardList, indexes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Adds a flashcard to an existing group."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcard the flashcard to be added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @throws DuplicateFlashcardException if the flashcard is already in the group"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void addFlashcardToTheGroup(Flashcard flashcard) throws DuplicateFlashcardException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (groupCards.contains(flashcard)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        groupCards.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LOGGER.info(\"Added \" + flashcard.getName() + \" to \" + name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the string of a group including some basic information."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return String induction of the group."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"Group name: \").append(name).append(System.lineSeparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"Group description: \").append(description).append(System.lineSeparator());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"There are \").append(groupCards.getTotalFlashcardNum())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(\" flashcards in this group.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(System.lineSeparator());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardList getGroupCards() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupCards;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (!(obj instanceof FlashcardGroup)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup otherFlashcardGroup \u003d (FlashcardGroup) obj;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return name.equals(otherFlashcardGroup.getName()) \u0026\u0026 description.equals(otherFlashcardGroup.getDescription())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \u0026\u0026 groupCards.equals(otherFlashcardGroup.getGroupCards());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 9,
      "sliu107": 112,
      "quinnyyy": 27,
      "g-lilian": 4
    }
  },
  {
    "path": "src/main/java/seedu/tp/group/GroupFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Group factory class to create flashcard group given string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupFactory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Constructor for the GroupFactory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param ui            instance for user interaction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList list containing all flashcards"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupFactory(Ui ui, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Forms a new group and adds it to groupList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the FlashcardGroup just created"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @throws InvalidFlashcardIndexException if the flashcards used to create the group have invalid index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup form() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup group \u003d FlashcardGroup.createGroup(ui, flashcardList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui.confirmFlashcardGroupCreation(group);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 30,
      "g-lilian": 9
    }
  },
  {
    "path": "src/main/java/seedu/tp/group/GroupList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.INDEX_FIELD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.NAME_FIELD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Lists of flashcard groups."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private List\u003cFlashcardGroup\u003e groups;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Constructs a list of groups."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public GroupList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groups \u003d new ArrayList\u003cFlashcardGroup\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Adds a new group to the group list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param group the new group to be added to the list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardGroup(FlashcardGroup group) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groups.add(group);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Adds a flashcard to an existing group."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param ui used to prompt the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @throws InvalidFlashcardIndexException if the user gives an index not an integer of out of bound"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardToOneGroup(Ui ui, FlashcardList flashcardList) throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String indexGiven \u003d ui.promptUserForRequiredField(INDEX_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            assert !indexGiven.isEmpty() : \"Invalid index\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            int flashcardIndex \u003d Integer.parseInt(indexGiven) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            String groupName \u003d ui.promptUserForRequiredField(NAME_FIELD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            Flashcard flashcard \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            FlashcardGroup group \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            for (FlashcardGroup g : groups) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                if (g.getName().equals(groupName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    flashcard \u003d flashcardList.getFlashcardAtIdx(flashcardIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    g.addFlashcardToTheGroup(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    group \u003d g;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (group !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                ui.confirmFlashcardAdditionToGroup(group, flashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new UnrecognizedFlashcardGroupException(\"There is no such group.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public List\u003cFlashcardGroup\u003e getGroups() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groups;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Returns a FlashcardList of flashcards belonging to the group specified by groupName."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupIdentifier either the name or the index of the flashcard group"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @return FlashcardList of flashcards belonging to the group"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public FlashcardList getFlashcardsInGroup(String groupIdentifier) throws UnrecognizedFlashcardGroupException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        FlashcardList flashcardsInGroup;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        for (FlashcardGroup g : groups) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            if (g.getName().equals(groupIdentifier)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                flashcardsInGroup \u003d g.getGroupCards();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return flashcardsInGroup;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            int groupIndex \u003d Integer.parseInt(groupIdentifier) - 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            FlashcardGroup g \u003d groups.get(groupIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return g.getGroupCards();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            throw new UnrecognizedFlashcardGroupException(\"Invalid group!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the flashcard group at a specific index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param index the index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the flashcard group at the specified index"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public FlashcardGroup getGroupAtIdx(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groups.get(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the total number of groups in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return total number of groups in the list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public int getTotalGroupNum() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groups.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Check if the current instance is equal to the object passed in."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param obj The object to be compared against the current instance"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return whether or not the two objects are equal"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList otherGroupList \u003d (GroupList) obj;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        if (this.getTotalGroupNum() !\u003d otherGroupList.getTotalGroupNum()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int idx \u003d 0; idx \u003c otherGroupList.getTotalGroupNum(); idx++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            if (!this.getGroupAtIdx(idx).equals(otherGroupList.getGroupAtIdx(idx))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 5,
      "sliu107": 109,
      "g-lilian": 24
    }
  },
  {
    "path": "src/main/java/seedu/tp/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.AddFlashcardToGroupCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DisplayStudyPlanCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.EventFlashcardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.GroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ListFlashcardsInGroupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListReviewedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.OtherFlashcardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.PersonFlashcardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.PriorityCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.RandomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ResetReviewedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ReviewedCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ShowCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ShowGroupsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.commands.TimelineCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.UpdateStudyPlanCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidInputFormatException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.ADD_FLASHCARD_TO_GROUP_COMMAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DELETE_COMMAND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DISPLAY_STUDY_PLAN_COMMAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EMPTY_SPACE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EVENT_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.FIND_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.GROUP_COMMAND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.HELP_COMMAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LIST_COMMAND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.Constants.LIST_FLASHCARDS_IN_GROUP_COMMAND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LIST_REVIEWED_COMMAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.OTHER_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.PERSON_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.PRIORITY_COMMAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.Constants.RANDOM_COMMAND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.RESET_REVIEWED_COMMAND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.REVIEWED_COMMAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SHOW_COMMAND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.SHOW_GROUPS_COMMAND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.TIMELINE_COMMAND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.UPDATE_STUDY_PLAN_COMMAND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " * Parser class to handle parsing of user input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": " */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"parser.log\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructs the Parser class."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardFactory flashcard factory to be passed in as argument to commands"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList    flashcard list to be passed in as argument to commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupFactory     group factory to be passes in as argument to commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param groupList        group list to be passed in as argument to commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui               UI to be passed in as argument to commands"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public Parser(FlashcardFactory flashcardFactory, FlashcardList flashcardList,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                  GroupFactory groupFactory, GroupList groupList, StudyPlanList studyPlanList, Ui ui) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardFactory \u003d flashcardFactory;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupFactory \u003d groupFactory;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d studyPlanList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the Parser logger. Call once at the start of the program."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Attempt to parse a string representing a date by matching it with formatters."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param date the string to be parsed"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return LocalDate if the string was parsable, null if not"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static LocalDate parseDate(String date) throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert date !\u003d null : \"Invalid null date!\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        final DateTimeFormatter[] dateTimeFormatters \u003d {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d M yyyy\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"M yyyy\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"yyyy\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/yyyy\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"M/yyyy\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d-M-yyyy\"),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .appendPattern(\"M-yyyy\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                .toFormatter(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (DateTimeFormatter formatter : dateTimeFormatters) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(\"User entered invalid date time: \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Converts local date type object to string representation."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param localDate the local date object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return string representation of the LocalDate object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static String localDateToString(LocalDate localDate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert localDate !\u003d null : \"Invalid null LocalDate!\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        final DateTimeFormatter formatter \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).withLocale(Locale.US);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return localDate.format(formatter);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Parses user input and return the command parsed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param userInput the user input"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the command parsed from user input"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws HistoryFlashcardException exception that occurred when parsing user input"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public Command parseCommand(String userInput) throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert userInput !\u003d null : \"Invalid null user input!\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String[] splitInput \u003d userInput.split(EMPTY_SPACE, 3);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        String commandType \u003d splitInput[0].toLowerCase();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case EVENT_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new EventFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case PERSON_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new PersonFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case OTHER_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new OtherFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case LIST_COMMAND:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new ListCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case LIST_REVIEWED_COMMAND:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new ListReviewedCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case LIST_FLASHCARDS_IN_GROUP_COMMAND:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return new ListFlashcardsInGroupCommand(groupList, ui, splitInput[1] + \" \" + splitInput[2]);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (IndexOutOfBoundsException e1) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    return new ListFlashcardsInGroupCommand(groupList, ui, splitInput[1]);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                } catch (IndexOutOfBoundsException e2) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case SHOW_COMMAND:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return new ShowCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1, ui);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case REVIEWED_COMMAND:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return new ReviewedCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1, ui);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case RANDOM_COMMAND:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new RandomCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case DELETE_COMMAND:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                return new DeleteCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1, ui);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        case PRIORITY_COMMAND:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                Flashcard.PriorityLevel pl \u003d Flashcard.PriorityLevel.valueOf(splitInput[2]);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return new PriorityCommand(flashcardList, Integer.parseInt(splitInput[1]) - 1, ui, pl);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidFlashcardIndexException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case TIMELINE_COMMAND:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                return new TimelineCommand(flashcardList, ui, splitInput[1], splitInput[2]);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return new TimelineCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case GROUP_COMMAND:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new GroupCommand(groupFactory, groupList);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case ADD_FLASHCARD_TO_GROUP_COMMAND:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new AddFlashcardToGroupCommand(ui, groupList, flashcardList);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case SHOW_GROUPS_COMMAND:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return new ShowGroupsCommand(groupList, ui);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case UPDATE_STUDY_PLAN_COMMAND:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new UpdateStudyPlanCommand(ui, studyPlanList, flashcardList);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case DISPLAY_STUDY_PLAN_COMMAND:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new DisplayStudyPlanCommand(ui, studyPlanList, flashcardList);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case FIND_FLASHCARD_COMMAND:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return new FindCommand(flashcardList, ui, splitInput[1]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                LOGGER.warning(\"InvalidInputFormatException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                throw new InvalidInputFormatException();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case RESET_REVIEWED_COMMAND:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new ResetReviewedCommand(ui, flashcardList);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            return new HelpCommand(ui);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        case BYE_COMMAND:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            LOGGER.warning(\"UnknownCommandException occurred when parsing: \" + userInput);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 198,
      "sliu107": 46,
      "quinnyyy": 13,
      "g-lilian": 35
    }
  },
  {
    "path": "src/main/java/seedu/tp/studyplan/StudyPlanList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DATE_FIELD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EMPTY_SPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.INDEXES_FIELD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class StudyPlanList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(StudyPlanList.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"study_plan.log\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Map\u003cLocalDate, List\u003cInteger\u003e\u003e studyPlanList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for StudyPlanList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public StudyPlanList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this.studyPlanList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Constructor for StudyPlanList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param listOfStudyPlans the list of daily study plans to be added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public StudyPlanList(List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e listOfStudyPlans) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert listOfStudyPlans !\u003d null : \"Invalid null study plan list!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e entry : listOfStudyPlans) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            this.studyPlanList.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the StudyPlanList logger. Call once at the start of the program."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Updates the study plan list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param ui            the Ui class to be used for interaction with user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list used for checking index boundary"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws InvalidFlashcardIndexException exception thrown when user input invalid indexes"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void updateStudyPlan(Ui ui, FlashcardList flashcardList) throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert ui !\u003d null : \"Invalid null Ui!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate date \u003d ui.promptUserForRequiredLocalDate(DATE_FIELD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String[] indexesStr \u003d ui.promptUserForRequiredField(INDEXES_FIELD).split(EMPTY_SPACE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            for (String dateStr : indexesStr) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                int index \u003d Integer.parseInt(dateStr) - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                if (index \u003c 0 | index \u003e\u003d flashcardList.getTotalFlashcardNum()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                indexes.add(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            throw new InvalidFlashcardIndexException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList.put(date, indexes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the list of study plans."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return a list containing all the study plans"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e getStudyPlanList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return new ArrayList\u003c\u003e(studyPlanList.entrySet());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (!(obj instanceof StudyPlanList)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList otherStudyPlan \u003d (StudyPlanList) obj;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e otherStudyPlanList \u003d otherStudyPlan.getStudyPlanList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e studyPlanList \u003d this.getStudyPlanList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (otherStudyPlanList.size() !\u003d studyPlanList.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c studyPlanList.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e entry \u003d studyPlanList.get(i);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e otherEntry \u003d otherStudyPlanList.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (!entry.getKey().equals(otherEntry.getKey())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            if (!entry.getValue().equals(otherEntry.getValue())) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 130
    }
  },
  {
    "path": "src/main/java/seedu/tp/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.BULLET_POINT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.DETAIL_FIELD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Ui class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"ui.log\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Ui.class.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up the Ui logger. Call once at the start of the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @throws IOException when logger set up failed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends welcome message to user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendWelcomeMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Welcome to History Flashcard App!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends bye message to user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendByeMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Thanks for using History Flashcard!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends help message to user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void sendHelpMessage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"Followings are the formats of commands used in the main menu:\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"1. Add an event flashcard: event\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"2. Add a person flashcard: person\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"3. Add an other flashcard: other\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"4. List out all the flashcards: list\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"5. List the flashcards in time order: timeline\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"6. Set the priority of an existing flashcard: priority i/INDEX p/PRIORITY\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"  (Note: There are 4 priority levels: LOW, MEDIUM, HIGH, DEFAULT)\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"7. Set an existing flashcard as reviewed: reviewed i/INDEX\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"8. Show the detailed information of an existing flashcard: show i/INDEX\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"9. Delete a flashcard from the flashcard list: delete i/INDEX\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"10. Set up a new flashcard group: group\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"11. Add a flashcard to an existing group: add\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"12. To exit the History Flashcard: bye\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"13. To get help message: help\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"Then please follow the instruction given by the program in each situation.\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"(Note: Whenever requiring a date, you should pick one of the following format:\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        stringBuilder.append(\"       d M yyyy, M yyyy, yyyy, d/M/yyyy, M/yyyy, d-M-yyyy, M-yyyy)\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            .append(System.lineSeparator());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(stringBuilder);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prompts the user for a list of details for a flashcard."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the list of details entered by user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public List\u003cString\u003e promptUserForDetails() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for details...\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cString\u003e details \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Optional\u003cString\u003e newDetailOptional \u003d promptUserForOptionalField(DETAIL_FIELD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        while (newDetailOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            details.add(newDetailOptional.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            newDetailOptional \u003d promptUserForOptionalField(DETAIL_FIELD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning details...\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prompts the user for a piece of optional data used in the construction of a \u003ccode\u003eFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * The user can leave the line empty."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param fieldName string representing the name of the data to prompt for"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the user\u0027s input"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public Optional\u003cString\u003e promptUserForOptionalField(String fieldName) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert !fieldName.isEmpty() : \"Invalid empty field name!\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for optional field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Please enter \" + fieldName + \" (optional):\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning optional field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return input.equals(EMPTY_STRING) ? Optional.empty() : Optional.of(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prompts the user for a piece of required data used in the construction of a \u003ccode\u003eFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param fieldName string representing the name of the data to prompt for"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @return the user\u0027s input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public String promptUserForRequiredField(String fieldName) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert !fieldName.isEmpty() : \"Invalid empty field name!\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for required field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Please enter \" + fieldName + \":\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        while (input.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            System.out.println(\"That is a required field! Please enter again.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning required field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Prompts the user for an optional date used in the construction of a \u003ccode\u003eFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param fieldName string representing name of the date to prompt for"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the parsed date"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Optional\u003cLocalDate\u003e promptUserForOptionalLocalDate(String fieldName) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert !fieldName.isEmpty() : \"Invalid empty field name!\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for optional local date field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"Please enter \" + fieldName + \" (optional):\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate localDate \u003d null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (input.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                localDate \u003d Parser.parseDate(input);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                System.out.println(\"That date format couldn\u0027t be parsed! Please enter again.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } while (localDate \u003d\u003d null);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning optional local date field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return Optional.of(localDate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Prompts the user for a required date used in the construction of a \u003ccode\u003eFlashcard\u003c/code\u003e."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param fieldName string representing name of the date to prompt for"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the parsed date"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public LocalDate promptUserForRequiredLocalDate(String fieldName) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert !fieldName.isEmpty() : \"Invalid empty field name!\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Prompting user for required local date field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"Please enter \" + fieldName + \":\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate localDate \u003d null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            input \u003d getNextLine().trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                localDate \u003d Parser.parseDate(input);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                System.out.println(\"That date format couldn\u0027t be parsed! Please enter again.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } while (localDate \u003d\u003d null);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Returning required local date field \" + fieldName + \"...\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Gets the response from the user after the user reviewed a flashcard."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcard the flashcard the user just reviewed"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return the response given by the user"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public String promptUserResponseForReviewing(Flashcard flashcard) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"Do you want to mark this flashcard as reviewed?\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        String input \u003d getNextLine().trim().toLowerCase();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends confirmation message for completion o random flashcard review."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param reviewedNumber        the number of flashcards reviewed during this self test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param totalUnreviewedNumber the total number of unreviewed flashcards"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmRandomFlashcardsReviewCompletion(int reviewedNumber, int totalUnreviewedNumber) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"You have just gone through all the flashcard(s)\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"You have marked \" + reviewedNumber + \" flashcard(s) as reviewed this time.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"You still have \" + totalUnreviewedNumber + \" flashcard(s) have not been reviewed so far.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends flashcard creation confirmation to user."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcard the flashcard created"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void confirmFlashcardCreation(Flashcard flashcard) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"You\u0027ve successfully created the flashcard below:\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(flashcard);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Prints confirmation that flashcard has been marked as reviewed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcard the flashcard that was reviewed"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void confirmFlashcardReview(Flashcard flashcard) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"You have marked the following flashcard as Reviewed:\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(flashcard.getName());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Prints confirmation that flashcard priority level has been updated."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcard the flashcard that had its priority updated"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void confirmFlashcardPriority(Flashcard flashcard) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Priority has been updated:\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(flashcard.getName() + \" | New priority: \" + flashcard.getPriorityAsString());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Displays flashcard details according to index specified."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcard the flashcard to be displayed"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"These are the flashcard details:\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(flashcard);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends flashcard group creation confirmation to user."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardGroup the flashcard group created"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmFlashcardGroupCreation(FlashcardGroup flashcardGroup) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardGroup !\u003d null : \"Invalid null flashcard group!\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"You\u0027ve successfully created the group below:\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(flashcardGroup);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends flashcard deletion confirmation message to user."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcard the flashcard deleted"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmFlashcardDeletion(Flashcard flashcard) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"The following flashcard has been deleted.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(flashcard);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends reset completion confirmation message to user."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmResetCompletion() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"All the flashcards have been reset as unreviewed successfully.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Sends confirmation message that the flashcard is successfully added to a group."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardGroup the flashcard group the flashcard is added into."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcard      the flashcard just be added into the group"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void confirmFlashcardAdditionToGroup(FlashcardGroup flashcardGroup, Flashcard flashcard) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardGroup !\u003d null : \"Invalid null flashcard group!\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcard !\u003d null : \"Invalid null flashcard!\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"You\u0027ve successfully added the flashcard below:\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(flashcard);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(\"To the group:\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.out.println(flashcardGroup);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Lists all existing groups created by the user."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupList the list of all flashcard groups"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void listAllGroups(GroupList groupList) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert groupList !\u003d null : \"Invalid null GroupList!\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (groupList.getTotalGroupNum() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            System.out.println(\"There are no existing groups. Use \\\"group\\\" to create a new group.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        List\u003cFlashcardGroup\u003e groups \u003d groupList.getGroups();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Here are all existing groups:\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            FlashcardGroup group \u003d groups.get(i);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            String groupName \u003d group.getName();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            System.out.println(i + 1 + \". \" + groupName);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prints out all flashcards in the list."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the list of flashcards to be printed out"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listAllFlashcards(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null flashcard list!\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (flashcardList.isEmpty()) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            System.out.println(\"You have no flashcard at this moment!\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Here\u0027s the list of flashcards you have:\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardList.getTotalFlashcardNum(); i++) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(i);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            System.out.println((i + 1) + \": \" + flashcard.getName()"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                + \" | Reviewed: \" + flashcard.getReviewIcon()"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \" | \" + flashcard.getPriorityAsString());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Lists all flashcards in a specified group."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param flashcardList   list of all flashcards in the group"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param groupIdentifier name or index of the group"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void listFlashcardsInGroup(FlashcardList flashcardList, String groupIdentifier) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null flashcard list!\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (flashcardList.isEmpty()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            System.out.println(\"There are no flashcards in the group!\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(groupIdentifier + \" contains the following flashcards:\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        for (Flashcard flashcard : flashcardList.getFlashcards()) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            System.out.println(BULLET_POINT + flashcard.getName()"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \" | Reviewed: \" + flashcard.getReviewIcon()"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                + \" | \" + flashcard.getPriorityAsString());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Lists all flashcards along with their IDs."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardListWithId the list of flashcards with IDs."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listAllFlashcardsWithId(List\u003cMap.Entry\u003cInteger, Flashcard\u003e\u003e flashcardListWithId) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardListWithId !\u003d null : \"Invalid null flashcard list!\";"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Listing flashcards with ID...\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        if (flashcardListWithId.isEmpty()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            System.out.println(\"You have no flashcard matching your query!\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Here\u0027s the list of flashcards you are looking for:\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardListWithId.size(); i++) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Map.Entry\u003cInteger, Flashcard\u003e flashcardEntry \u003d flashcardListWithId.get(i);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            System.out.println((i + 1) + \": \" + flashcardEntry.getValue().getName()"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                + \" | Reviewed: \" + flashcardEntry.getValue().getReviewIcon()"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                + \" | \" + flashcardEntry.getValue().getPriorityAsString()"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                + \" | ID: \" + (flashcardEntry.getKey() + 1));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Listed flashcards with ID!\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Prints out all flashcards in the list ordered by start/birth date. Other cards come last."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * If a startDate and endDate is specified, prints all flashcards with startDate or birthDate in the"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * range [startDate, endDate]."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Used for TimelineCommand."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param flashcardList the list of flashcards to be printed out"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void listAllFlashcardsOrdered(FlashcardList flashcardList, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null flashcard list!\";"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (flashcardList.isEmpty()) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            System.out.println(\"You have no flashcards at this moment!\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e(flashcardList.getFlashcards());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Collections.sort(flashcards);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (startDate \u003d\u003d null || endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            System.out.println(\"Flashcards sorted by date:\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            for (Flashcard f : flashcards) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                System.out.println(BULLET_POINT + f.getShortDescription());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            listFlashcardsInPeriod(flashcards, startDate, endDate);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Lists flashcards from a specified time period only, in sorted order."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param sortedFlashcards the sorted list of all flashcards"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param startDate        the date to start listing flashcards from (inclusive)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * @param endDate          the date after which to stop listing flashcards from"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private void listFlashcardsInPeriod(List\u003cFlashcard\u003e sortedFlashcards, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Listing flashcards from \" + startDate + \" to \" + endDate + \"...\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        boolean noFlashcards \u003d true;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        for (Flashcard f : sortedFlashcards) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            if (f instanceof EventFlashcard) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                EventFlashcard eventFlashcard \u003d (EventFlashcard) f;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                LocalDate eventStartDate \u003d eventFlashcard.getStartDate();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                if (eventStartDate.compareTo(startDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    \u0026\u0026 eventStartDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    System.out.println(BULLET_POINT + f.getShortDescription());"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    noFlashcards \u003d false;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            } else if (f instanceof PersonFlashcard) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                PersonFlashcard personFlashcard \u003d (PersonFlashcard) f;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                LocalDate personBirthDate \u003d personFlashcard.getBirthDate();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                if (personBirthDate.compareTo(startDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    \u0026\u0026 personBirthDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    System.out.println(BULLET_POINT + f.getShortDescription());"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                    noFlashcards \u003d false;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        if (noFlashcards) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            System.out.println(\"No flashcards found in this period.\");"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Displays a list of all the user\u0027s study plan(s) sorted by date."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param studyPlanList the study plan to be displayed"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param flashcardList the flashcard list"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void displayStudyPlan(StudyPlanList studyPlanList, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert studyPlanList !\u003d null : \"Invalid null StudyPlan!\";"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assert flashcardList !\u003d null : \"Invalid null FlashcardList!\";"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Displaying study plan...\");"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e studyPlans \u003d studyPlanList.getStudyPlanList();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        for (Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e studyPlanForDay : studyPlans) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            System.out.println(\"Date: \" + studyPlanForDay.getKey());"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            for (int index : studyPlanForDay.getValue()) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    Flashcard flashcard \u003d flashcardList.getFlashcardAtIdx(index);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    System.out.println((index + 1) + \": \" + flashcard.getName()"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        + \" | Reviewed: \" + flashcard.getReviewIcon()"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                        + \" | \" + flashcard.getPriorityAsString());"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                    System.out.println(\"Flashcard with index \" + index + \" not found.\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"study plan displayed!\");"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Prints out exception to UI."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * @param exception the exception to be printed out"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void printException(Exception exception) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(\"Sending exception to user...\");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.warning(exception.toString());"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"An exception has occurred!\");"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(exception.getMessage());"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends response to unknown command entered by user."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendUnknownCommandResponse() {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending unknown command response to user...\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"Sorry, I don\u0027t know how to help with that yet.\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Sends response to invalid flashcard index entered by user."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void sendInvalidFlashcardIndexResponse() {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending invalid flashcard index response to user...\");"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.out.println(\"The flashcard index you entered is invalid\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void sendLoggingSetupFailedMessage() {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending logging set up failed response to user...\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"Logging setup failed! Logs will be printed to console instead of saved to file.\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void sendInvalidInputFormatResponse() {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Sending invalid input format response to user...\");"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Please use the correct input format. Use \\\"help\\\" to view all commands.\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void sendDuplicateFlashcardResponse() {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LOGGER.info(\"Send duplicate flashcard response to user...\");"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(\"Duplicate flashcard detected. The flashcard has not been added.\");"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     * Sends response to invalid flashcard group name/index entered by user."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void sendInvalidFlashcardGroupResponse() {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LOGGER.info(\"Send invalid flashcard group response to user...\");"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.out.println(\"Please enter a valid flashcard group name or index.\""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + \" Use \\\"showgroups\\\" to view all groups.\");"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Gets the next user input line."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return next line"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getNextLine() {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 235,
      "sliu107": 101,
      "quinnyyy": 106,
      "g-lilian": 134
    }
  },
  {
    "path": "src/main/java/seedu/tp/utils/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String EVENT_FLASHCARD_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String PERSON_FLASHCARD_COMMAND \u003d \"person\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String OTHER_FLASHCARD_COMMAND \u003d \"other\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String LIST_REVIEWED_COMMAND \u003d \"list-reviewed\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String LIST_FLASHCARDS_IN_GROUP_COMMAND \u003d \"list-group\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String SHOW_COMMAND \u003d \"show\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String REVIEWED_COMMAND \u003d \"reviewed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String PRIORITY_COMMAND \u003d \"priority\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String TIMELINE_COMMAND \u003d \"timeline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String GROUP_COMMAND \u003d \"group\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SHOW_GROUPS_COMMAND \u003d \"show-groups\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String ADD_FLASHCARD_TO_GROUP_COMMAND \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String UPDATE_STUDY_PLAN_COMMAND \u003d \"plan\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DISPLAY_STUDY_PLAN_COMMAND \u003d \"show-plan\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String FIND_FLASHCARD_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESET_REVIEWED_COMMAND \u003d \"reset-reviewed\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RANDOM_COMMAND \u003d \"random\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String NAME_FIELD \u003d \"name\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String START_DATE_FIELD \u003d \"start date\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String END_DATE_FIELD \u003d \"end date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SUMMARY_FIELD \u003d \"summary\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DETAIL_FIELD \u003d \"detail\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String BIRTH_DATE_FIELD \u003d \"birth date\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DEATH_DATE_FIELD \u003d \"death date\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String DESCRIPTION_FIELD \u003d \"description\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_FIELD \u003d \"indexes\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String INDEX_FIELD \u003d \"index\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DATE_FIELD \u003d \"date\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final int MS_TO_S_CONVERSION_FACTOR \u003d 1000;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String EMPTY_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String BULLET_POINT \u003d \"- \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String DIVIDER \u003d \" | \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String REGEX_MATCH_ALL_CHARACTER \u003d \".*\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String LOG_FOLDER \u003d \"logs/\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 30,
      "sliu107": 9,
      "quinnyyy": 3,
      "g-lilian": 6
    }
  },
  {
    "path": "src/main/java/seedu/tp/utils/LoggerUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class LoggerUtils {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Create a folder if it does not exist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param folderName String representing the folder name"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void createFolder(String folderName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File folder \u003d new File(folderName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 17
    }
  },
  {
    "path": "src/test/java/seedu/tp/MainTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "quinnyyy": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/AddFlashcardToGroupCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardGroupException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getAddFlashcardToGroupCommandWithInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getGroupFactoryWithInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class AddFlashcardToGroupCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardToGroupCommand_execute_Successfully() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardGroup expectedGroup \u003d new FlashcardGroup(GROUP_NAME, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_3));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList expectedGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedGroupList.addFlashcardGroup(expectedGroup);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        //Test case1: Adding flashcards in the order as expected"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardGroup actualGroup1 \u003d new FlashcardGroup(GROUP_NAME, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList actualGroupList1 \u003d new GroupList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        actualGroupList1.addFlashcardGroup(actualGroup1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand1 \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_3, fullFlashcardList, actualGroupList1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        addFlashcardToGroupCommand1.execute();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, actualGroupList1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        //Test case2: Adding flashcards in an different order"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardGroup actualGroup2 \u003d new FlashcardGroup(GROUP_NAME, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList actualGroupList2 \u003d new GroupList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        actualGroupList2.addFlashcardGroup(actualGroup2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand2 \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_1, fullFlashcardList, actualGroupList2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        addFlashcardToGroupCommand2.execute();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, actualGroupList2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardToGroupCommand_invalidFlashcardIndex_throwsException()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList originalGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand groupCommand \u003d new GroupCommand(groupFactory, originalGroupList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupCommand.execute();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_2, fullFlashcardList, originalGroupList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            InvalidFlashcardIndexException.class, addFlashcardToGroupCommand::execute"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void addFlashcardToGroupCommand_unrecognizedFlashcardGroupType_throwsException()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList originalGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand groupCommand \u003d new GroupCommand(groupFactory, originalGroupList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupCommand.execute();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand addFlashcardToGroupCommand \u003d getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_4, fullFlashcardList, originalGroupList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            UnrecognizedFlashcardGroupException.class, addFlashcardToGroupCommand::execute"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 51,
      "sliu107": 79
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_delete_successful() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedFlashcardList.addFlashcard(EVENT_FLASHCARD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedFlashcardList.addFlashcard(OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList(fullFlashcardList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(flashcardList, 1, ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedFlashcardList, flashcardList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_deleteFromEmptyList_throwsInvalidFlashcardIndexException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(emptyFlashcardList, 1, ui);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            deleteCommand::execute,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_deleteNegativeIndex_throwsInvalidFlashcardIndexException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(fullFlashcardList, -10, ui);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            deleteCommand::execute,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void execute_deleteOutOfBoundIndex_throwsInvalidFlashcardIndexException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(fullFlashcardList, 100, ui);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            deleteCommand::execute,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 92,
      "sliu107": 5
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/DisplayStudyPlanCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class DisplayStudyPlanCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_1 \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_1, Arrays.asList(0, 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_2 \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_2, Arrays.asList(0, 2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e studyPlans \u003d Arrays.asList(STUDY_PLAN_ENTRY_1, STUDY_PLAN_ENTRY_2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList(studyPlans);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void displayStudyPlanCommand_execute_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedEventOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"Date: 2020-01-18\" + System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"1: Event 1 | Reviewed: X | Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"3: Title 1 | Reviewed: X | Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedEventOutput.append(\"Date: 2020-02-27\" + System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"1: Event 1 | Reviewed: X | Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"2: Person 1 | Reviewed: X | Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand displayStudyPlanCommand \u003d new DisplayStudyPlanCommand(new Ui(), studyPlanList,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            fullFlashcardList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        displayStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedEventOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 90,
      "g-lilian": 4
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/EventFlashcardCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FULL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class EventFlashcardCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void eventFlashcardCommand_execute_addsFlashcardSuccessfully() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedFlashcardList.addFlashcard(new EventFlashcard(FLASHCARD_NAME, START_LOCAL_DATE, END_LOCAL_DATE, SUMMARY,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DETAILS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList actualFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        EventFlashcardCommand eventFlashcardCommand \u003d new EventFlashcardCommand(actualFlashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        eventFlashcardCommand.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcardList, actualFlashcardList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcardList.getFlashcardAtIdx(0) instanceof EventFlashcard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "sliu107": 2,
      "quinnyyy": 30
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void findCommand_execute_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"Here\u0027s the list of flashcards you are looking for:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"1: Event 1 | Reviewed: X | Not indicated | ID: 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"2: Person 1 | Reviewed: X | Not indicated | ID: 2\" + System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"3: Title 1 | Reviewed: X | Not indicated | ID: 3\" + System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(fullFlashcardList, new Ui(), \"1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        findCommand.execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void findCommand_executeEmptyList_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String expectedOutput \u003d \"You have no flashcard matching your query!\" + System.lineSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(emptyFlashcardList, new Ui(), \"1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        findCommand.execute();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOutput, capturedOut.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 81,
      "g-lilian": 3
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/GroupCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.FlashcardGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getGroupFactoryWithInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void groupCommand_execute_Successfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardGroup expectedGroup \u003d new FlashcardGroup(GROUP_NAME, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList expectedGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedGroupList.addFlashcardGroup(expectedGroup);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupList actualGroupList \u003d new GroupList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand groupCommand \u003d new GroupCommand(groupFactory, actualGroupList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupCommand.execute();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupList, actualGroupList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 44,
      "sliu107": 29
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": " * Execution test for help command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    Execution of HelpCommand only involves UI interaction with users and is tested in text-ui-test."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 10
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listCommand_execute_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"Here\u0027s the list of flashcards you have:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"1: Event 1 | Reviewed: X | Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"2: Person 1 | Reviewed: X | Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"3: Title 1 | Reviewed: X | Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(fullFlashcardList, new Ui());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listCommand_executeEmptyList_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String expectedOutput \u003d \"You have no flashcard at this moment!\" + System.lineSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(emptyFlashcardList, new Ui());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOutput, capturedOut.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 76,
      "g-lilian": 7
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ListReviewedCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ListReviewedCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList emptyFlashcardList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        emptyFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EVENT_FLASHCARD.setReviewStatus(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OTHER_FLASHCARD.setReviewStatus(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Restores standard output and variables."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdoutAndVariables() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EVENT_FLASHCARD.setReviewStatus(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OTHER_FLASHCARD.setReviewStatus(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listReviewedCommand_execute_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        expectedOutput.append(\"Here\u0027s the list of flashcards you are looking for:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"1: Event 1 | Reviewed: / | Not indicated | ID: 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"2: Title 1 | Reviewed: / | Not indicated | ID: 3\" + System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand listReviewedCommand \u003d new ListReviewedCommand(fullFlashcardList, new Ui());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        listReviewedCommand.execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void listReviewedCommand_executeEmptyList_listsFlashcardsSuccessfully() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        String expectedOutput \u003d \"You have no flashcard matching your query!\" + System.lineSeparator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand listReviewedCommand \u003d new ListReviewedCommand(emptyFlashcardList, new Ui());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        listReviewedCommand.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOutput, capturedOut.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 88,
      "g-lilian": 2
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/OtherFlashcardCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.PARTIAL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class OtherFlashcardCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void otherFlashcardCommand_execute_addsFlashcardSuccessfully() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedFlashcardList.addFlashcard(new OtherFlashcard(FLASHCARD_NAME, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList actualFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(PARTIAL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        OtherFlashcardCommand otherFlashcardCommand \u003d new OtherFlashcardCommand(actualFlashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        otherFlashcardCommand.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcardList, actualFlashcardList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcardList.getFlashcardAtIdx(0) instanceof OtherFlashcard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 2,
      "sliu107": 1,
      "quinnyyy": 28
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/PersonFlashcardCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FULL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class PersonFlashcardCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void personFlashcardCommand_execute_addsFlashcardSuccessfully() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedFlashcardList.addFlashcard(new PersonFlashcard(FLASHCARD_NAME, START_LOCAL_DATE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList actualFlashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        PersonFlashcardCommand personFlashcardCommand \u003d new PersonFlashcardCommand(actualFlashcardList,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            flashcardFactory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        personFlashcardCommand.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcardList, actualFlashcardList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcardList.getFlashcardAtIdx(0) instanceof PersonFlashcard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 3,
      "quinnyyy": 31
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/PriorityCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.flashcard.Flashcard.PriorityLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class PriorityCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setDefaultPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedEventOutputDefault \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutputDefault.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutputDefault.append(\"Event 1 | New priority: Not indicated\" + System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 0, new Ui(), PriorityLevel.DEFAULT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        priorityCommand.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedEventOutputDefault.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setHighPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedEventOutputHigh \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutputHigh.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutputHigh.append(\"Event 1 | New priority: ***\" + System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 0, new Ui(), PriorityLevel.HIGH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        priorityCommand.execute();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedEventOutputHigh.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setMediumPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedPersonOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Person 1 | New priority: **\" + System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 1, new Ui(), PriorityLevel.MEDIUM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        priorityCommand.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedPersonOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void priorityCommand_execute_setLowPrioritySuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOtherOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Priority has been updated:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Title 1 | New priority: *\" + System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand priorityCommand \u003d new PriorityCommand(flashcardList, 2, new Ui(), PriorityLevel.LOW);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        priorityCommand.execute();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedOtherOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 2,
      "g-lilian": 99
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/RandomCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.NEWLINE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_RANDOM_COMMAND_INPUT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class RandomCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Event 1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            START_LOCAL_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"This is an event summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            DETAILS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Person 1\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            START_LOCAL_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            DETAILS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Title 1\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"This is a summary\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            DETAILS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final InputStream backupStdin \u003d System.in;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void restoreStdinStdout() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(backupStdin);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void randomCommand_execute_Successfully() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardList expectedRandomList \u003d new FlashcardList(fullFlashcardList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Collections.shuffle(expectedRandomList.getFlashcards(), new Random(System.currentTimeMillis() / 1000));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(0).toString()).append(System.lineSeparator());;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"Do you want to mark this flashcard as reviewed?\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(NEWLINE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You have marked the following flashcard as Reviewed:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(0).getName()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(1).toString()).append(System.lineSeparator());;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"Do you want to mark this flashcard as reviewed?\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(NEWLINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(2).toString()).append(System.lineSeparator());;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"Do you want to mark this flashcard as reviewed?\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(NEWLINE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You have marked the following flashcard as Reviewed:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(expectedRandomList.getFlashcardAtIdx(2).getName()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You have just gone through all the flashcard(s)\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You have marked 2 flashcard(s) as reviewed this time.\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"You still have 1 flashcard(s) have not been reviewed so far.\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sliu107"
        },
        "content": "                .append(System.lineSeparator()).append((NEWLINE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(SIMULATED_RANDOM_COMMAND_INPUT.getBytes());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        RandomCommand randomCommand \u003d new RandomCommand(fullFlashcardList, new Ui());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        randomCommand.execute();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 104
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ResetReviewedCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class ResetReviewedCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Event 1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            START_LOCAL_DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"This is an event summary\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            DETAILS"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Person 1\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            START_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            DETAILS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"Title 1\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            \"This is a summary\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            DETAILS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList.getFlashcardAtIdx(1).setReviewStatus(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        fullFlashcardList.getFlashcardAtIdx(2).setReviewStatus(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void resetReviewedCommand_execute_Successfully() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(\"All the flashcards have been reset as unreviewed successfully.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        expectedOutput.append(System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ResetReviewedCommand resetReviewedCommand \u003d new ResetReviewedCommand(ui,fullFlashcardList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        resetReviewedCommand.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (Flashcard flashcard : fullFlashcardList.getFlashcards()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            assertFalse(flashcard.isReviewed());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 84
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ReviewedCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ReviewedCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1843, 7, 31),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        LocalDate.of(1892, 12, 25),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Arrays.asList(\"Detail 1\", \"Detail 2\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private FlashcardList flashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void reviewedCommand_execute_setReviewStatusSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"You have marked the following flashcard as Reviewed:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Event 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ReviewedCommand reviewedCommand \u003d new ReviewedCommand(flashcardList, 0, new Ui());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        reviewedCommand.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 3,
      "g-lilian": 65
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/ShowCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS_BULLET_FORM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showCommand_execute_showEventFlashcardSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedEventOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"These are the flashcard details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Event name: Event 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Event period: July 31, 1843-December 25, 1892\" + System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Summary: This is an event summary\" + System.lineSeparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(\"Details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedEventOutput.append(DETAILS_BULLET_FORM + System.lineSeparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(fullFlashcardList, 0, new Ui());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        showCommand.execute();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedEventOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showCommand_execute_showPersonFlashcardSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedPersonOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"These are the flashcard details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Person name: Person 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Born: July 31, 1843\" + System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Died: December 25, 1892\" + System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Summary: This is a person\u0027s summary\" + System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(\"Details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedPersonOutput.append(DETAILS_BULLET_FORM + System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(fullFlashcardList, 1, new Ui());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        showCommand.execute();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedPersonOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showCommand_execute_showOtherFlashcardSuccessfully() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        StringBuilder expectedOtherOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"These are the flashcard details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Title: Title 1\" + System.lineSeparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Summary: This is a summary\" + System.lineSeparator());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(\"Details:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOtherOutput.append(DETAILS_BULLET_FORM + System.lineSeparator());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(fullFlashcardList, 2, new Ui());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        showCommand.execute();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedOtherOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void showCommand_getFlashcardFromInvalidIndex_throwsInvalidFlashcardIndexException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        flashcardList.addFlashcard(new OtherFlashcard(FLASHCARD_NAME, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(flashcardList, 1, ui);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            showCommand::execute,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 39,
      "g-lilian": 86
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/TimelineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.BULLET_POINT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class TimelineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final ByteArrayOutputStream capturedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private final PrintStream backupStdout \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void captureStdout() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setOut(new PrintStream(capturedOut));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void restoreStdout() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setOut(backupStdout);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void timelineCommand_execute_listsFlashcardsSuccessfully() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.of(1834, 2, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate middleDate \u003d LocalDate.of(1834, 7, 3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate lastDate \u003d LocalDate.of(1921, 7, 3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new EventFlashcard(\"Middle\", middleDate, middleDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new OtherFlashcard(\"Bottom\", SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new EventFlashcard(\"Last\", lastDate, lastDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        flashcardList.addFlashcard(new PersonFlashcard(\"First\", firstDate, firstDate, SUMMARY, DETAILS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(\"Flashcards sorted by date:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(3).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(0).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(2).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        expectedOutput.append(BULLET_POINT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            + flashcardList.getFlashcardAtIdx(1).getShortDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        TimelineCommand timelineCommand \u003d new TimelineCommand(flashcardList, new Ui());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        timelineCommand.execute();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedOutput.toString(), capturedOut.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 53,
      "g-lilian": 10
    }
  },
  {
    "path": "src/test/java/seedu/tp/commands/UpdateStudyPlanCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.LOCAL_DATE_2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_UPDATE_STUDY_PLAN_INPUT_1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_UPDATE_STUDY_PLAN_INPUT_2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class UpdateStudyPlanCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_1 \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_1, Arrays.asList(0, 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final Map.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e STUDY_PLAN_ENTRY_2 \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        new AbstractMap.SimpleEntry\u003c\u003e(LOCAL_DATE_2, Arrays.asList(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final InputStream backupStdin \u003d System.in;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Set up variables before each test."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void restoreStdin() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(backupStdin);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void updateStudyPlanCommand_executeFromEmpty_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ByteArrayInputStream(SIMULATED_UPDATE_STUDY_PLAN_INPUT_1.getBytes());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand updateStudyPlanCommand \u003d new UpdateStudyPlanCommand(new Ui(), studyPlanList,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            fullFlashcardList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        updateStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e expectedStudyPlanList \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Arrays.asList(STUDY_PLAN_ENTRY_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList expectedStudyPlan \u003d new StudyPlanList(expectedStudyPlanList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedStudyPlan, studyPlanList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void updateStudyPlanCommand_execute_success() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new ByteArrayInputStream(SIMULATED_UPDATE_STUDY_PLAN_INPUT_2.getBytes());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList(Arrays.asList(STUDY_PLAN_ENTRY_1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand updateStudyPlanCommand \u003d new UpdateStudyPlanCommand(new Ui(), studyPlanList,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            fullFlashcardList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        updateStudyPlanCommand.execute();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cMap.Entry\u003cLocalDate, List\u003cInteger\u003e\u003e\u003e expectedStudyPlanList \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            Arrays.asList(STUDY_PLAN_ENTRY_1, STUDY_PLAN_ENTRY_2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        StudyPlanList expectedStudyPlan \u003d new StudyPlanList(expectedStudyPlanList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedStudyPlan, studyPlanList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 109
    }
  },
  {
    "path": "src/test/java/seedu/tp/flashcard/FlashcardFactoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.UnrecognizedFlashcardTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.EVENT_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.OTHER_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.Constants.PERSON_FLASHCARD_COMMAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FLASHCARD_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.FULL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.NEWLINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.PARTIAL_SIMULATED_INPUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SUMMARY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getFlashcardFactoryWithInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class FlashcardFactoryTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_eventFlashcard_correctlyConstructed() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Flashcard expectedFlashcard \u003d new EventFlashcard(FLASHCARD_NAME, START_LOCAL_DATE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE, SUMMARY, DETAILS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard actualFlashcard \u003d flashcardFactory.create(EVENT_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcard instanceof EventFlashcard);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcard, actualFlashcard);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_personFlashcard_correctlyConstructed() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Flashcard expectedFlashcard \u003d new PersonFlashcard(FLASHCARD_NAME, START_LOCAL_DATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            END_LOCAL_DATE, SUMMARY, DETAILS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(FULL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard actualFlashcard \u003d flashcardFactory.create(PERSON_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcard instanceof PersonFlashcard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcard, actualFlashcard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_otherFlashcard_correctlyConstructed() throws UnrecognizedFlashcardTypeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Flashcard expectedFlashcard \u003d new OtherFlashcard(FLASHCARD_NAME, SUMMARY, DETAILS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d getFlashcardFactoryWithInput(PARTIAL_SIMULATED_INPUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Flashcard actualFlashcard \u003d flashcardFactory.create(OTHER_FLASHCARD_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertTrue(actualFlashcard instanceof OtherFlashcard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        assertEquals(expectedFlashcard, actualFlashcard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void flashcardFactory_unrecognizedFlashcardType_throwsException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final String[] unrecognizedFlashcardTypes \u003d {\"eventbds\", \"PeRson123\", \"OTHERASDF\", \"\", \"List\", NEWLINE};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d new FlashcardFactory(new Ui());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (String unrecognizedFlashcardType : unrecognizedFlashcardTypes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                UnrecognizedFlashcardTypeException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                () -\u003e flashcardFactory.create(unrecognizedFlashcardType)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "sliu107": 6,
      "quinnyyy": 60
    }
  },
  {
    "path": "src/test/java/seedu/tp/group/GroupFactoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "package seedu.tp.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.EventFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.OtherFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.PersonFlashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.DETAILS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.END_LOCAL_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.GROUP_NAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.INDEXES_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.SIMULATED_GROUP_COMMAND_INPUT_2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.ExampleInputConstants.START_LOCAL_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.convertStringIndexesToIntArray;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static seedu.tp.utils.InputTestUtil.getGroupFactoryWithInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "public class GroupFactoryTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final EventFlashcard EVENT_FLASHCARD \u003d new EventFlashcard("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Event 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is an event summary\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final PersonFlashcard PERSON_FLASHCARD \u003d new PersonFlashcard("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Person 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        START_LOCAL_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        END_LOCAL_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a person\u0027s summary\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private static final OtherFlashcard OTHER_FLASHCARD \u003d new OtherFlashcard("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"Title 1\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        \"This is a summary\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private FlashcardList fullFlashcardList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d Arrays.asList(EVENT_FLASHCARD, PERSON_FLASHCARD, OTHER_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        fullFlashcardList \u003d new FlashcardList(flashcards);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void group_correctly_formed() throws InvalidFlashcardIndexException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FlashcardGroup expectedGroup \u003d new FlashcardGroup(GROUP_NAME, DESCRIPTION, fullFlashcardList,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            convertStringIndexesToIntArray(INDEXES_1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_1, fullFlashcardList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        FlashcardGroup actualGroup \u003d groupFactory.form();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroup, actualGroup);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void groupFactory_invalidFlashcardIndex_throwsException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        GroupFactory groupFactory \u003d getGroupFactoryWithInput(SIMULATED_GROUP_COMMAND_INPUT_2, fullFlashcardList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            InvalidFlashcardIndexException.class, groupFactory::form"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 45,
      "sliu107": 30
    }
  },
  {
    "path": "src/test/java/seedu/tp/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "package seedu.tp.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.AddFlashcardToGroupCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.DisplayStudyPlanCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.EventFlashcardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.GroupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.ListReviewedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.OtherFlashcardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.PersonFlashcardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.PriorityCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ReviewedCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.commands.ShowCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.commands.UpdateStudyPlanCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.HistoryFlashcardException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidFlashcardIndexException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.exceptions.InvalidInputFormatException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "import seedu.tp.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.studyplan.StudyPlanList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "// Solution below referenced and adopted from:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "// https://github.com/se-edu/addressbook-level2/blob/master/test/java/seedu/addressbook/parser/ParserTest.java"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardFactory flashcardFactory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupFactory groupFactory;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    private GroupList groupList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    private StudyPlanList studyPlanList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     * Initializes a new Parser for each test case."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardFactory \u003d new FlashcardFactory(ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupFactory \u003d new GroupFactory(ui, flashcardList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        groupList \u003d new GroupList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        studyPlanList \u003d new StudyPlanList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        parser \u003d new Parser(flashcardFactory, flashcardList, groupFactory, groupList, studyPlanList, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_eventFlashcardCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"event\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EventFlashcardCommand expectedEventFlashcardCommand \u003d new EventFlashcardCommand(flashcardList,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardFactory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedEventFlashcardCommand, command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_eventFlashcardCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"EveNt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        EventFlashcardCommand expectedEventFlashcardCommand \u003d new EventFlashcardCommand(flashcardList,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardFactory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedEventFlashcardCommand, command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_personFlashcardCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"person\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        PersonFlashcardCommand expectedPersonFlashcardCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new PersonFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedPersonFlashcardCommand, command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_personFlashcardCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"pERson\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        PersonFlashcardCommand expectedPersonFlashcardCommand \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new PersonFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedPersonFlashcardCommand, command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_otherFlashcardCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"other\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OtherFlashcardCommand expectedOtherFlashcardCommand \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new OtherFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOtherFlashcardCommand, command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_otherFlashcardCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"oThER\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        OtherFlashcardCommand expectedOtherFlashcardCommand \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            new OtherFlashcardCommand(flashcardList, flashcardFactory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedOtherFlashcardCommand, command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"list\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListCommand, command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"LISt\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListCommand, command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_showCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"show 1\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ShowCommand expectedShowCommand \u003d new ShowCommand(flashcardList, 0, ui);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedShowCommand, command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_showCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"SHow 1\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ShowCommand expectedShowCommand \u003d new ShowCommand(flashcardList, 0, ui);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedShowCommand, command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_priorityCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"priority 1 LOW\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand expectedPriorityCommand \u003d new PriorityCommand(flashcardList, 0,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui, Flashcard.PriorityLevel.LOW);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedPriorityCommand, command);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_priorityCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"PriOriTY 1 LOW\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        PriorityCommand expectedPriorityCommand \u003d new PriorityCommand(flashcardList, 0,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "            ui, Flashcard.PriorityLevel.LOW);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedPriorityCommand, command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_reviewedCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"reviewed 1\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ReviewedCommand expectedReviewedCommand \u003d new ReviewedCommand(flashcardList, 0, ui);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedReviewedCommand, command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public void parse_reviewedCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        Command command \u003d parser.parseCommand(\"rEvIeWeD 1\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        ReviewedCommand expectedReviewedCommand \u003d new ReviewedCommand(flashcardList, 0, ui);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        assertEquals(expectedReviewedCommand, command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "g-lilian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"delete 1\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteCommand expectedDeleteCommand \u003d new DeleteCommand(flashcardList, 0, ui);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDeleteCommand, command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"dELEte 1\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        DeleteCommand expectedDeleteCommand \u003d new DeleteCommand(flashcardList, 0, ui);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDeleteCommand, command);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_deleteCommand_wrongNumberFormat() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        // Solution below adopted from:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        // https://stackoverflow.com/questions/40268446/junit-5-how-to-assert-an-exception-is-thrown"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidFlashcardIndexException.class,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            () -\u003e parser.parseCommand(\"delete random\"),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidFlashcardIndexException\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_byeCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"bye\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByeCommand expectedByeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedByeCommand, command);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_byeCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command command \u003d parser.parseCommand(\"ByE\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ByeCommand expectedByeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedByeCommand, command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_groupCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand expectedGroupCommand \u003d new GroupCommand(groupFactory, groupList);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualGroupCommand \u003d parser.parseCommand(\"group\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupCommand, actualGroupCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_groupCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupCommand expectedGroupCommand \u003d new GroupCommand(groupFactory, groupList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualGroupCommand \u003d parser.parseCommand(\"gRouP\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedGroupCommand, actualGroupCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_addFlashcardToGroupCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand expectedAddFlashcardToGroupCommand \u003d new AddFlashcardToGroupCommand(ui,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            groupList, flashcardList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualAddFlashcardToGroupCommand \u003d parser.parseCommand(\"add\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedAddFlashcardToGroupCommand, actualAddFlashcardToGroupCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public void parse_addFlashcardToGroupCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        AddFlashcardToGroupCommand expectedAddFlashcardToGroupCommand \u003d new AddFlashcardToGroupCommand(ui,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            groupList, flashcardList);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        Command actualAddFlashcardToGroupCommand \u003d parser.parseCommand(\"aDd\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        assertEquals(expectedAddFlashcardToGroupCommand, actualAddFlashcardToGroupCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_updateStudyPlanCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand expectedUpdateStudyPlanCommand \u003d new UpdateStudyPlanCommand(ui, studyPlanList,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualUpdateStudyPlanCommand \u003d parser.parseCommand(\"plan\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedUpdateStudyPlanCommand, actualUpdateStudyPlanCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_updateStudyPlanCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        UpdateStudyPlanCommand expectedUpdateStudyPlanCommand \u003d new UpdateStudyPlanCommand(ui, studyPlanList,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualUpdateStudyPlanCommand \u003d parser.parseCommand(\"pLAn\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedUpdateStudyPlanCommand, actualUpdateStudyPlanCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_displayStudyPlanCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand expectedDisplayStudyPlanCommand \u003d new DisplayStudyPlanCommand(ui, studyPlanList,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualDisplayStudyPlanCommand \u003d parser.parseCommand(\"show-plan\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDisplayStudyPlanCommand, actualDisplayStudyPlanCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_displayStudyPlanCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DisplayStudyPlanCommand expectedDisplayStudyPlanCommand \u003d new DisplayStudyPlanCommand(ui, studyPlanList,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            flashcardList);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualDisplayStudyPlanCommand \u003d parser.parseCommand(\"shOw-plAn\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedDisplayStudyPlanCommand, actualDisplayStudyPlanCommand);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listReviewedCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand expectedListReviewedCommand \u003d new ListReviewedCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualListReviewedCommand \u003d parser.parseCommand(\"list-reviewed\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListReviewedCommand, actualListReviewedCommand);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_listReviewedCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        ListReviewedCommand expectedListReviewedCommand \u003d new ListReviewedCommand(flashcardList, ui);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualListReviewedCommand \u003d parser.parseCommand(\"liST-revIewEd\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedListReviewedCommand, actualListReviewedCommand);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_findCommand_lowerCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(flashcardList, ui, \"word\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualFindCommand \u003d parser.parseCommand(\"find word\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedFindCommand, actualFindCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_findCommand_mixedCaseCorrect() throws HistoryFlashcardException {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(flashcardList, ui, \"word\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        Command actualFindCommand \u003d parser.parseCommand(\"FInD word\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertEquals(expectedFindCommand, actualFindCommand);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public void parse_findCommand_throwsInvalidInputFormatException() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            InvalidInputFormatException.class,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            () -\u003e parser.parseCommand(\"find\"),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "            \"Expected InvalidInputFormatException\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void parse_dateStrings_successfully() throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] dateStrings \u003d {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 07 1999\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 7 1999\","
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"3 7 1999\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"03 7 1843\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"07 0413\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"1942\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"1/8/2012\","
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"6/2012\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"1-8-2012\","
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"8-2012\""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        LocalDate[] expectedLocalDates \u003d {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1999, 7, 31),"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1999, 7, 31),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1999, 7, 3),"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1843, 7, 3),"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(413, 7, 1),"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(1942, 1, 1),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 8, 1),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 6, 1),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 8, 1),"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate.of(2012, 8, 1)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c dateStrings.length; i++) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            LocalDate actualLocalDate \u003d Parser.parseDate(dateStrings[i]);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            assertEquals(expectedLocalDates[i], actualLocalDate);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void parse_invalidDateStrings_throwsInvalidDateFormatException() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] invalidDateStrings \u003d {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"asdf\","
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 13 1999\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"32 12 1234\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"07 413\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"33 02 0512\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"July 31 1999\","
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31/17 1999\","
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31/7-1999\","
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"31 7-1999\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (String invalidDateString : invalidDateStrings) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                InvalidDateFormatException.class,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                () -\u003e Parser.parseDate(invalidDateString)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 209,
      "sliu107": 46,
      "quinnyyy": 60,
      "g-lilian": 48
    }
  },
  {
    "path": "src/test/java/seedu/tp/utils/ExampleInputConstants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import com.sun.source.tree.NewArrayTree;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ExampleInputConstants {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String BULLET_POINT \u003d \"- \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String FLASHCARD_NAME \u003d \"Example flashcard name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String GROUP_NAME \u003d \"Example flashcard group name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String UNIONIZED_GROUP_NAME \u003d \"blah blah blah\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String DESCRIPTION \u003d \"Example description\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String START_DATE \u003d \"31 07 1843\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String END_DATE \u003d \"25 12 1892\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final LocalDate START_LOCAL_DATE \u003d LocalDate.of(1843, 7, 31);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final LocalDate END_LOCAL_DATE \u003d LocalDate.of(1892, 12, 25);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String SUMMARY \u003d \"Example summary\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String DETAIL_1 \u003d \"Detail 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String DETAIL_2 \u003d \"Detail 2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final List\u003cString\u003e DETAILS \u003d Arrays.asList(DETAIL_1, DETAIL_2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "    public static final String DETAILS_BULLET_FORM \u003d \"* \" + DETAIL_1 + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "        + \"* \" + DETAIL_2 + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEX_1 \u003d \"2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEX_2 \u003d \"-1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEX_3 \u003d \"3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_1 \u003d \"1 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_2 \u003d \"1 3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INDEXES_3 \u003d \"1 2 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String INVALID_INDEXES \u003d \"0 -1 5\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DATE_1 \u003d \"27 02 2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String DATE_2 \u003d \"18 01 2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final LocalDate LOCAL_DATE_1 \u003d LocalDate.of(2020, 2, 27);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final LocalDate LOCAL_DATE_2 \u003d LocalDate.of(2020, 1, 18);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESPONSE_1 \u003d \"YeS\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESPONSE_2 \u003d \"yes\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String RESPONSE_3 \u003d \"nO\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String FULL_SIMULATED_INPUT \u003d FLASHCARD_NAME + NEWLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + START_DATE + NEWLINE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + END_DATE + NEWLINE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + SUMMARY + NEWLINE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_1 + NEWLINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_2 + NEWLINE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String PARTIAL_SIMULATED_INPUT \u003d FLASHCARD_NAME + NEWLINE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + SUMMARY + NEWLINE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_1 + NEWLINE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + DETAIL_2 + NEWLINE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_GROUP_COMMAND_INPUT_1 \u003d GROUP_NAME + NEWLINE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + INDEXES_1 + NEWLINE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_GROUP_COMMAND_INPUT_2 \u003d GROUP_NAME + NEWLINE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + INVALID_INDEXES + NEWLINE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_1 \u003d INDEX_1 + NEWLINE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + GROUP_NAME + NEWLINE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_2 \u003d INDEX_2 + NEWLINE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + GROUP_NAME + NEWLINE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_3 \u003d INDEX_3 + NEWLINE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + GROUP_NAME + NEWLINE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_ADD_FLASHCARD_TO_GROUP_INPUT_4 \u003d INDEX_1 + NEWLINE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + UNIONIZED_GROUP_NAME + NEWLINE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SIMULATED_UPDATE_STUDY_PLAN_INPUT_1 \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DATE_1 + NEWLINE + INDEXES_1 + NEWLINE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "    public static final String SIMULATED_UPDATE_STUDY_PLAN_INPUT_2 \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "        DATE_2 + NEWLINE + INDEX_1 + NEWLINE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static final String SIMULATED_RANDOM_COMMAND_INPUT \u003d RESPONSE_1 + NEWLINE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + RESPONSE_3 + NEWLINE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + RESPONSE_2 + NEWLINE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        + NEWLINE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 15,
      "sliu107": 47,
      "quinnyyy": 26,
      "g-lilian": 3
    }
  },
  {
    "path": "src/test/java/seedu/tp/utils/InputTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package seedu.tp.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.commands.AddFlashcardToGroupCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.flashcard.FlashcardFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.flashcard.FlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sliu107"
        },
        "content": "import seedu.tp.group.GroupList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import seedu.tp.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class InputTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final InputStream SYS_IN_BACKUP \u003d System.in;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Used to simulate user creation of a flashcard in JUnit testing environment."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param simulatedInput The desired input of the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return a \u003ccode\u003eFlashcardFactory\u003c/code\u003e object that can be used to create Flashcards based on simulatedInput"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static FlashcardFactory getFlashcardFactoryWithInput(String simulatedInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(simulatedInput.getBytes());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FlashcardFactory flashcardFactory \u003d new FlashcardFactory(new Ui());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.setIn(SYS_IN_BACKUP);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return flashcardFactory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Used to simulate user creation of a group in JUnit testing environment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param simulatedInput The desired input of the use"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList  The flashcard list used to create the group"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return a \u003ccode\u003eGroupFactory\u003c/code\u003e object that can be used to create Flashcard Group based on simulatedInput"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static GroupFactory getGroupFactoryWithInput(String simulatedInput, FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(simulatedInput.getBytes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        GroupFactory groupFactory \u003d new GroupFactory(new Ui(), flashcardList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(SYS_IN_BACKUP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return groupFactory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Used to simulate user creation of an addFlashcardToGroupCommand in JUnit testing environment."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param simulatedInput    The desired input of the use"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param flashcardList     The flashcard list used to create the group"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param originalGroupList The group list before the addition"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return A \u003ccode\u003eaddFlashcardToGroupCommand\u003c/code\u003e object based on simulatedInput"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static AddFlashcardToGroupCommand getAddFlashcardToGroupCommandWithInput("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        String simulatedInput, FlashcardList flashcardList, GroupList originalGroupList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        ByteArrayInputStream simulatedSystemIn \u003d new ByteArrayInputStream(simulatedInput.getBytes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        System.setIn(simulatedSystemIn);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return new AddFlashcardToGroupCommand(new Ui(), originalGroupList, flashcardList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * Convert an String of the indexes given by the user to an int array."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @param givenIndexes The string indexes given by user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     * @return The int array of indexes based on the users input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sliu107"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    public static int[] convertStringIndexesToIntArray(String givenIndexes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        String[] idxs \u003d givenIndexes.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        int[] indexes \u003d new int[idxs.length];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sliu107"
        },
        "content": "            indexes[i] \u003d Integer.parseInt(idxs[i]) - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sliu107"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sliu107"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sliu107": 50,
      "quinnyyy": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sliu107"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sliu107"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "asdf"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Meiji Restoration"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "1868"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1868"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Turning point in Japanese history"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "End of Shogunate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Centralization of power"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Functional end of Samurai Class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "person"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Late August, 1881"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "08 1881"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "30/06/1997"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Albus Dumbledore was never proud or vain."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "He could find something to value in anyone, however apparently insignificant or wretched"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Dumbledore became most famous for his defeat of Gellert Grindelwald, the discovery of the twelve uses of dragon\u0027s blood, and his work on alchemy with Nicolas Flamel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "other"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Resurrection Stone"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "The Resurrection Stone is one of the fabled Deathly Hallows."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "In \"The Tale of the Three Brothers\", it was the second Hallow created, supposedly by Death himself"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "It was bestowed upon Cadmus Peverell after he requested, as his bounty, something with the power to recall loved ones from Death"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "According to legend, whoever reunited it with the other two Hallows (the Elder Wand and the Cloak of Invisibility) would become the Master of Death"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 01-01-2020 01-01-2020"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 01-01-1868 01-01-2020"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 01-01-1850 20-05-1870"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline asdfghjkl"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "timeline 9999-99-99 9999-99-99"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "person"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "Quinn"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "31/07/1870"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "24/02/1943"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "8)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "timeline"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/01/2020"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1 3"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "plan"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "01/03/2020"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-plan"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-groups"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "group"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "New Flashcard Group"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Blah Blah Blah"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random random"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "group"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "This is a group for HP related stuff."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "2 3"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Group that does not exist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "random"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "add"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "Harry Potter Flashcards"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find Meiji"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find o"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "find Stone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete random"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list-reviewed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "reviewed 1"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list-reviewed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "reviewed 2"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "list-reviewed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "show 1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "priority 2 MEDIUM"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "show-groups"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group Harry Potter Flashcards"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group abc"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "g-lilian"
        },
        "content": "list-group abc def"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 66,
      "sliu107": 2,
      "quinnyyy": 19,
      "g-lilian": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "java -jar -ea %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhilin-Huang"
        },
        "content": "java -jar -ea $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Zhilin-Huang": 1,
      "-": 20
    }
  }
]
