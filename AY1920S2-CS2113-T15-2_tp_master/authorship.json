[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    archiveVersion \u003d \"v1.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 2,
      "-": 39
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Kezia Kew | [Github](https://github.com/kcubey) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alexander Lim | [Github](https://github.com/alexlim510/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yuanfang Zhang | [Github](https://github.com/Jeremy733) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jeremias Liew | [Github](https://github.com/JeremiasLiew) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 2,
      "alexlim510": 1,
      "kcubey": 1,
      "Jeremy733": 1,
      "-": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Exam Study Companion"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": "User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "1. Introduction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Exam Study Companion (ESC) is for students who want to improve on their grades by quizzing themselves through flashcards. ESC is a command line-based application, giving it a simple, no frills user interface that is easy to use."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "2. Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Ensure that you have JAVA 11 or above installed on the computer"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3. Features"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Command Format:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Words in UPPERCASE are inputs which will be typed in by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Eg. create n/CATEGORYNAME"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.1. Create category"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Creates a category to store the flashcards in."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: create n/CATEGORYNAM"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "create n/Biology"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.2. List all categories"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Displays a list of all categories created in ESC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: list category "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.3. Select category"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Selects a category and gains access to the flashcards stored in that category."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: select INDEX"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Gain access to a category with the specified INDEX."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX of all categories is shown after executing the command list category."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX must be a positive integer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": "select 1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.4. Delete category"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Removes a category and all flashcards stored in that category from the question bank."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: delete category INDEX"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Deletes a category with the specified INDEX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX of all categories is shown after executing the command list category."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX must be a positive integer."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": "list category"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "delete category 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    Deletes the 1st category in the list of categories."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.5. Add card"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Adds a flashcard to a category."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: add q/QUESTION a/ANSWER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "To add a card, the user must first enter a category by executing select INDEX"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kcubey"
        },
        "content": "select 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Enters the 1st category"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "add q/Which year was NUS founded? a/1980"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Adds a flashcard to the 1st category with the above question and answer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.6. List all cards"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Displays a list of all questions in the category."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: list card"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.7. Delete card"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Removes a flashcard from the question bank."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: delete INDEX"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": "To delete a card, the user must first enter a category by executing select INDEX"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX of all flashcards is shown after executing the command list card."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Deletes a flashcard in the specified INDEX."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX must be a positive integer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": "select 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Enters the 1st category"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Deletes the 2nd flashcard in the 1st category."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.8. Display a random question"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Display a random question from the question bank."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: quiz"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.9 View a selected flashcard"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Displays the answer to a question selected from the question list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: view category_INDEX question_INDEX"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Shows answer to a flashcard in the specified INDEX."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX of all flashcards is shown after executing the command list card."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The INDEX must be a positive integer."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": "answer 1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.10. Show help"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Displays a list of commands for the program"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: help"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3.10. Exit program"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Exits the program"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: exit"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "4. FAQ"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Q: How do I edit existing flashcards?"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "A: There is currently no such feature in the current version, but users can simply delete the old flashcard and add a flashcard with the edited question and answer."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "5. Command Summary"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Create: create n/CATEGORYNAME"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "E.g. create n/Biology"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kcubey"
        },
        "content": "List Category: list category"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Select Category: select INDEX"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Eg. select 1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Delete Category: delete category INDEX"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Eg. delete 1"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Add Card: add q/QUESTION a/ANSWER"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Eg. add q/Which year was NUS founded? a/1980"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kcubey"
        },
        "content": "List Card: list card"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Delete Card: delete INDEX"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Eg. delete 1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Quiz: quiz"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Answer: answer / answer INDEX"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Eg. answer 1"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Help: help"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Exit: exit"
      }
    ],
    "authorContributionMap": {
      "kcubey": 112,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/cards/Card.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Flashcard object used to store a question and its answer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class Card implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Card(String question, String answer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 21,
      "kcubey": 3
    }
  },
  {
    "path": "src/main/java/seedu/cards/CardList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Represents the entire deck of flashcards."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CardList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.cards \u003d new ArrayList\u003cCard\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public CardList(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.cards \u003d cards;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cCard\u003e getCards() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.cards;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds a card to the deck."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param card Card to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Removes a card from the deck."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index Index of card to be removed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void removeCard(int index) throws EscException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            cards.remove(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns a card based on its index number."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index Index of card to retrieve."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return card Card corresponding to index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Card getCard(int index) throws EscException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // assuming that our question index starts from 1 and not 0."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card card;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            card \u003d cards.get(index - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *  Lists all the cards in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *   @param cards A list of card to be displayed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void listCards(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (cards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"You haven\u0027t added anything yet.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"Here is the list of questions.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                System.out.println(j + \". \" + cards.get(i).getQuestion());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns size of the cardlist."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.cards.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 63,
      "alexlim510": 12,
      "kcubey": 2,
      "Jeremy733": 18
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddCardCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the AddCard command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\tTo add card, type command:​ add q/[QUESTION] a/[ANSWER]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameters for card creation."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public AddCardCommand(Card card) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns card to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Adds a card into the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(CardList cards) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cards.addCard(card);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 37
    }
  },
  {
    "path": "src/main/java/seedu/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Parent command class for the other commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(CardList cards) throws EscException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        throw new EscException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Check if it is an exit command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return true or false depending on whether it is an exit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 28
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\tTo delete card, type command: delete [INDEX]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Returns the index of the card to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Removes a card from the application. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(CardList cards) throws EscException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        //UI displays card before deletion"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cards.removeCard(this.index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        //UI displays successful card deletion"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 30,
      "kcubey": 1
    }
  },
  {
    "path": "src/main/java/seedu/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Exit Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\tTo exit, type command: exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Lists the cards currently stored in the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(CardList cards) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        UI.exitEsc();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 28,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Help Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\tTo view help menu, type command: help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Displays the help menu."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(CardList cards) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        UI.printHelp();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 21,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the List command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To list cards, type command: list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Lists the cards currently stored in the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(CardList cards) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        CardList.listCards(cards.getCards());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 21,
      "Jeremy733": 1
    }
  },
  {
    "path": "src/main/java/seedu/commands/QuizCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Quiz;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Quiz Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\tTo quiz, type command:​quiz\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Chooses a random card and displays it\u0027s question and answer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(CardList cards) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Quiz.quizQuestion(cards);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static UI ui \u003d new UI();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private CardList cards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subjects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Reads the user\u0027s commands and executes them until the user issues the exit command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                cards \u003d new CardList(storage.loadCards());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                c.execute(cards);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                storage.saveCards(cards.getCards());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //assert false : \"dummy to fail\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 18,
      "Jeremy733": 4,
      "kcubey": 13,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/Quiz.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Generate a random number with a set upper limit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param upperRange Upper limit of random number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Random number generated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int generateRandomInt(int upperRange) throws EscException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (upperRange \u003c 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return random.nextInt(upperRange);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Retrieves a random card from the card list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param cardlist Card list where card is taken from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return retrievedCard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static Card retrieveCard(CardList cardlist) throws EscException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int size \u003d cardlist.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card retrievedCard;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int randomInt \u003d generateRandomInt(size);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            retrievedCard \u003d cardlist.getCard(randomInt + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return retrievedCard;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Outputs a random question, and outputs its answer after the user has entered an answer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param cardlist Card list where card is taken from."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void quizQuestion(CardList cardlist) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            Card questionCard \u003d retrieveCard(cardlist);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String question \u003d questionCard.getQuestion();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String answer \u003d questionCard.getAnswer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Question: \" + question);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            ui.readAnswer();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Answer: \" + answer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static Path filepath \u003d Paths.get(dir, \"data\", \"cards.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static String filepathStr  \u003d String.valueOf(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static File saveFile \u003d new File(filepathStr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Loads any pre-existing cards from the save file and creates a new card list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @return pre-existing card list (if any) or a new list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static ArrayList\u003cCard\u003e loadCards() throws EscException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList\u003cCard\u003e loadCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList tempList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                saveFile.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                throw new EscException(\"File creation error\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                FileInputStream fileRead \u003d new FileInputStream(saveFile);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                ObjectInputStream objRead \u003d new ObjectInputStream(fileRead);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                tempList \u003d (ArrayList) objRead.readObject();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                for (int i \u003d 0; i \u003c tempList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                    loadCards.add((Card) tempList.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                objRead.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                throw new EscException(\"Load error\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        return loadCards;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Saves the current card list to the save file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @param currCards the current card list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void saveCards(ArrayList\u003cCard\u003e currCards) throws EscException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            FileOutputStream fileWrite \u003d new FileOutputStream(saveFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ObjectOutputStream objWrite \u003d new ObjectOutputStream(fileWrite);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.writeObject(currCards);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.flush();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            throw new EscException(\"Save error\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 70
    }
  },
  {
    "path": "src/main/java/seedu/duke/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Prints the greeting message when ESC is started."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String greeting \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String logo \u003d \" ______  _____  _____\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|  ____|/ ____|/ ____|\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"| |__  | (___ | |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|  __|  \\\\___ \\\\| |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"| |____ ____) | |____\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|______|_____/ \\\\_____|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        greeting +\u003d \"Hello from\\n\" + logo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"______________________\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Reads the user command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @return User command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"Enter command: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"[Command entered: \" + userInput + \"]\"); //TODO remove if not necessary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Reads the user answer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return User answer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static String readAnswer() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Enter answer: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"[Answer entered: \" + userInput + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *  Prints a list of commands used in the programme."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String helpMessage \u003d \"Here\u0027s a list of things you can do:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Create Category:     create n/[CATEGORYNAME]  e.g. create n/Biology.\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e List Category: ​     list category\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Select Category: ​   select [INDEX] e.g. select 1\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Delete Category: ​   delete category [INDEX] e.g. delete 1\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Add New Card:​       add q/[QUESTION] a/[ANSWER] e.g. add q/Which year was NUS founded? a/1980\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e List all Cards: ​    list card\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Delete a Card: ​     delete [INDEX] e.g. delete 1\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Start Quiz: ​        quiz\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e View Answer: ​       answer [INDEX] e.g. answer 1\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Help Page: ​         help\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\t\u003e Exit the Program: ​  exit\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(helpMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Exits the ESC program."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void exitEsc() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 11,
      "Jeremy733": 45,
      "kcubey": 22
    }
  },
  {
    "path": "src/main/java/seedu/exception/EscException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": " * The general exception message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class EscException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public EscException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        super(\"An error has occurred! \\n\\t\" + message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 10
    }
  },
  {
    "path": "src/main/java/seedu/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddCardCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.QuizCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Contains methods to parse user inputs into sensible commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String QUESTION_ARG \u003d \"q/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String ANSWER_ARG \u003d \"a/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String INCORRECT_COMMAND \u003d \"Incorrect Command\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return The command issued by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException An exception is issued if the command issued by the user is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static Command parse(String userInput) throws EscException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] arguments \u003d userInput.split(\" \",2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String command \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareAddCard(arguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareDeleteCards(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case QuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new QuizCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(INCORRECT_COMMAND + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the Add command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return Add Command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareAddCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (arguments.length \u003c 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String [] details;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (arguments[1].contains(QUESTION_ARG) \u0026\u0026 arguments[1].contains(ANSWER_ARG)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            details \u003d arguments[1].split(ANSWER_ARG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        details[0] \u003d details[0].replace(QUESTION_ARG, \"\").trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        details[1] \u003d details[1].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (details[0].isEmpty() || details[1].isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card cardToAdd \u003d new Card(details[0],details[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new AddCardCommand(cardToAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the Delete command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return Delete Command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareDeleteCards(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (arguments.length \u003c 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (arguments[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            int itemNumber \u003d Integer.parseInt(arguments[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new DeleteCommand(itemNumber - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (NumberFormatException  e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card item has to be an integer.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 110
    }
  },
  {
    "path": "src/main/java/seedu/subjects/Subject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": " * Flashcard object used to store a question and its answer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class Subject implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public Subject(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 18
    }
  },
  {
    "path": "src/main/java/seedu/subjects/SubjectList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private ArrayList\u003cSubject\u003e subjects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public SubjectList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.subjects \u003d new ArrayList\u003cSubject\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public SubjectList(ArrayList\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public ArrayList\u003cSubject\u003e getSubjects() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.subjects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Adds a subject to the deck."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param subject Subject to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void addSubject(Subject subject) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.add(subject);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Removes a subject from the deck."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param index Index of subject to be removed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void removeSubject(int index) throws EscException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Returns a card based on its index number."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param index Index of subject to retrieve."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @return subject Subject corresponding to index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public Subject getSubject(int index) throws EscException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        // assuming that our question index starts from 1 and not 0."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        Subject subject;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subject \u003d subjects.get(index - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *  Lists all the subjects in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *   @param subjects A list of subjects to be displayed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void listSubjects(ArrayList\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (subjects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"You haven\u0027t added anything yet.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"Here is the list of subjects.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            for (int i \u003d 0; i \u003c subjects.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                System.out.println(j + \". \" + subjects.get(i).getSubject());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.subjects.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 82,
      "kcubey": 2
    }
  },
  {
    "path": "src/test/java/seedu/cards/CardListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CardListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList cards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards \u003d new CardList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"Hypertext Markup Language\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCards() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.getCard(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int[] getIndexes \u003d {-1,2};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (int i : getIndexes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                cards.getCard(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(cards.getCard(1), flashcard1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(cards.getCard(2), flashcard2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void addCard_CardSuccessfullyAdded() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.removeCard(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int[] deleteIndexes \u003d {-1,1};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                cards.removeCard(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_CardSuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.removeCard(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertFalse(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(1,cards.getCards().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.removeCard(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertFalse(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(0,cards.getCards().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 115
    }
  },
  {
    "path": "src/test/java/seedu/cards/CardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"HyperText Markup Language\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void getQuestion() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard1.getQuestion().equals(\"What does HTTP stand for?\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard2.getQuestion().equals(\"What does HTML stand for?\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void getAnswer() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard1.getAnswer().equals(\"HyperText Transfer Protocol\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard2.getAnswer().equals(\"HyperText Markup Language\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 30
    }
  },
  {
    "path": "src/test/java/seedu/commands/AddCardCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class AddCardCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private AddCardCommand addCardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void addCardCommand_validCard_CorrectlyConstructed() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(card);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(card.getQuestion(),addCardCommand.getCard().getQuestion());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(card.getAnswer(),addCardCommand.getCard().getAnswer());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_SuccessfullyAdded() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(card);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        CardList resultCards \u003d new CardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand.execute(resultCards);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(resultCards.getCards().contains(card));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(1,resultCards.getCards().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 34
    }
  },
  {
    "path": "src/test/java/seedu/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private DeleteCommand deleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private CardList resultCards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        resultCards \u003d new CardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void deleteCommandCommand_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            deleteCommand.execute(resultCards);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void deleteCommandCommand_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int[] deleteIndexes \u003d {-1,1};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        resultCards.addCard(card);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteCommand \u003d new DeleteCommand(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteCommand.execute(resultCards);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void deleteCommandCommand_validCard_CorrectlyConstructed() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(0,deleteCommand.getIndex());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_SuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        resultCards.addCard(card);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCommand.execute(resultCards);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertFalse(resultCards.getCards().contains(card));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(0,resultCards.getCards().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 69,
      "kcubey": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/QuizTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.generateRandomInt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.retrieveCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.quizQuestion;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class QuizTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList emptyCardList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList filledCardList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        emptyCardList \u003d new CardList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList \u003d new CardList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"HyperText Markup Language\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard3 \u003d new Card(\"What does CSS stand for?\", \"Cascading Style Sheets\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList.addCard(flashcard1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList.addCard(flashcard2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList.addCard(flashcard3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void generateRandomInt_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            generateRandomInt(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void retrieveCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            retrieveCard(emptyCardList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void retrieveCard_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card card \u003d retrieveCard(filledCardList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(card.equals(flashcard1) || card.equals(flashcard2) || card.equals(flashcard3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 65
    }
  },
  {
    "path": "src/test/java/seedu/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "/* TODO"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    --\u003e List of things to test for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    1. test for if creating file works"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    2. test if loading from file works"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    3. test if saving to file works"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private CardList cardList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private ByteArrayOutputStream byteOut;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    File tempDir;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    void setUp() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        cardList \u003d new CardList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Card newCard \u003d new Card(\"test question\", \"test answer\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        cardList.addCard(newCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //create the file data"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        byteOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ObjectOutputStream objWriteToBytes \u003d new ObjectOutputStream(byteOut);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.writeObject(cardList.getCards());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.flush();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    void testSaveCards(@TempDir Path tempDir) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Path tempPath \u003d tempDir.resolve(\"temp.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //write to temp file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Files.write(tempPath, byteOut.toByteArray());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(Files.exists(tempPath), \"file exists\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //Check bytes written are the same"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertEquals(Arrays.toString(byteOut.toByteArray()), Arrays.toString(Files.readAllBytes(tempPath)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void testLoadCards(@TempDir Path tempDir) throws EscException, ClassNotFoundException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Path tempPath \u003d tempDir.resolve(\"temp.txt\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Files.write(tempPath, byteOut.toByteArray());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(Files.exists(tempPath), \"file exists\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String filepathStr  \u003d String.valueOf(tempPath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        File tempFile \u003d new File(filepathStr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList\u003cCard\u003e loadCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList tempList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            FileInputStream fileRead \u003d new FileInputStream(tempFile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ObjectInputStream objRead \u003d new ObjectInputStream(fileRead);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            tempList \u003d (ArrayList) objRead.readObject();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            for (int i \u003d 0; i \u003c tempList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                loadCards.add((Card) tempList.get(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objRead.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            throw new EscException(\"Load error\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertEquals(loadCards.size(),cardList.getCards().size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        for (int i \u003d 0; i \u003c loadCards.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            Card expectedCard \u003d cardList.getCard(i + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            Card actualCard \u003d loadCards.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            assertEquals(expectedCard.getQuestion(),actualCard.getQuestion());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            assertEquals(expectedCard.getAnswer(),actualCard.getAnswer());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 107
    }
  },
  {
    "path": "src/test/java/seedu/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.QuizCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_emptyQuery_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String emptyQuery \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String resultMessage \u003d parser.INCORRECT_COMMAND + HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        EscException resultException \u003d new EscException(resultMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(emptyQuery);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(resultException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listQuery_ListCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String listQuery \u003d \"list\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(listQuery);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_helpQuery_HelpCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String helpQuery \u003d \"help\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(helpQuery);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQuery_QuizCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String quizQuery \u003d \"quiz\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(quizQuery);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof QuizCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_exitQuery_ExitCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String exitQuery \u003d \"exit\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(exitQuery);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addQueryWithNoArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addQueries \u003d {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"add\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"add \"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addQueries) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addQueries \u003d {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"add q/\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"add a/\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"add q/ a/\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"add q/something a/\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"add q/ a/something\"};"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addQueries) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addQueryCorrectFormat_AddCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addQuery \u003d \"add q/What does HTTP stand for? a/HyperText Transfer Protocol\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(addQuery);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof AddCardCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteQueryWithNoArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addQuery \u003d \"delete \";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(addQuery);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteQueryWithNonInteger_exceptionThrown() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addQuery \u003d \"delete a\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card item has to be an integer.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(addQuery);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteQueryCorrectFormat_DeleteCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteQuery \u003d \"delete 1\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(deleteQuery);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 145
    }
  },
  {
    "path": "src/test/java/seedu/subjects/SubjectListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private SubjectList subjects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects \u003d new SubjectList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject1 \u003d new Subject(\"TEST 1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject2 \u003d new Subject(\"TEST 2\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubjects() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.getSubject(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int[] getIndexes \u003d {-1,2};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (int i : getIndexes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                subjects.getSubject(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(subjects.getSubject(1), subject1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(subjects.getSubject(2), subject2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void addSubject_SubjectSuccessfullyAdded() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.removeSubject(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int[] deleteIndexes \u003d {-1,1};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                subjects.removeSubject(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_SubjectSuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.removeSubject(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(1,subjects.getSubjects().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.removeSubject(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(0,subjects.getSubjects().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 111,
      "kcubey": 5
    }
  },
  {
    "path": "src/test/java/seedu/subjects/SubjectTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject1 \u003d new Subject(\"Test 1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject2 \u003d new Subject(\"Test 2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void getSubject() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subject1.getSubject().equals(\"Test 1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subject2.getSubject().equals(\"Test 2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "add q/question a/answer"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "kcubey": 2
    }
  }
]
