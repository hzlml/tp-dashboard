[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    archiveVersion \u003d \"v2.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 2,
      "-": 39
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Kezia Kew | [Github](https://github.com/kcubey) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alexander Lim | [Github](https://github.com/alexlim510/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yuanfang Zhang | [Github](https://github.com/Jeremy733) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jeremias Liew | [Github](https://github.com/JeremiasLiew) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 2,
      "alexlim510": 1,
      "kcubey": 1,
      "Jeremy733": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Design](#1-Design)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Implementation](#2-implementation)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - [[Proposed] Subject Feature](#21-proposed-subject-feature)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix B: User Stories](#appendix-b--user-stories)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix D: Glossary](#appendix-d-glossary)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## 1. Design"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Duke class is the main class of the product. It is responsible for:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* At shut down: Shuts down the components and invokes storage method where necessary.\t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The product also contains the following components:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Cards: Holds the data in the type of Card and relative operations"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Subjects: Holds the data in the type of Subject and relative operations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Score: Holds the data in the type of Score and relative operations"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Commands: Deals with user input and communicate CLI to relative methods"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Exceptions: Deals with illegal inputs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Parser: Convert CLI inputs into command keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "In these components, cards and subjects have similar structure. Both of them contains a Card/Subject class and CardList/SubjectList class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Duke, along with all command class and Parser form the logic box of the product."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e![](images/logicuml.jpg)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cbr /\u003eLogic box interacts with Model box, i.e. Card, CardList, Subject, SubjectList, ScoreList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e![](images/modeluml.jpg)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cbr /\u003eFinally the Storage box, i.e. Storage class will handle reading and writing the content to files."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Storage component saves the SubjectList objects in Serializable format and loads it back."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cbr /\u003e![](images/storageuml.jpg)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## 2. Implementation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "### 2.1. [Proposed] Subject Feature"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "#### 2.1.1. Proposed Implementation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The subject feature is an extension to the existing flashcard feature which allows users to categorise their"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "flashcards. This helps users to search for their flashcards more efficiently and also users to quiz by subject. The list of user\u0027s subjects are stored inside the SubjectList. It implements the following operations:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- ``SubjectList#addSubject()`` - Adds a new subject to the subject list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- ``SubjectList#removeSubject()`` - Removes an existing subject from the subject list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- ``SubjectList#listSubjects()`` - List the subjects in the subject list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Step 1. Before the user decides to add a flashcard, he/she can create a subject to store the flashcard using"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "the command ``addsubject s/SUBJECTNAME``."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The following diagram describes how the add subject operation works:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/addsubject_sequence_uml.jpg)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Step 2. The user executes the command ``listsubjects`` to view the subjects currently stored in the application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Step 3. Once the user has chosen a subject, he/she can execute the command ``addcard s/SUBJECTINDEX q/QUESTION a/ANSWER``"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "to add a flashcard into the subject. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The following diagram describes how the add card operation works:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/addcard_sequence_uml.jpg)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "#### 2.1.2. Design Considerations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "##### Aspect: How user can add a flashcard into a subject"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- **Alternative 1 (current choice)**: Include the subject index in the command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - Simple implementation without involving states"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The user will have to list the subjects first to determine the subject index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- **Alternative 2**: Select the subject first, then add a flashcard."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The command for adding a card will be shorter."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - Multiple states will be involved."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The application will become more complex as different states use different commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The application can also become more difficult to use as users can be unclear about the states."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### 2.x. Quiz Feature"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.x.1. Implementation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The quiz feature now incorporates random testing, builds upon the subject feature to allows users to set how many questions to quiz for a selected subject. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This helps users to quiz by subject, and get a score at the end of each quiz. It implements the following operations:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Quiz#quizQuestion()`` - Outputs a random question to the user that has not been tested before in this quiz session."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Quiz#quizNext()`` - Retrieves a random question from the available questions for that subject."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Quiz#markCorrectness()`` - Marks user answer as correct or wrong based on user\u0027s judgement."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Given below is an example usage scenario and how the quiz mechanism behaves at each step."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 1. Before the user decides to start a quiz, he/she has to create a subject using the command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " ``addsubject s/SUBJECTNAME``, and add flashcards to that subject using the command ``addcard s/SUBJECTINDEX q/QUESTION a/ANSWER``."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 2. The user can start a quiz by indicating a subject and the number of questions to quiz using the command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "``quiz s/SUBJECTINDEX n/NUMBERTOQUIZ``. If the number of questions to quiz is not specified, all the questions stored"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "in that subject will be quizzed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The following diagram describes how the quiz operation works:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](images/quiz_sequence_uml.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 3: The quiz will end upon completion of the specified number of questions, or by stopping the quiz using the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "command ``exitquiz``."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.x.2. Design Considerations"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Aspect: How the user can control how many questions to be quizzed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 1**: Always quiz all stored questions for that subject, but allow users to stop the quiz whenever they want."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Simple implementation."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user will have to keep track of how many questions he has already done."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 2 (current choice)**: Allow the user to both set the number of questions to quiz and to stop the quiz halfway."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - More flexibility for the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - More complex implementation."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user has to type in a longer command to start a quiz, or they will be quizzed with all questions by default."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### 2.x. Score Feature"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.x.1. Implementation"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The score feature builds on the quiz feature, storing the score for each quiz session in a ScoreList. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This allows users to see all past scores and track any improvements. It implements the following operations:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Subject#showScores()`` - Shows all scores and the average score from all quiz sessions for that subject, in chronological order."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``ScoreList#getAvg()`` - Calculates the average score for all scores in the ScoreList."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``ScoreList#listScores()`` - Lists out all scores in the ScoreList."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Given below is an example usage scenario and how the score mechanism behaves at each step."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 1. Before the user can view his scores for a particular subject, he first needs to have done at least one quiz"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "session for that subject using the command ``quiz s/SUBJECTINDEX n/NUMBERTOQUIZ``."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 2. The user can view the score history and average score of a selected subject, if he has done at least one"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "quiz session for that subject, using the command ``score s/SUBJECTINDEX``."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The following diagram describes how the score operation works:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](images/scores_sequence_uml.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.x.2. Design Considerations"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Aspect: How to format the score history shown to the user"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 1 (current choice)**: Show all scores in chronological order and in percentages of number of correct answers / number of"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " questions asked. Also show the average percentage score of all the scores."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Users can easily keep track of their progress and if they have been improving."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - A percentage score allows users to compare quiz results even if a different amount of questions were chosen to be quizzed in the quiz sessions."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - More complex implementation."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - If the user attempts the quiz many times, showing every quiz score may clutter up the ui, and might be too much"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    information for the user to take in."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 2**: Show just the average score, and number of attempts taken."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Clean ui, no clutter."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Simple implementation."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - User will be unable to track his progress."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### 2.x. Save/Load Feature"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kcubey"
        },
        "content": "#### 2.x.1 Implementation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The save/load process is facilitated with the `java.io.Serializable` interface, which converts the given object to a byte stream and back."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Writing and reading from the file uses the `java.io.FileOutputStream` and `java.io.FileInputStream` classes respectively."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kcubey"
        },
        "content": "To serialize the object to be written to file via `java.io.FileOutputStream`, it makes use of the `java.io.ObjectOutputStream#writeObject` method."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kcubey"
        },
        "content": "To deserialize the object after being read from file via `java.io.FileInputStream`, it uses the `java.io.ObjectInputStream#readObject()` method."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The reading and writing functions can be found in the `Storage#loadSubs()` and `Storage#saveSubs()` methods respectively."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kcubey"
        },
        "content": "![](images/storage_sequence_uml.jpg)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Target User Profile"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "The product is intended for students preparing for exams. Students can store practice question and model answers in the product."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Also, the product offers students to quiz themselves to practice for exams"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Value Proposition"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The product aims to provide students with more convenient way of doing revision. By using the product students can categorize questions into different subjects and practice more effectively."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|add new cards|view cards and answers to revise|"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|delete cards|organize cards better|"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|quiz myself|practice the questions|"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|list cards|organize the cards|"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "|v1.0|user|save my cards|access them in the future|"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|add cards with subjects|categorize the cards better|"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|list cards by subjects|organize the cards|"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|delete subjects|organize subjects better|"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|view my score|see how I performed|"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|view my test history|see how I performed|"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kcubey"
        },
        "content": "1. The product should be able to run on any platform that has JDK11"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kcubey"
        },
        "content": "2. The product should be able to hold up to 1000 cards"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix D: Glossary"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Running Tests"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kcubey"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Method 1: Using IntelliJ JUnit test runner"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    To run all tests, right-click on the src/test/java folder and choose Run \u0027All Tests\u0027"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Method 2: Using Gradle"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    Open a console and run the command gradlew clean test (Mac/Linux: ./gradlew clean test)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kcubey"
        },
        "content": "See UsingGradle.adoc for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Types of Tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kcubey"
        },
        "content": "There have three types of tests:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Unit tests targeting the lowest level methods/classes."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* e.g. seedu.cards.CardTest"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Integration tests that are checking the integration of multiple code units (those code units are assumed to be working)."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* e.g. seedu.cards.CardListTest"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 78,
      "alexlim510": 54,
      "kcubey": 44,
      "Jeremy733": 18,
      "-": 22
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "# Exam Study Companion"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Introduction "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Exam Study Companion (ESC) is for students who want to improve on their grades by quizzing themselves through flashcards. ESC is a command line (CLI) program, with a simple, no frills user interface that is quick and easy to use."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is a flashcard study program, where you are able to create cards and categorise them, and you can also quiz yourself using your flashcards."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is meant to help students be able to study more effectively using the medium that they prefer, providing a simple, easy to use interface for the timestrapped student who prefers using CLI based applications and are able to type quickly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Useful links"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "** Do note that for v2.0 release, the program is UNABLE to load your previous session"
      }
    ],
    "authorContributionMap": {
      "kcubey": 11,
      "-": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Exam Study Companion (ESC) is for students who want to improve on their grades by quizzing themselves through flashcards. ESC is a command line (CLI) program, with a simple, no frills user interface that is quick and easy to use."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is a flashcard study program, where you are able to create cards and categorise them, and you can also quiz yourself using your flashcards."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is meant to help students be able to study more effectively using the medium that they prefer, providing a simple, easy to use interface for the timestrapped student who prefers using CLI based applications and are able to type quickly. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "** Do note that for v2.0 release, the program is UNABLE to load your previous session"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "1. Ensure that you have Java 11 or above installed on your computer."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "2. Download the latest version of `ESC` from [here](https://github.com/AY1920S2-CS2113-T15-2/tp/releases/tag/v2.0)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3. Run ESC on your command terminal using this command: `java -jar \u003cdirectory\u003e/duke-v2.0.jar`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Quick Use"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "1. Create a subject."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    * `addsubject s/\u003cname\u003e`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "2. Create cards to add to your subject. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    * `addcard s/\u003cindex\u003e q/\u003cquestion\u003e a/\u003canswer\u003e`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3. Start a quiz to test yourself."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    * `quiz s/\u003cindex\u003e`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "A more detailed explanation of the features are covered in the following sections. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Creating a Subject: `addsubject`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Creates a subject for categorisation of cards."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `addsubject s/\u003cSUBJECTNAME\u003e`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `SUBJECTNAME` can be in a natural language format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addsubject s/biology`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addsubject s/CHEM`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Listing all Subjects"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Lists all the current subjects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format \u0026 Usage: `listsubject`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Deleting a Subject"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Deletes the specified subject AND all the cards in the subject."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `deletesubject s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletesubject s/1`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletesubject s/4`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Creating a Card"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Creates a card and adds it to the specified subject."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `addcard s/\u003cINDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addcard s/2 q/What year was NUS established? a/1980`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addcard s/1 q/How many electrons does oxygen have? a/8`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Listing Cards in a Subject"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Lists all the cards in the specified subject."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `listcard s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `listcard s/1`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `listcard s/2`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Deleting a Card"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Deletes the specified card from the specified category "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `deletecard s/\u003cS-INDEX\u003e c/\u003cC-INDEX\u003e`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `S-INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `C-INDEX` is based on the index of the card. This can be found using the `listcard s/\u003cS-INDEX\u003e` command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletecard s/2 c/1`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletecard s/5 c/17`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Starting a Quiz"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Starts a quiz of the specified number of questions from the specified subject."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `quiz s/\u003cINDEX\u003e n/\u003cNUMBER\u003e`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `NUMBER` is the number of questions the user wishes to be quizzed on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `quiz s/2 n/15`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `quiz s/1 n/5`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Viewing Past Scores"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Shows the previous scores of quizzes from the specified subject "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `score s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `score s/1`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `score s/2`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Displaying the Help Page"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Displays the list of available commands."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format \u0026 Usage: `help`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Exiting the Program"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Closes the program "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format \u0026 Usage: `exit` "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**Q**: Can I import question packs from other people?"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**A**: At the current stage, no, but it is in the development list for if we continue with this in future!"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**Q**: If I exit the program, will all my existing cards be saved?"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**A**: Yes! All your subjects, cards and scores are saved. To ensure that your data is not lost, do not delete the folder called \u0027data\u0027 that is created when you first run the program."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: If I delete a subject, what happens to the cards?"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: By deleting a subject, you\u0027ll delete everything in that subject. So be careful with this."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: Can I create a card that does not belong to any subject?"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Sorry, you can\u0027t. You must need a subject for every card."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: Can I create a card that belongs to multiple subject?"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Sorry, at current stage this is not supported."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: Will I be able to export the cards to a external file i.e. a text file?"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Sorry, at current stage this is not supported."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: Can I add something else other than exam date to the programm? "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Feel free to add anything you\u0027d like."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Add a subject `addsubject s/\u003cSUBJECTNAME\u003e`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* List all subjects `listsubject`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Delete a subject and all its cards `deletesubject s/\u003cINDEX\u003e`                    "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Add a card into the specified subject `addcard s/\u003cINDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* List all cards in specified subject `listcard s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Delete the specified card from the specified category `deletecard s/\u003cINDEX\u003e c/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Start a quiz from the specified subject `quiz s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Get previous scores of quizzes from specified subject `score s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Displays the help page `help`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Exits the program `exit` "
      }
    ],
    "authorContributionMap": {
      "kcubey": 114,
      "Jeremy733": 24,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/cards/Card.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Flashcard object used to store a question and its answer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class Card implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Card(String question, String answer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 21,
      "kcubey": 3
    }
  },
  {
    "path": "src/main/java/seedu/cards/CardList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Represents the entire deck of flashcards."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class CardList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.cards \u003d new ArrayList\u003cCard\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public CardList(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.cards \u003d cards;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cCard\u003e getCards() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.cards;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds a card to the deck."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param card Card to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Removes a card from the deck."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index Index of card to be removed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void removeCard(int index) throws EscException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            cards.remove(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns a card based on its index number."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index Index of card to retrieve."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return card Card corresponding to index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Card getCard(int index) throws EscException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // assuming that our question index starts from 1 and not 0."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card card;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            card \u003d cards.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *  Lists all the cards in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void listCards() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (cards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"You haven\u0027t added anything yet.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"Here is the list of questions.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                System.out.println(j + \". \" + cards.get(i).getQuestion());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns size of the cardlist."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.cards.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 61,
      "alexlim510": 14,
      "kcubey": 3,
      "Jeremy733": 16
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddCardCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the AddCard command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class AddCardCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addcard\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To add card, type command:​addcard s/[SUBJECT INDEX] \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            + \"q/[QUESTION] a/[ANSWER]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameters for card creation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public AddCardCommand(int subjectIndex, Card card) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns card to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns index of subject."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Adds a card into the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        CardList cardList \u003d chosenSubject.getCardList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cardList.addCard(this.card);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 53
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assert false : \"This method is to be implemented by child AddCommand classes\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 13
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddExamCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exams.Exam;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Command class for the AddExamCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class AddExamCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addevent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To add an upcoming event, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            + \"type command: addevent e/[DESCRIPTION] d/[DATE]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Exam exam;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Initialises the parameters for score command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public AddExamCommand(Exam exam) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.exam \u003d exam;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * View all the scores attained for a subject."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cExam\u003e exams \u003d subjectList.getExamDates();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        exams.add(this.exam);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 39
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddSubjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class AddSubjectCommand extends AddCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addsubject\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To add subject, type command:​ addsubject s/[SUBJECT NAME]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameters for subject creation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public AddSubjectCommand(String subjectName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectName \u003d subjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the subject name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public String getSubjectName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return this.subjectName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Adds a subject into the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjects) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject newSubject \u003d new Subject(this.subjectName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjects.addSubject(newSubject);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 1,
      "alexlim510": 34
    }
  },
  {
    "path": "src/main/java/seedu/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Parent command class for the other commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public abstract void execute(SubjectList subjects) throws EscException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Check if it is an exit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return true or false depending on whether it is an exit command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 27
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteCardCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the DeleteCard command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class DeleteCardCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletecard\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To delete card, type command: delete s/[SUBJECT INDEX] c/[CARD INDEX]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int cardIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public DeleteCardCommand(int subjectIndex, int cardIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.cardIndex \u003d cardIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the index of the subject to be deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the index of the card to be deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getCardIndex() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return cardIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Removes a card from the application. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        CardList cardList \u003d chosenSubject.getCardList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cardList.removeCard(this.cardIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        //ui display result list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 47
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the Delete command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Executes the command. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assert false : \"This method is to be implemented by child DeleteCommand classes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 17
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteSubjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the DeleteSubjectCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class DeleteSubjectCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletesubject\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To delete subject, type command: delete s/[SUBJECT INDEX]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public DeleteSubjectCommand(int subjectIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the index of the subject to be deleted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Removes a card from the application. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList.removeSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        //ui display"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 33
    }
  },
  {
    "path": "src/main/java/seedu/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Exit Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To exit, type command: exit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Lists the cards currently stored in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        UI.exitEsc();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 30,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Help Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To view help menu, type command: help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Displays the help menu."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        UI.printHelp();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 22,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListCardCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the ListCard command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ListCardCommand extends ListCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listcard\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To list cards, type command: listcard s/[SUBJECT INDEX] \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameter for list card."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public ListCardCommand(int subjectIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the subject index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Lists the cards currently stored in the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        chosenSubject.getCardList().listCards();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 40
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the List command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assert false : \"This method is to be implemented by child ListCommand classes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 19
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListExamCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exams.Exam;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Command Class for the ListCard command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class ListExamCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listevents\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To list cards, type command: listevents\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Lists all exams currently stored in the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cExam\u003e exams \u003d subjectList.getExamDates();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subjectList.listUpcoming(exams);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 28
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListSubjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the ListSubject command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ListSubjectCommand extends ListCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listsubject\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To list subjects, type command: listsubject\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Lists the cards currently stored in the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList.listSubjects(subjectList.getSubjects());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 23
    }
  },
  {
    "path": "src/main/java/seedu/commands/QuizCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Quiz;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Quiz Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To quiz, type command:​quiz s/[SUBJECT INDEX] n/[NUMBER OF QUESTIONS]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private int numToQuiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public QuizCommand(int subjectIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.numToQuiz \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public QuizCommand(int subjectIndex, int numToQuiz) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.numToQuiz \u003d numToQuiz;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Chooses a random card and displays it\u0027s question and answer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int numQuestions \u003d chosenSubject.getCardList().size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (numToQuiz \u003e numQuestions) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            Quiz.quizQuestion(chosenSubject, numQuestions);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            Quiz.quizQuestion(chosenSubject, numToQuiz);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 14,
      "alexlim510": 30,
      "kcubey": 1
    }
  },
  {
    "path": "src/main/java/seedu/commands/ScoreCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the ScoreCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To view score history of a subject, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            + \"type command: score s/[SUBJECT INDEX]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameters for score command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public ScoreCommand(int subjectIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * View all the scores attained for a subject."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Subject subject \u003d subjectList.getSubject(subjectIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subject.showScores();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 6,
      "alexlim510": 29
    }
  },
  {
    "path": "src/main/java/seedu/commands/ShowUpcomingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exams.Exam;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Command class for the ScoreCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class ShowUpcomingCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showupcoming\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To show upcoming events, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            + \"type command: showupcoming d/[NUMBER OF DAYS UPCOMING]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private int dateRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Initialises the parameters for score command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ShowUpcomingCommand(int dateRange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * View all the scores attained for a subject."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cExam\u003e exams \u003d subjectList.getExamDates();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cExam\u003e upcomingExams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Exam exam : exams) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            LocalDate date \u003d exam.getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            long period \u003d today.until(date, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (period \u003c\u003d dateRange \u0026\u0026 period \u003e\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                upcomingExams.add(exam);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Collections.sort(upcomingExams);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subjectList.listUpcoming(upcomingExams);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static UI ui \u003d new UI();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Reads the user\u0027s commands and executes them until the user issues the exit command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                //subjectList \u003d new SubjectList(storage.loadSubs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                c.execute(subjectList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                storage.saveSubs(subjectList.getSubjects());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //assert false : \"dummy to fail\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 19,
      "Jeremy733": 2,
      "kcubey": 12,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/Quiz.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.score.ScoreList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Generate a random number with a set upper limit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param upperRange Upper limit of random number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Random number generated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int generateRandomInt(int upperRange) throws EscException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (upperRange \u003c 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return random.nextInt(upperRange);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Retrieves a random card from the card list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param cardlist Card list where card is taken from."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return retrievedCard"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static Card retrieveCard(CardList cardlist) throws EscException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int size \u003d cardlist.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card retrievedCard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int randomInt \u003d generateRandomInt(size);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            retrievedCard \u003d cardlist.getCard(randomInt);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return retrievedCard;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Outputs a random question, and outputs its answer after the user has entered an answer."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param subject Subject to be tested."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException when chosen subject has no questions."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void quizQuestion(Subject subject, int numToQuiz) throws EscException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        HashSet\u003cCard\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CardList cards \u003d subject.getCardList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (cards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"No questions for this subject.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ScoreList scores \u003d subject.getScoreList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int max \u003d cards.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int attempted \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double score \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        while (attempted \u003c max \u0026\u0026 attempted !\u003d numToQuiz) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                double obtainedScore \u003d quizNext(cards, set);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (obtainedScore \u003d\u003d -1.0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                score +\u003d obtainedScore;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                attempted++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double percentage \u003d score / attempted;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double percentageScore \u003d (double) Math.round(percentage * 10000) / 100;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        scores.add(percentageScore);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Quiz Finished!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"You Scored: \" + percentageScore + \"%\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Outputs a random question that hasn\u0027t been quizzed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param cards Stack of cards to quiz from."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param set Set of cards that has already been quizzed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Score obtained from question."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static double quizNext(CardList cards, HashSet\u003cCard\u003e set) throws EscException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card questionCard \u003d retrieveCard(cards);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        while (set.contains(questionCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            questionCard \u003d retrieveCard(cards);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        set.add(questionCard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String question \u003d questionCard.getQuestion();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Question: \" + question);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String userAnswer \u003d ui.readAnswer();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (userAnswer.equals(\"exitquiz\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return -1.0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String answer \u003d questionCard.getAnswer();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Correct Answer: \" + answer);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double score \u003d markCorrectness();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Mark the correctness of the answer."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Score of the question."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if marking format is wrong."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static double markCorrectness() throws EscException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double score;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String check \u003d ui.checkCorrectness();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (check.equals(\"Y\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            score \u003d 1.0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Answer marked as correct.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else if (check.equals(\"N\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            score \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Answer marked as incorrect.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"Wrong input format.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 124,
      "alexlim510": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static Path filepath \u003d Paths.get(dir, \"data\", \"cards.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static String filepathStr  \u003d String.valueOf(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static File saveFile \u003d new File(filepathStr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static Path saveDir \u003d Paths.get(dir, \"data\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * For Unit testing ONLY, saveFile should not be accessed by user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @param altSaveFile the alternate File object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @throws EscException if file creation fails"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public Storage(File altSaveFile) throws EscException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        saveFile \u003d altSaveFile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Checks if the save file exists and creates a new save file if it does not exist."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @throws EscException if File is unable to be created"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static void ensureFileExists() throws EscException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                saveFile.createNewFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                throw new EscException(\"File creation error\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Loads any pre-existing cards from the save file and creates a new card list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @return pre-existing card list (if any) or a new list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static ArrayList\u003cSubject\u003e loadSubs() throws EscException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList\u003cSubject\u003e loadSubs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList tempList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ensureFileExists();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                FileInputStream fileRead \u003d new FileInputStream(saveFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                ObjectInputStream objRead \u003d new ObjectInputStream(fileRead);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                tempList \u003d (ArrayList) objRead.readObject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                for (int i \u003d 0; i \u003c tempList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                    loadSubs.add((Subject) tempList.get(i));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                objRead.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                throw new EscException(\"Load error\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        return loadSubs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Saves the current card list to the save file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @param currSub the current subject list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void saveSubs(ArrayList\u003cSubject\u003e currSub) throws EscException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ensureFileExists();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            FileOutputStream fileWrite \u003d new FileOutputStream(saveFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ObjectOutputStream objWrite \u003d new ObjectOutputStream(fileWrite);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.writeObject(currSub);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.flush();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            throw new EscException(\"Save error\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 99
    }
  },
  {
    "path": "src/main/java/seedu/duke/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Prints the greeting message when ESC is started."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String greeting \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String logo \u003d \" ______  _____  _____\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|  ____|/ ____|/ ____|\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"| |__  | (___ | |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|  __|  \\\\___ \\\\| |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"| |____ ____) | |____\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|______|_____/ \\\\_____|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        greeting +\u003d \"Hello from\\n\" + logo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"______________________\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Reads the user command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @return User command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"Enter command: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"[Command entered: \" + userInput + \"]\"); //TODO remove if not necessary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Reads the user answer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return User answer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static String readAnswer() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Enter answer: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"[Answer entered: \" + userInput + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Requests the user to indicate if his answer was right or wrong."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return User marking"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static String checkCorrectness() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Please indicate if your answer is correct (Y/N):\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        userInput \u003d userInput.toUpperCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        while (!userInput.equals(\"Y\") \u0026\u0026 !userInput.equals(\"N\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Please enter only (Y/N):\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            userInput \u003d userInput.toUpperCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *  Prints a list of commands used in the programme."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String helpMessage \u003d \"Here\u0027s a list of things you can do:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\taddsubject s/\u003cSUBJECTNAME\u003e                 Add a subject\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\tlistsubject                                List all subjects\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\tdeletesubject s/\u003cINDEX\u003e                    Delete a subject and all its cards\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\taddcard s/\u003cINDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e  Add a card into the specified subject\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\tlistcard s/\u003cINDEX\u003e                         List all cards in specified subject\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\tdeletecard s/\u003cINDEX\u003e c/\u003cINDEX\u003e             Delete the specified card from the specified category\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\tquiz s/\u003cINDEX\u003e n/\u003cNUMBER\u003e                  Start a quiz of the specified number of questions from\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                        + \" the specified subject\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\tscore s/\u003cINDEX\u003e                            View previous scores of quizzes from specified \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                        + \"subject\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\thelp                                       Displays the help page\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\texit                                       Exits the program\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //+ \"\\t\u003e View Answer: ​       answer [INDEX] e.g. answer 1\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //+ \"\\tselect \u003cINDEX\u003e Select a subject by subject index\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(helpMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Exits the ESC program."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void exitEsc() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 28,
      "Jeremy733": 49,
      "kcubey": 29
    }
  },
  {
    "path": "src/main/java/seedu/exams/Exam.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Exam implements Comparable\u003cExam\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private String topic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private LocalDate examDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Exam(String topic, LocalDate examDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getTopic() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.topic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.examDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Custom comparable between two exams. Sorted by date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param o Other exam to compare against."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Integer depicting result of comparison."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public int compareTo(Exam o) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.examDate.compareTo(o.getDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.topic + \": \"  + this.examDate.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 37
    }
  },
  {
    "path": "src/main/java/seedu/exception/EscException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": " * The general exception message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class EscException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public EscException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        super(\"An error has occurred! \\n\\t\" + message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 10
    }
  },
  {
    "path": "src/main/java/seedu/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddSubjectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteSubjectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListSubjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ScoreCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.QuizCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.commands.ShowUpcomingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.commands.AddExamCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.commands.ListExamCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exams.Exam;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Contains methods to parse user inputs into sensible commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String QUESTION_ARG \u003d \"q/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String ANSWER_ARG \u003d \"a/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String SUBJECT_ARG \u003d \"s/\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String CARD_ARG \u003d \"c/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static final String QUIZ_ARG \u003d \"n/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static final String EVENT_ARG \u003d \"e/\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static final String DATE_ARG \u003d \"d/\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String INCORRECT_COMMAND \u003d \"Incorrect Command\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return The command issued by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException An exception is issued if the command issued by the user is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static Command parse(String userInput) throws EscException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] arguments \u003d userInput.split(\" \",2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String command \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case AddSubjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareAddSubject(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareAddCard(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case DeleteSubjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareDeleteSubject(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareDeleteCard(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ListSubjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new ListSubjectCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ListCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareListCard(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case QuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareQuiz(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ScoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareScore(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        case AddExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return prepareAddExam(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        case ListExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return new ListExamCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        case ShowUpcomingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return prepareShowUpcoming(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(INCORRECT_COMMAND + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the AddSubject command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return AddSubject Command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareAddSubject(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, AddSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], AddSubjectCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String subjectName \u003d arguments[1].replace(SUBJECT_ARG, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (subjectName.trim().isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"A subject name is required.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the AddCard command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return AddCard Command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareAddCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], AddCardCommand.MESSAGE_USAGE, SUBJECT_ARG, QUESTION_ARG, ANSWER_ARG);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] cardArgs \u003d getQuestionAndAnswer(arguments[1],AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card cardToAdd \u003d new Card(cardArgs[0],cardArgs[1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new AddCardCommand(subjectIndex, cardToAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the DeleteSubject command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return DeleteSubject Command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareDeleteSubject(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, DeleteSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], DeleteSubjectCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the DeleteCard command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return DeleteCard Command."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareDeleteCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, DeleteCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], DeleteCardCommand.MESSAGE_USAGE, SUBJECT_ARG, CARD_ARG);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int cardIndex \u003d getCardIndex(arguments[1]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new DeleteCardCommand(subjectIndex, cardIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the ListCard command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return ListCard Command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareListCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, ListCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], ListCardCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new ListCardCommand(subjectIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the Quiz command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return Quiz Command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareQuiz(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, QuizCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        checkArgumentPrefixes(arguments[1], QuizCommand.MESSAGE_USAGE, SUBJECT_ARG, QUIZ_ARG);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int numToQuiz \u003d getNumberToQuiz(arguments[1]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new QuizCommand(subjectIndex, numToQuiz);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the Quiz command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return Quiz Command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareScore(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, ScoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], ScoreCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new ScoreCommand(subjectIndex);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses the user input into arguments for the AddExam command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return AddExamDate Command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static Command prepareAddExam(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkNumberOfArguments(arguments, AddExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkArgumentPrefixes(arguments[1], AddExamCommand.MESSAGE_USAGE, DATE_ARG, EVENT_ARG);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String examTopic \u003d getExamTopic(arguments[1]);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate examDate \u003d getExamDate(arguments[1]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Exam exam \u003d new Exam(examTopic, examDate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new AddExamCommand(exam);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses the user input into arguments for the ShowUpcoming command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return ShowUpcoming Command."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static Command prepareShowUpcoming(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkNumberOfArguments(arguments, ShowUpcomingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkArgumentPrefixes(arguments[1], ShowUpcomingCommand.MESSAGE_USAGE, DATE_ARG);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int dateRange \u003d getDateRange(arguments[1]);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new ShowUpcomingCommand(dateRange);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the number of questions to quiz from the user input."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the number of questions to quiz."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the input number is a non-integer."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static int getNumberToQuiz(String argument) throws EscException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String num \u003d argument.split(QUIZ_ARG)[1].trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int numToQuiz \u003d 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            numToQuiz \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"Number of questions to quiz has to be an integer.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (numToQuiz \u003d\u003d 0) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"Number of questions to quiz has to be a positive integer.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return numToQuiz;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the subject index from the user input."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return the subject index integer."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the subject index is absent or non-integer."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static int getSubjectIndex(String argument) throws EscException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String argWithoutPrefixes \u003d argument.split(QUESTION_ARG)[0].split(CARD_ARG)[0].split(QUIZ_ARG)[0];"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String subjectIndexString \u003d argWithoutPrefixes.replace(SUBJECT_ARG,\"\").trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (subjectIndexString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return Integer.parseInt(subjectIndexString);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (NumberFormatException  e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the card index from the user input."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return the card index integer."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the card index is absent or non-integer."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static int getCardIndex(String argument) throws EscException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String argWithoutPrefixes \u003d argument.split(CARD_ARG)[1];"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String cardIndexString \u003d argWithoutPrefixes.replace(CARD_ARG,\"\").trim();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (cardIndexString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card index is required\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return Integer.parseInt(cardIndexString);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (NumberFormatException  e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card index has to be an integer.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the exam topic from the user input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the exam topic."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the exam topic is absent."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static String getExamTopic(String argument) throws EscException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String argWithoutPrefixes \u003d argument.split(DATE_ARG)[0].split(EVENT_ARG)[1];"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String topicString \u003d argWithoutPrefixes.replace(EVENT_ARG,\"\").trim();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (topicString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The exam topic is required\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return topicString;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the exam date from the user input."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the exam date."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the exam date format is wrong or absent."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static LocalDate getExamDate(String argument) throws EscException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String argWithoutPrefixes \u003d argument.split(DATE_ARG)[1];"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String dateString \u003d argWithoutPrefixes.replace(DATE_ARG,\"\").trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (dateString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The exam date is required\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        DateTimeFormatter dateKey \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][d/M/yyyy][dd/MM/yy][d/M/yy]\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"[yyyy/MM/dd][yyyy-MM-dd][yyyy-M-d]\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"[dd-MM-yyyy][d-M-yyyy][dd-MM-yy][d-M-yy]\""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"[dd.MM.yy][d.M.yy][dd.MM.yyyy][d.M.yyyy]\""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"[dd-MMM-yyyy][d-MMM-yyyy][d-MMM-yy]\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate parsedDate;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            parsedDate \u003d LocalDate.parse(dateString, dateKey);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"Wrong date format.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the date range of upcoming exams to show from the user input."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the date range integer."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the date range is absent or non-integer."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static int getDateRange(String argument) throws EscException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String dateRangeString \u003d argument.replace(DATE_ARG,\"\").trim();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (dateRangeString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The date range is required\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return Integer.parseInt(dateRangeString);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (NumberFormatException  e) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The date range has to be an integer.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Ensure that the number of arguments in the user input is valid."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the user input contains the wrong number of inputs."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static void checkNumberOfArguments(String[] arguments, String errorMessage) throws EscException {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (arguments.length \u003c 2) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Checks that the user input has the required prefixes."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if there are missing prefixes."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static void checkArgumentPrefixes(String argument, String errorMessage, String...prefixes)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throws EscException {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String p : prefixes) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            if (!argument.contains(p)) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the question and answer from the user input."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return String array containing the question and the answer."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the user input is missing the question or answer."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static String[] getQuestionAndAnswer(String argument, String errorMessage) throws EscException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String secondaryArgs \u003d argument.split(QUESTION_ARG)[1];"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String [] cardArgs \u003d secondaryArgs.split(ANSWER_ARG);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (cardArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cardArgs[0] \u003d cardArgs[0].trim();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cardArgs[1] \u003d cardArgs[1].trim();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (cardArgs[0].isEmpty() || cardArgs[1].isEmpty()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return cardArgs;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 135,
      "alexlim510": 250,
      "kcubey": 6
    }
  },
  {
    "path": "src/main/java/seedu/score/ScoreList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.score;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Contains the scores for all quizzes taken."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class ScoreList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cDouble\u003e scores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds a score to the ScoreList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param score Score to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void add(double score) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.scores.add(score);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the average of all stored scores."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return avgScore Average of all scores."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public double getAvg() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double totalScore \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (double score : scores) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            totalScore +\u003d score;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double avgScore \u003d totalScore / scores.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return avgScore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Prints out all the past score history for selected subject."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void listScores() throws EscException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (scores.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"No test history yet.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Past test history:\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (double score : scores) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(counter + \") \" + score);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Average Score: \" + getAvg());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 50,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/subjects/Subject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.score.ScoreList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": " * Flashcard object used to store a question and its answer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class Subject implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private CardList cardList \u003d new CardList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ScoreList scoreList \u003d new ScoreList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public Subject(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public CardList getCardList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return cardList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ScoreList getScoreList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.scoreList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Shows all the past score history for this subject."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void showScores() throws EscException  {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.scoreList.listScores();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 16,
      "alexlim510": 4,
      "Jeremy733": 20
    }
  },
  {
    "path": "src/main/java/seedu/subjects/SubjectList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exams.Exam;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private ArrayList\u003cSubject\u003e subjects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cExam\u003e exams;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public SubjectList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.subjects \u003d new ArrayList\u003cSubject\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.exams \u003d new ArrayList\u003cExam\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public SubjectList(ArrayList\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        this.exams \u003d new ArrayList\u003cExam\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public SubjectList(ArrayList\u003cSubject\u003e subjects, ArrayList\u003cExam\u003e examDates) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.exams \u003d examDates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public ArrayList\u003cSubject\u003e getSubjects() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.subjects;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cExam\u003e getExamDates() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.exams;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Adds a subject to the deck."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param subject Subject to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void addSubject(Subject subject) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.add(subject);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Removes a subject from the deck."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param index Index of subject to be removed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void removeSubject(int index) throws EscException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.remove(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Returns a card based on its index number."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param index Index of subject to retrieve."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @return subject Subject corresponding to index."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public Subject getSubject(int index) throws EscException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        Subject subject;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            subject \u003d subjects.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Lists all the subjects in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param subjects A list of subjects to be displayed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void listSubjects(ArrayList\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (subjects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"You haven\u0027t added anything yet.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"Here is the list of subjects.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            for (int i \u003d 0; i \u003c subjects.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                System.out.println(j + \". \" + subjects.get(i).getSubject());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Lists all upcoming events."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param exams List of upcoming exams."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void listUpcoming(ArrayList\u003cExam\u003e exams) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (exams.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"No upcoming events.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Here is the list of upcoming events.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (int i \u003d 0; i \u003c exams.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                System.out.println(j + \". \" + exams.get(i).toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.subjects.size();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 27,
      "alexlim510": 1,
      "Jeremy733": 79,
      "kcubey": 7
    }
  },
  {
    "path": "src/test/java/seedu/cards/CardListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CardListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList cards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards \u003d new CardList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"Hypertext Markup Language\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCards() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.getCard(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int[] getIndexes \u003d {-1,2};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (int i : getIndexes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                cards.getCard(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(cards.getCard(0), flashcard1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(cards.getCard(1), flashcard2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void addCard_CardSuccessfullyAdded() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.removeCard(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int[] deleteIndexes \u003d {-1,1};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                cards.removeCard(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_CardSuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.addCard(flashcard2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.removeCard(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertFalse(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(1,cards.getCards().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.removeCard(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertFalse(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(0,cards.getCards().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 113,
      "alexlim510": 2
    }
  },
  {
    "path": "src/test/java/seedu/cards/CardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"HyperText Markup Language\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void getQuestion() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard1.getQuestion().equals(\"What does HTTP stand for?\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard2.getQuestion().equals(\"What does HTML stand for?\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void getAnswer() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard1.getAnswer().equals(\"HyperText Transfer Protocol\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard2.getAnswer().equals(\"HyperText Markup Language\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 30
    }
  },
  {
    "path": "src/test/java/seedu/commands/AddCardCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class AddCardCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private AddCardCommand addCardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void addCardCommand_noSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        EscException expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void addCardCommand_validCard_correctlyConstructed() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(subjectIndex,card);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(card.getQuestion(),addCardCommand.getCard().getQuestion());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(card.getAnswer(),addCardCommand.getCard().getAnswer());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        //System registered index \u003d user inputted index - 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex - 1,addCardCommand.getSubjectIndex());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_successfullyAdded() throws EscException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(\"Biology\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(subjectList.getSubject(subjectIndex - 1).getCardList().getCards().contains(card));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex,subjectList.getSubject(subjectIndex - 1).getCardList().getCards().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 54
    }
  },
  {
    "path": "src/test/java/seedu/commands/AddSubjectCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class AddSubjectCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private AddSubjectCommand addSubjectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName \u003d \"Test\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void addSubjectCommand_validSubject_correctlyConstructed() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectName,addSubjectCommand.getSubjectName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validSubject_successfullyAdded() throws EscException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject subject \u003d new Subject(subjectName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList.addSubject(subject);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectList.getSubject(subjectIndex - 1).getSubject(),subjectName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 32
    }
  },
  {
    "path": "src/test/java/seedu/commands/DeleteCardCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class DeleteCardCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private DeleteCardCommand deleteCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private SubjectList subjectList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectName \u003d \"Biology\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(1,1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(1,1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_indexOutOfRange_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int[] deleteIndexes \u003d {0,2};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteCardCommand \u003d new DeleteCardCommand(1,i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void deleteCardCommand_validCard_CorrectlyConstructed() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int cardIndex \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(subjectIndex,cardIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex - 1,deleteCardCommand.getSubjectIndex());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(cardIndex - 1, deleteCardCommand.getCardIndex());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_SuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(subjectIndex,1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertFalse(subjectList.getSubject(subjectIndex - 1).getCardList().getCards().contains(card));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(0,subjectList.getSubject(subjectIndex - 1).getCardList().getCards().size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 94
    }
  },
  {
    "path": "src/test/java/seedu/commands/DeleteSubjectCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class DeleteSubjectCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private DeleteSubjectCommand deleteSubjectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private SubjectList subjectList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectName \u003d \"Biology\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand \u003d new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            deleteSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int[] deleteIndexes \u003d {0,2};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteSubjectCommand \u003d new DeleteSubjectCommand(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void deleteCardCommand_validSubjectIndex_CorrectlyConstructed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand \u003d new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex - 1,deleteSubjectCommand.getSubjectIndex());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_SuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand \u003d new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(0,subjectList.getSubjects().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 69
    }
  },
  {
    "path": "src/test/java/seedu/duke/QuizTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.generateRandomInt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.retrieveCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.quizQuestion;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class QuizTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList emptyCardList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList filledCardList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        emptyCardList \u003d new CardList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList \u003d new CardList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"HyperText Markup Language\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard3 \u003d new Card(\"What does CSS stand for?\", \"Cascading Style Sheets\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList.addCard(flashcard1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList.addCard(flashcard2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList.addCard(flashcard3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void generateRandomInt_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            generateRandomInt(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void retrieveCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            retrieveCard(emptyCardList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void retrieveCard_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card card \u003d retrieveCard(filledCardList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(card.equals(flashcard1) || card.equals(flashcard2) || card.equals(flashcard3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 65
    }
  },
  {
    "path": "src/test/java/seedu/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "/* TODO"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    --\u003e List of things to test for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    1. test for if creating file works"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    2. test if loading from file works"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    3. test if saving to file works"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private CardList cardList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private ByteArrayOutputStream byteOut;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    File tempDir;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    void setUp() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        cardList \u003d new CardList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Card newCard \u003d new Card(\"test question\", \"test answer\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        cardList.addCard(newCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //create the file data"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        byteOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ObjectOutputStream objWriteToBytes \u003d new ObjectOutputStream(byteOut);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.writeObject(cardList.getCards());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.flush();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    void testSaveCards(@TempDir Path tempDir) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Path tempPath \u003d tempDir.resolve(\"temp.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //write to temp file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Files.write(tempPath, byteOut.toByteArray());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(Files.exists(tempPath), \"file exists\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //Check bytes written are the same"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertEquals(Arrays.toString(byteOut.toByteArray()), Arrays.toString(Files.readAllBytes(tempPath)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void testLoadCards(@TempDir Path tempDir) throws EscException, ClassNotFoundException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Path tempPath \u003d tempDir.resolve(\"temp.txt\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Files.write(tempPath, byteOut.toByteArray());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(Files.exists(tempPath), \"file exists\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String filepathStr  \u003d String.valueOf(tempPath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        File tempFile \u003d new File(filepathStr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList\u003cCard\u003e loadCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList tempList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            FileInputStream fileRead \u003d new FileInputStream(tempFile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ObjectInputStream objRead \u003d new ObjectInputStream(fileRead);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            tempList \u003d (ArrayList) objRead.readObject();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            for (int i \u003d 0; i \u003c tempList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                loadCards.add((Card) tempList.get(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objRead.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            throw new EscException(\"Load error\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertEquals(loadCards.size(),cardList.getCards().size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        for (int i \u003d 0; i \u003c loadCards.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            Card expectedCard \u003d cardList.getCard(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            Card actualCard \u003d loadCards.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            assertEquals(expectedCard.getQuestion(),actualCard.getQuestion());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            assertEquals(expectedCard.getAnswer(),actualCard.getAnswer());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 1,
      "kcubey": 106
    }
  },
  {
    "path": "src/test/java/seedu/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddSubjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteSubjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListSubjectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ScoreCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.QuizCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_emptyQuery_exceptionThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String emptyQuery \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String resultMessage \u003d parser.INCORRECT_COMMAND + HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        EscException resultException \u003d new EscException(resultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(emptyQuery);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(resultException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listSubjectQuery_ListSubjectCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String listQuery \u003d \"listsubject\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(listQuery);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ListSubjectCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_helpQuery_HelpCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String helpQuery \u003d \"help\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(helpQuery);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_exitQuery_ExitCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String exitQuery \u003d \"exit\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(exitQuery);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addQueryWithNoArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addCardQueries \u003d {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard \"};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addCardQueries) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addCardQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addCardQueries \u003d {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard q/\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard a/\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/ q/\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/1 q/ a/\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/1 q/something a/\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/1 q/ a/something\"};"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addCardQueries) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addCardQueryWithNonInteger_exceptionThrown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addCardQuery \u003d \"addcard s/something q/something a/something\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(addCardQuery);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Query should have thrown an exception.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addCardQueryCorrectFormat_AddCardCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addCardQuery \u003d \"addcard s/1 q/What does HTTP stand for? a/HyperText Transfer Protocol\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(addCardQuery);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof AddCardCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addSubjectQueryWithNoArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addSubjectQueries \u003d {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject \"};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addSubjectQueries) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addSubjectQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"A subject name is required.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addSubjectQueries \u003d {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject s/\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject s/ \"};"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addSubjectQueries) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addSubjectQueryCorrectFormat_AddCardCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addSubjectQuery \u003d \"addsubject s/biology\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(addSubjectQuery);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof AddSubjectCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(DeleteCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] deleteCardQueries \u003d {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletecard\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletecard \"};"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : deleteCardQueries) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteCardQuery \u003d \"deletecard s/something c/1\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(deleteCardQuery);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryWithNonIntegerCard_exceptionThrown() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteCardQuery \u003d \"deletecard s/1 c/something\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card index has to be an integer.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(deleteCardQuery);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryCorrectFormat_DeleteCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteCardQuery \u003d \"deletecard s/1 c/1\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(deleteCardQuery);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof DeleteCardCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(DeleteSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] deleteSubjectQueries \u003d {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletesubject\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletesubject \"};"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : deleteSubjectQueries) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] deleteSubjectQueries \u003d {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletesubject s/\"};"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : deleteSubjectQueries) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteSubjectQuery \u003d \"deletesubject s/something\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(deleteSubjectQuery);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQuery_DeleteSubjectCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteSubjectQuery \u003d \"deletesubject s/1\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(deleteSubjectQuery);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof DeleteSubjectCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(ListCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] listQueries \u003d {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"listcard\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"listcard \"};"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : listQueries) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] listQueries \u003d {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"listcard s/\"};"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : listQueries) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String listCardQuery \u003d \"listcard s/something\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(listCardQuery);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQuery_ListCardCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String listQuery \u003d \"listcard s/1\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(listQuery);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ListCardCommand);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(QuizCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] quizQueries \u003d {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"quiz\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"quiz \"};"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : quizQueries) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] quizQueries \u003d {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            \"quiz s/ n/1\"};"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : quizQueries) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String quizQuery \u003d \"quiz s/something n/1\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(quizQuery);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQuery_QuizCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String quizQuery \u003d \"quiz s/1 n/1\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(quizQuery);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof QuizCommand);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(ScoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] scoreQueries \u003d {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"score\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"score \"};"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : scoreQueries) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] scoreQueries \u003d {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"score s/\"};"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : scoreQueries) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String scoreQuery \u003d \"score s/something\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(scoreQuery);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQuery_ScoreCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String scoreQuery \u003d \"score s/1\";"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(scoreQuery);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ScoreCommand);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 407,
      "kcubey": 3
    }
  },
  {
    "path": "src/test/java/seedu/subjects/SubjectListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private SubjectList subjects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects \u003d new SubjectList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject1 \u003d new Subject(\"TEST 1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject2 \u003d new Subject(\"TEST 2\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubjects() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.getSubject(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int[] getIndexes \u003d {-1,2};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (int i : getIndexes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                subjects.getSubject(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjects.getSubject(0), subject1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjects.getSubject(1), subject2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void addSubject_SubjectSuccessfullyAdded() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.removeSubject(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_indexOutOfRange_exceptionThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int[] deleteIndexes \u003d {-1,1};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                subjects.removeSubject(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_SubjectSuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.removeSubject(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(1,subjects.getSubjects().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.removeSubject(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(0,subjects.getSubjects().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 2,
      "Jeremy733": 109,
      "kcubey": 5
    }
  },
  {
    "path": "src/test/java/seedu/subjects/SubjectTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject1 \u003d new Subject(\"Test 1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject2 \u003d new Subject(\"Test 2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void getSubject() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subject1.getSubject().equals(\"Test 1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subject2.getSubject().equals(\"Test 2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "addsubject s/biology"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "addcard s/1 q/question a/answer"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 2,
      "kcubey": 1
    }
  }
]
