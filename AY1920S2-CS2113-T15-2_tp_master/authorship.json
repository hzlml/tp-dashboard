[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    archiveVersion \u003d \"v2.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 2,
      "-": 39
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "------- | ---- | -------------- | ---------"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cimg src\u003d\"https://avatars3.githubusercontent.com/u/15946120?v\u003d4\" width\u003d\"100\" alt\u003d\"kezia-img\"/\u003e| Kezia Kew | [Github](https://github.com/kcubey) | [Portfolio](/tp/team/kcubey.html)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cimg src\u003d\"https://avatars2.githubusercontent.com/u/52436767?v\u003d4\" width\u003d\"100\" alt\u003d\"alex-img\"/\u003e| Alexander Lim | [Github](https://github.com/alexlim510/) | [Portfolio](/tp/team/alexlim510.html)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/59821379?v\u003d4\" width\u003d\"100\" alt\u003d\"jeremias-img\"/\u003e| Jeremias Liew | [Github](https://github.com/JeremiasLiew) | [Portfolio](/tp/team/JeremiasLiew.html)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cimg src\u003d\"https://avatars2.githubusercontent.com/u/37642497?v\u003d4\" width\u003d\"100\" alt\u003d\"jeremy-img\"/\u003e| Yuanfang Zhang | [Github](https://github.com/Jeremy733) | [Portfolio](/tp/team/Jeremy733.html)"
      }
    ],
    "authorContributionMap": {
      "kcubey": 6,
      "-": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "1.  [Design](#1-design)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "2. [Implementation](#2-implementation)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e2.1. [Subject Feature](#21-subject-feature)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e2.2. [Quiz Feature](#22-quiz-feature)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e2.3. [Score Feature](#23-score-feature)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e2.4. [Event Management Feature](#24-event-management-feature)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e2.5. [Save/Load Feature](#25-saveload-feature)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix B: User Stories](#appendix-b--user-stories)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- [Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "- [Appendix D: Instructions for Manual Testing](#appendix-d-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## 1. Design"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/architecture.jpeg\" width\u003d\"600\" alt\u003d\"Architecture Diagram\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 1. Architecture Diagram  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Duke class is the main class of the product. It is responsible for:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* At shut down: Shuts down the components and invokes storage method where necessary.\t"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The product also contains the following components:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "* Model:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Cards: Holds the data in the type of Card and relative operations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Subjects: Holds the data in the type of Subject and relative operations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Score: Holds the data in the type of Score and relative operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Event: Holds the data in the type of Event and relative operations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "* Logic:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Commands: Deals with user input and communicate CLI to relative methods"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Parser: Convert CLI inputs into command keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "* Storage:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  * Manages the data stored in the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "* UI:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  * Deals with the input from the user and the output to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "* Quiz:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  * Deals with selection of quiz questions and update of scores.  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "* Exceptions: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  * Deals with illegal inputs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "In these components, cards and subjects have similar structure. Both of them contains a Card/Subject class and CardList/SubjectList class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Duke, along with all command class and Parser form the logic box of the product."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/logicuml.jpg\" width\u003d\"600\" alt\u003d\"Logic Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 2. Class diagram of Logic Component  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The flow of the logic component is as follows:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "1) Duke uses the Parser class to parse the command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "2) The corresponding Command object is created and passed to Duke"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "3) The Command object is then executed by Duke  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/command_sequence_diagram.jpeg\" width\u003d\"600\" alt\u003d\"Command Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 3. Sequence diagram of Logic Component  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003eThe Logic box interacts with Model box, i.e. Card, CardList, Subject, SubjectList, ScoreList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- The SubjectList class contains an array the subjects and exams"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- The Event class contains information about the upcoming events."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- The Subject class contains details such as the subject name, a scorelist and a cardlist."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- The ScoreList class contains an array of past scores of the quizzes which the user have completed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- The CardList class contains an array of cards."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- The Card class contains both a question and an answer to the question.  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/modeluml.jpeg\" width\u003d\"600\" alt\u003d\"Model class Diagram\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 4. Class diagram of Model Component  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cbr /\u003eFinally, the Storage box, i.e. Storage class will handle reading and writing of the contents to a file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003cbr /\u003eThe Storage component saves and loads the SubjectList objects using Serializable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/storageuml.jpg\" width\u003d\"600\" alt\u003d\"Storage Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 5. Class diagram of Storage Component  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## 2. Implementation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "### 2.1. Subject Feature"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "#### 2.1.1. Proposed Implementation"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The subject feature is an extension to the existing flashcard feature which allows users to categorise their"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "flashcards. This helps users to search for their flashcards more efficiently and also users to quiz by subject. The list of user\u0027s subjects are stored inside the SubjectList. It implements the following operations:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- ``SubjectList#addSubject()`` - Adds a new subject to the subject list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- ``SubjectList#removeSubject()`` - Removes an existing subject from the subject list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- ``SubjectList#listSubjects()`` - List the subjects in the subject list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Step 1. Before the user decides to add a flashcard, he/she can create a subject to store the flashcard using"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "the command ``addsubject s/SUBJECTNAME``."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The following diagram describes how the add subject operation works:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/addsubject_sequence_diagram.jpeg\" width\u003d\"600\" alt\u003d\"Addsubject Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 6. Sequence diagram for addsubject command  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 2. The user executes the command ``listsubject`` to view the subjects currently stored in the application."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Step 3. Once the user has chosen a subject, he/she can execute the command ``addcard s/SUBJECTINDEX q/QUESTION a/ANSWER``"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "to add a flashcard into the subject. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The following diagram describes how the add card operation works:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/addcard_sequence_uml.jpeg\" width\u003d\"600\" alt\u003d\"Addcard Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 7. Sequence diagram of addcard command.  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "#### 2.1.2. Design Considerations"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "##### Aspect: How user can add a flashcard into a subject"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- **Alternative 1 (current choice)**: Include the subject index in the command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - Simple implementation without involving states"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The user will have to list the subjects first to determine the subject index."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- **Alternative 2**: Select the subject first, then add a flashcard."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The command for adding a card will be shorter."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - Multiple states will be involved."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The application will become more complex as different states use different commands."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    - The application can also become more difficult to use as users can be unclear about the states."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### 2.2. Quiz Feature"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.2.1. Implementation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The quiz feature now incorporates random testing, builds upon the subject feature to allows users to set how many questions to quiz for a selected subject. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This helps users to quiz by subject, and get a score at the end of each quiz. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "As of the current version, the quiz feature does not support automatic marking, and the user will have to mark their "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "own answers for each question. Automatic marking may be added in future versions."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The quiz feature implements the following operations:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Quiz#quizQuestion()`` - Outputs a random question to the user that has not been tested before in this quiz session."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Quiz#quizNext()`` - Retrieves a random question from the available questions for that subject."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Quiz#markCorrectness()`` - Marks user answer as correct or wrong based on user\u0027s judgement."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Given below is an example usage scenario and how the quiz mechanism behaves at each step."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 1. Before the user decides to start a quiz, he/she has to create a subject using the command"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " ``addsubject s/SUBJECTNAME``, and add flashcards to that subject using the command ``addcard s/SUBJECTINDEX q/QUESTION a/ANSWER``."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 2. The user can start a quiz by indicating a subject and the number of questions to quiz using the command"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "``quiz s/SUBJECTINDEX n/NUMBERTOQUIZ``. If the number of questions to quiz is not specified (e.g. if ``quiz s/SUBJECTINDEX`` is entered)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ", all the questions stored in that subject will be quizzed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The following diagram describes how the quiz operation works:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/quiz_sequence_uml.png\" width\u003d\"600\" alt\u003d\"Quiz Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 8. Sequence diagram of quiz command.  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 3: The quiz will end upon completion of the specified number of questions, or by stopping the quiz using the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "command ``exitquiz``."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.2.2. Design Considerations"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Aspect: How the answers are marked for correctness"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 1 (current choice)**: Display the correct answer after the user has submitted his answer, and prompt"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "the user to indicate if his answer is correct or wrong."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Allows the user to input open-ended questions with open-ended answers."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Ensures that all answers will be marked accurately."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The quiz will be slower for the user as they will have to input an extra input every answer."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 2**: Automatically mark answers submitted by the user by matching it with the correct stored answer."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user will not need to type any extra inputs, and the quiz process will be shorter."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user will be restricted to adding short-answer questions without open-ended answers."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - There will be a high probability of inaccurate marking due to factors such as typographical errors or difference in phrasing answers."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Aspect: How the user can control how many questions to be quizzed"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 1**: Always quiz all stored questions for that subject, but allow users to stop the quiz whenever they want."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Simple implementation."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user will have to keep track of how many questions he has already done."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 2 (current choice)**: Allow the user to both set the number of questions to quiz and to stop the quiz halfway."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - More flexibility for the user."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - More complex implementation."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user has to type in a longer command to start a quiz, or they will be quizzed with all questions by default."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### 2.3. Score Feature"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.3.1. Implementation"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The score feature builds on the quiz feature, storing the score for each quiz session in a ScoreList. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This allows users to see all past scores and track any improvements. It implements the following operations:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``Subject#showScores()`` - Shows all scores and the average score from all quiz sessions for that subject, in chronological order."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``ScoreList#getAvg()`` - Calculates the average score for all scores in the ScoreList."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``ScoreList#listScores()`` - Lists out all scores in the ScoreList."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Given below is an example usage scenario and how the score mechanism behaves at each step."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 1. Before the user can view his scores for a particular subject, he first needs to have done at least one quiz"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "session for that subject using the command ``quiz s/SUBJECTINDEX n/NUMBERTOQUIZ``."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 2. The user can view the score history and average score of a selected subject, if he has done at least one"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "quiz session for that subject, using the command ``score s/SUBJECTINDEX``."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The following diagram describes how the score operation works:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cimg src\u003d\"images/scores_sequence_uml.png\" width\u003d\"600\" alt\u003d\"Score Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 9. Sequence diagram of score command  "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.3.2. Design Considerations"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Aspect: How to format the score history shown to the user"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 1 (current choice)**: Show all scores in chronological order and in percentages of number of correct answers / number of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " questions asked. Also show the average percentage score of all the scores."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Users can easily keep track of their progress and if they have been improving."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - A percentage score allows users to compare quiz results even if a different amount of questions were chosen to be quizzed in the quiz sessions."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - More complex implementation."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - If the user attempts the quiz many times, showing every quiz score may clutter up the ui, and might be too much"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    information for the user to take in."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 2**: Show just the average score, and number of attempts taken."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Clean ui, no clutter."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - Simple implementation."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - User will be unable to track his progress."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### 2.4. Event Management Feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.4.1 Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The event feature builds on the quiz feature by adding another aid to the user when preparing for an exam/event."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This feature allows the user to add and keep track of upcoming events, such as exams/tests. It implements the following operations:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``SubjectList#addEvent()`` - Adds a new event."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``SubjectList#removeEvent()`` - Removes an existing event."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``SubjectList#listEvents()`` - List all events in the order they were added."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- ``SubjectList#showUpcoming()`` - Shows upcoming events in chronological order."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Given below is an example usage scenario and how the event mechanism behaves at each step."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 1. Before the user can manage his/her events, he/she needs to first add events using the"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " command ``addevent e/DESCRIPTION d/DATE``."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The following diagram describes how the add event operation works:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  \u003cimg src\u003d\"images/addevent_sequence_uml.png\" width\u003d\"600\" alt\u003d\"Addevent Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003eFigure 10. Sequence diagram of addevent command  "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 2. The user executes the command ``listevent`` to view the events currently stored in the application."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Step 3. The user can then execute the command ``showupcoming d/DAYS`` to show events that are upcoming within ``DAYS``"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "number of days."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The following diagram describes how the show upcoming operation works:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  \u003cimg src\u003d\"images/showupcoming_sequence_uml.png\" width\u003d\"600\" alt\u003d\"Showupcoming Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  \u003cbr /\u003e Figure 11. Sequence diagram of showupcoming command  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.4.2. Design Considerations"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Aspect: How to format the score history shown to the user"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 1 (current choice)**: Allow the user to store any type of event (does not have to be a test/exam, and"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "does not have to be tied to a pre-existing subject)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros: "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - More flexibility for the user to add any upcoming events that he needs to keep track of."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user can keep track of any upcoming exams that do not belong to any of the subjects stored in the app."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons: "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user is unable to sort his exam/event by subjects."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "- **Alternative 2**: Only allow the user to add exams, and only to pre-existing subjects already in the app."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Pros:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user is able to sort his exam/event by subjects."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  - Cons:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    - The user does not have the flexibility to add anything other than exams for subjects that have been created."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### 2.5. Save/Load Feature"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2.5.1 Implementation"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The save/load process is facilitated with the `java.io.Serializable` interface, which converts the given object to a byte stream and back."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Writing and reading from the file uses the `java.io.FileOutputStream` and `java.io.FileInputStream` classes respectively."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The choice of the `java.io.Serializable` interface as a save/load function is because it maintains the object structure. "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kcubey"
        },
        "content": "In addition, the implementation of the interface is easy and simple to understand as does not require much code, and does not require manipulation of raw data. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kcubey"
        },
        "content": "This ensures that it is easy to modify the Storage methods if other elements/objects are added to the structure."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kcubey"
        },
        "content": "To serialize the object to be written to file via `java.io.FileOutputStream`, it makes use of the `java.io.ObjectOutputStream#writeObject` method."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kcubey"
        },
        "content": "To deserialize the object after being read from file via `java.io.FileInputStream`, it uses the `java.io.ObjectInputStream#readObject()` method."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The reading and writing functions can be found in the `Storage#loadSubs()` and `Storage#saveSubs()` methods respectively."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kcubey"
        },
        "content": "`Storage#loadSubs()` is run on initialisation of the program. "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kcubey"
        },
        "content": "It first checks if there is a preexisting saved file:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* If there is a save file, the previous session is loaded into the program."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* If there is no save file, a new save file is created and the default structure is initialised."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kcubey"
        },
        "content": "`Storage#saveSubs()` is run after every command execution. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kcubey"
        },
        "content": "This ensures that if the program is force-exited or suddenly crashes, the last instruction has been saved."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Once run, it will first check if the save file exists, in the event that the file has been deleted during the program. "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kcubey"
        },
        "content": "If so, it will create the file, then the method will continue on to save the latest SubjectList structure into the save file. "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "  \u003cimg src\u003d\"images/storage_sequence_uml.jpg\" width\u003d\"600\" alt\u003d\"Storage Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  \u003cbr /\u003e Figure 12. Sequence diagram of Storage class  "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Target User Profile"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "The product is intended for students preparing for exams. Students can store practice question and model answers in the product."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Also, the product offers students to quiz themselves to practice for exams"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Value Proposition"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "The product aims to provide students with more convenient way of doing revision. By using the product students can categorize questions into different subjects and practice more effectively."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|add new cards|view cards and answers to revise|"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|delete cards|organize cards better|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|quiz myself|practice the questions|"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v1.0|user|list cards|organize the cards|"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "|v1.0|user|save my cards|access them in the future|"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|add cards with subjects|categorize the cards better|"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|list cards by subjects|organize the cards|"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|delete subjects|organize subjects better|"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|view my score|see how I performed|"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.0|user|view my test history|see how I performed|"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.1|user|add upcoming event dates|know what to prepare|"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.1|user|delete upcoming event dates|no longer have reminders of the events|"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "|v2.1|user|edit the cards|change the mistakes done when adding|"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kcubey"
        },
        "content": "1. The product should be able to run on any platform that has JDK11"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kcubey"
        },
        "content": "2. The product should be able to hold up to 1000 cards"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "3. The product should be able to store up to 1000 events"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "## Appendix D: Instructions for Manual Testing"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Running Tests"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Method : Using IntelliJ JUnit test runner"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    To run all tests, right-click on the src/test/java/seedu folder to select the part to be tested and run as Junit in IDE."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Types of Tests"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kcubey"
        },
        "content": "There have three types of tests:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Unit tests targeting the lowest level methods/classes."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* e.g. seedu.cards.CardTest"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Integration tests that are checking the integration of multiple code units (those code units are assumed to be working)."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* e.g. seedu.cards.CardListTest"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 157,
      "alexlim510": 119,
      "Jeremy733": 22,
      "kcubey": 49,
      "-": 23
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "# Exam Study Companion"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Introduction "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Exam Study Companion (ESC) is for students who want to improve on their grades by quizzing themselves through flashcards. ESC is a command line (CLI) program, with a simple, no frills user interface that is quick and easy to use."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is a flashcard study program, where you are able to create cards and categorise them, and you can also quiz yourself using your flashcards."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is meant to help students be able to study more effectively using the medium that they prefer, providing a simple, easy to use interface for the timestrapped student who prefers using CLI based applications and are able to type quickly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Useful links"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "kcubey": 9,
      "-": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "The Exam Study Companion (ESC) is for students who want to improve on their grades by quizzing themselves through flashcards. ESC is a command line (CLI) program, with a simple, no frills user interface that is quick and easy to use."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is a flashcard study program, where you are able to create cards and categorise them, and you can also quiz yourself using your flashcards."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "ESC is meant to help students be able to study more effectively using the medium that they prefer, providing a simple, easy to use interface for the timestrapped student who prefers using CLI based applications and are able to type quickly. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "** Do note that for v2.0 release, the program is UNABLE to load your previous session"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "1. Ensure that you have Java 11 or above installed on your computer."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "2. Download the latest version of `ESC` from [here](https://github.com/AY1920S2-CS2113-T15-2/tp/releases/tag/v2.0)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3. Run ESC on your command terminal using this command: `java -jar \u003cdirectory\u003e/duke-v2.0.jar`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Quick Use"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "1. Create a subject."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    * `addsubject s/\u003cname\u003e`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "2. Create cards to add to your subject. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    * `addcard s/\u003cindex\u003e q/\u003cquestion\u003e a/\u003canswer\u003e`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "3. Start a quiz to test yourself."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    * `quiz s/\u003cindex\u003e`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "A more detailed explanation of the features are covered in the following sections. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Creating a Subject: `addsubject`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Creates a subject for categorisation of cards."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `addsubject s/\u003cSUBJECTNAME\u003e`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `SUBJECTNAME` can be in a natural language format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addsubject s/biology`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addsubject s/CHEM`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing addsubject:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/addsubject.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Listing all Subjects"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Lists all the current subjects."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format \u0026 Usage: `listsubject`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing listsubject:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/listsubject.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Deleting a Subject"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Deletes the specified subject AND all the cards in the subject."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `deletesubject s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletesubject s/1`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletesubject s/4`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing deletesubject:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/deletesubject.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Creating a Card"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Creates a card and adds it to the specified subject."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `addcard s/\u003cINDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addcard s/2 q/What year was NUS established? a/1980`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `addcard s/1 q/How many electrons does oxygen have? a/8`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "![](images/addcard.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Listing Cards in a Subject"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Lists all the cards in the specified subject."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `listcard s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `listcard s/1`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `listcard s/2`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing listcard:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "![](images/listcard.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Deleting a Card"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Deletes the specified card from the specified category "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `deletecard s/\u003cS-INDEX\u003e c/\u003cC-INDEX\u003e`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `S-INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `C-INDEX` is based on the index of the card. This can be found using the `listcard s/\u003cS-INDEX\u003e` command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletecard s/2 c/1`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `deletecard s/5 c/17`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing deletecard:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/deletecard.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Editing a Card"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Edits the specified card "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Format: `editcard s/\u003cS-INDEX\u003e c/\u003cC-INDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "* The `S-INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "* The `C-INDEX` is based on the index of the card. This can be found using the `listcard s/\u003cS-INDEX\u003e` command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "* `editcard s/1 c/1 q/what is this docunment a/user guide`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Screenshot showing deletecard:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "![](images/editcard.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Starting a Quiz"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Starts a quiz of the specified number of questions from the specified subject."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Format: `quiz s/\u003cINDEX\u003e n/\u003cNUMBER\u003e`  OR  `quiz s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `NUMBER` is the number of questions the user wishes to be quizzed on."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This is an optional field that can be omitted. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* If the `NUMBER` is not specified or if the `NUMBER` exceeds the total number of stored questions"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "for that subject, ALL questions in that subject will be tested instead."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* A quiz can be aborted early by inputting `exitquiz` anytime during the quiz."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `quiz s/2 n/15`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* `quiz s/1`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing quiz:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/quiz.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Viewing Past Scores"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Shows the previous scores of quizzes from the specified subject in chronological order."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format: `score s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* The `INDEX` is based on the index of the subject. This can be found using the `listsubject` command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `score s/1`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* `score s/2`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing score:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/score.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### Adding New Event"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Creates a new event and adds it to the app."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Format: `addevent e/\u003cDESCRIPTION\u003e d/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* The `DESCRIPTION` is a text description of the event to be input by the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* The accepted `DATE` formats are:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    1. dd-MM-yy, dd-MM-yyyy"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    2. dd/MM/yy, dd/MM/yyyy"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    3. dd.MM.yy, dd.MM.yyyy"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    4. dd-MMM-yy, dd-MMM-yyyy (e.g. 1-May-2020)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* `addevent e/CS2113T exam d/2/5/2020`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* `addevent e/GE4214 final proj presentation d/16-04-2020`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Screenshot showing score:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](images/addevent.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### Listing Stored Events"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Lists all the stored events in the order they were added."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Format: `listevent`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Screenshot showing listevent:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](images/listevent.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### Showing Upcoming Events"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Shows all upcoming events within a user-specified time frame, listed in chronological order."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Format: `showupcoming d/\u003cDATE RANGE\u003e`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* The `DATE RANGE` defines the date range of upcoming events to show."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* `showupcoming d/30`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* `showupcoming d/5`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Screenshot showing showupcoming:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](images/showupcoming.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### Deleting an Event"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Deletes an event based on its index."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Format: `deleteevent e/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* The `INDEX` is based on the index of the event. This can be found using the `listevent` command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* `deleteevent e/2`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* `deleteevent e/1`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Screenshot showing deleteevent:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "![](images/deleteevent.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Displaying the Help Page"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Displays the list of available commands."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format \u0026 Usage: `help`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Screenshot showing help:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "![](images/help.png)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Exiting the Program"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Closes the program "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Format \u0026 Usage: `exit` "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**Q**: Can I import question packs from other people?"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**A**: At the current stage, no, but it is in the development list for if we continue with this in future!"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kcubey"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**Q**: If I exit the program, will all my existing cards be saved?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kcubey"
        },
        "content": "**A**: Yes! All your subjects, cards and scores are saved. To ensure that your data is not lost, do not delete the folder called \u0027data\u0027 that is created when you first run the program."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: If I delete a subject, what happens to the cards?"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: By deleting a subject, you\u0027ll delete everything in that subject. So be careful with this."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: Can I create a card that does not belong to any subject?"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Sorry, you can\u0027t. You must need a subject for every card."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: Can I create a card that belongs to multiple subject?"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Sorry, at current stage this is not supported."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**Q**: Will I be able to export the cards to a external file i.e. a text file?"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Sorry, at current stage this is not supported."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Q**: Can I add something else other than exam date to the program? "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "**A**: Feel free to add anything you\u0027d like."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Q**: Will the app be able to mark my answers automatically?"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**A**: This is not supported at the current stage of development, as users are allowed to add open-ended questions"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "which cannot be accurately marked automatically."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Add a subject `addsubject s/\u003cSUBJECTNAME\u003e`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* List all subjects `listsubject`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Delete a subject and all its cards `deletesubject s/\u003cINDEX\u003e`                    "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Add a card into the specified subject `addcard s/\u003cINDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* List all cards in specified subject `listcard s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Delete the specified card from the specified category `deletecard s/\u003cINDEX\u003e c/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Start a quiz from the specified subject `quiz s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Get previous scores of quizzes from specified subject `score s/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* Add an event `addevent e/\u003cDESCRIPTION\u003e d/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* List all events `listevent`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* Show upcoming events `showupcoming d/\u003cDAYS\u003e`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* Delete an event `deleteevent e/\u003cINDEX\u003e`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Displays the help page `help`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Exits the program `exit` "
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 82,
      "alexlim510": 30,
      "kcubey": 111,
      "Jeremy733": 40,
      "-": 34
    }
  },
  {
    "path": "docs/team/JeremiasLiew.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "# JeremiasLiew - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "## Project - Exam Study Companion (ESC)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Exam Study Companion (ESC) is a command-line based app that is designed to help students preparing for upcoming exams. The app is written in Java and requires JDK 11 to run."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### Major Enhancements: "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Added the Quiz feature"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ What it does: Allows users to quiz themselves using stored flashcards in the selected subject."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Justification: This is one of the main features of the ESC. It allows the user to prepare for exams by revising the knowledge"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "needed for the exam, as practice makes perfect."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Highlights: This enhancement quizzes questions in random order, allows the user to select the number of questions to quiz, and allows the user to quit the quiz prematurely."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "It works alongside the side score feature, in order to further enhance the user\u0027s revision (elaborated below)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Added the Score feature"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ What it does: Allows users to view their score after each quiz, and also a list of their past quiz scores for the selected subject."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Justification: The feature improves on the quiz feature, by allowing the user to view his/her performance after each quiz. It also allows"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "him/her to check their past score history to track their improvement over time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Highlights: This enhancement works alongside the quiz feature to provide a user-friendly and meaningful score history. It also tracks scores for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "quizzes that were ended prematurely, by only taking into account the questions asked before termination."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Added the Event Management feature"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ What it does: Allows users to add, delete and view upcoming events."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Justification: Being able to keep track of upcoming events/deadlines such as exams/project deadlines is helpful to the user as"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "it allows him/her to plan their revision accordingly."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Highlights: This enhancement is not tied to the subject class, meaning that the user has the flexibility to add any events that are"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "deemed important, even those not related to any of the stored subjects. The event feature also allows the user to select the number of days range"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "of upcoming events to show."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### Minor Enhancements: "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Added the Card and CardList classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "##### Added the ability to detect duplicates in questions when adding cards."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ch4\u003e Code contributed: \u003ca href\u003d\"https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dJeremiasLiew\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\" target\u003d\"_blank\"\u003eCode\u003c/a\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003c/h4\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Contributions to the DG :"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ All write-ups and diagrams for the Quiz feature."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ All write-ups and diagrams for the Score feature."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ All write-ups and diagrams for the Event feature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Contributions to the UG :"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ All write-ups and diagrams for the Event feature."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Additions to the Quiz feature write-up and FAQ section based on newly implemented Quiz features."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Contributions to team-based tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Bug checking and minor un-intrusive bug fixes for other features."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "+ Added user stories in issue tracker for v1.0."
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 61
    }
  },
  {
    "path": "docs/team/Jeremy733.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "# Jeremy733 - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "## Project - Exam Study Companion (ESC)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "Exam Study Companion (ESC) is a command-line based app that is designed to help students preparing for upcoming exams. The app is written in Java and requires JDK 11 to run."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Major enhancement: added the subject/subjectlist class. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ What it does: allows user to store a subject tag to each card added and has the ability to add, delete and list subjects. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Justification: This feature improves the product because in real life, revision is done according to subjects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Highlights: This enhancement needs to work along side the Card/Cardlist class which alrealy exists. It needs to limit the access to Card/Cardlist class as well to conform with the design."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Major enhancement: added the editCardCommand class. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ What it does: allows user to edit an existing card."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Justification: The feature improves usability as users can now edit a card instead of removing it and add a new one."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Highlights: This enhancement has a new format of inputs therefore existing functions to extract data from the command needs to be adjusted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Major enhancement: added the UI class. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ What it does: allows user to have easier interaction with the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Justification: This feature was done originally in one class. Then it was separated into different classes to  shorten the length of code needed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Highlights: The messages follows each command was later moved to repestive classes to avoid lengthy code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Minor enhancement: Added the view of answers when listing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Minor enhancement: Added the ability to detect duplicates in subjects"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "#### Contributions to the DG : "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Added user stories "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Added the architecture write-up section. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Added test appendix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "#### Contributions to the UG : "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Added FAQ section and editted feature section acorrding to latest codes. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Added screenshots to some features."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Code contributed: \u003ca href\u003d\"https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djeremy733\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\" target\u003d\"_blank\"\u003eCode\u003c/a\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "### Contributions Beyond the Project Team"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "+ Bug fixes and minor improvements for existing features."
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 48
    }
  },
  {
    "path": "docs/team/alexlim510.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "# alexlim510 - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Project - Exam Study Companion (ESC)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "Exam Study Companion (ESC) is a command-line based app that is designed to help students preparing for upcoming exams. The app is written in Java and requires JDK 11 to run."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dalexlim510"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- Major enhancement: added the ability to parse user inputs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - What it does: Parses the user inputs into the correct parameters for the corresponding commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Justification: The application must be able to process user inputs so as to produce the desired outcome."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Highlights: This enhancement affects all commands in the application. Extensive exception handling is required to prevent users from making erroneous inputs.   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- Major enhancement: implemented the general structure of the command classes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - What it does: The command classes follow a structured inheritance hierarchy system with the required attributes and methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Justification: To improve the code for maintenance, integration and testing, it should follow certain OOP principles such as the single responsibility principle.  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "  - Highlights: This enhancement can ease the maintenance of the code. Moreover, the addition of new commands also become easier with the help of the open close principle."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "### Contributions to the UG"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- Added screenshots of UI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- Contributed to section [1. Design](https://ay1920s2-cs2113-t15-2.github.io/tp/DeveloperGuide.html#1-design) and [2.1.[Proposed] Subject Feature](https://ay1920s2-cs2113-t15-2.github.io/tp/DeveloperGuide.html#21-proposed-subject-feature)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- Added figures 1, 2, 3, 4, 6 and 7"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- Helped to maintain the issue tracker"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "- Reviewed code by other team members when required"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "alexlim510": 33
    }
  },
  {
    "path": "docs/team/kcubey.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "# kcubey - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Project - Exam Study Companion (ESC)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Exam Study Companion (ESC) is a command-line based app that is designed to help students preparing for upcoming exams. The app is written in Java and requires JDK 11 to run."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "[https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkcubey](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkcubey)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Storage feature"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * To allow the user the ability to save their session and reopen where they left off"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Overall UI design"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * To have a cohesive UI design for the overall program"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": " "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Contributions to the UG"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* UG layout"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Majority of UG writeup "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Exceptions: Event-related commands, Edit card command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* All write ups \u0026 diagrams related to the Storage feature"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Role: Leader / Code Reviewer-Maintainer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Review and handle all pull requests"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Prepare \u0026 upload releases"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Set up \u0026 close milestones"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Keep team on track of project progress"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * Ensure the repo clears CI actions/gradle checks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Adds issues where identified in reviews / where appropriate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Create \u0026 update wiki page of task breakdown"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "  * [https://github.com/AY1920S2-CS2113-T15-2/tp/wiki](https://github.com/AY1920S2-CS2113-T15-2/tp/wiki)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Maintain ReadMe / AboutUs pages"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Review / Mentoring Contributions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "List of PRs where a review was requested OR a review was required (i.e code changes or clarification needed)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [https://github.com/AY1920S2-CS2113-T15-2/tp/pulls?q\u003dis%3Apr+reviewed-by%3A%40me+is%3Aclosed](https://github.com/AY1920S2-CS2113-T15-2/tp/pulls?q\u003dis%3Apr+reviewed-by%3A%40me+is%3Aclosed)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Team Help/Guidance Provided"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Provided git help/debugging"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* Check in with members"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "### Contributions Beyond the Project Team"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": "PE-D Bugs/Feedback"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [https://github.com/kcubey/ped/issues](https://github.com/kcubey/ped/issues)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Bugs Identified (Forum)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [https://github.com/nus-cs2113-AY1920S2/forum/issues/11](https://github.com/nus-cs2113-AY1920S2/forum/issues/11)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [https://github.com/nus-cs2113-AY1920S2/forum/issues/7](https://github.com/nus-cs2113-AY1920S2/forum/issues/7)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [https://github.com/nus-cs2113-AY1920S2/forum/issues/1](https://github.com/nus-cs2113-AY1920S2/forum/issues/1)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "Contributions to Forum"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "* [https://github.com/nus-cs2113-AY1920S2/forum/issues/37](https://github.com/nus-cs2113-AY1920S2/forum/issues/37)"
      }
    ],
    "authorContributionMap": {
      "kcubey": 56
    }
  },
  {
    "path": "src/main/java/seedu/cards/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Flashcard object used to store a question and its answer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class Card implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Card(String question, String answer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 21,
      "kcubey": 3
    }
  },
  {
    "path": "src/main/java/seedu/cards/CardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Represents the entire deck of flashcards."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class CardList implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.cards \u003d new ArrayList\u003cCard\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public CardList(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.cards \u003d cards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cCard\u003e getCards() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.cards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds a card to the deck."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param card Card to be added."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if checkRepeat fails when question has already been added previously."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void addCard(Card card, Subject subject) throws EscException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkRepeat(card);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"Q:\" + card.getQuestion());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"A:\" + card.getAnswer());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"A new card has been added to subject {\" + subject.getSubject() + \"}\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        listCards();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Checks if the question has already been previously added to this subject."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param card Card to be checked before it is added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if question has already been added previously."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void checkRepeat(Card card) throws EscException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Card existingCard : cards) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String existingQuestion \u003d  existingCard.getQuestion().toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String questionToAdd \u003d card.getQuestion().toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (existingQuestion.equals(questionToAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new EscException(\"This question has already been added.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Removes a card from the deck."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index Index of card to be removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the card list is empty or card index does not exist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void removeCard(int index) throws EscException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            System.out.println(\"The card [Q: \" + cards.get(index).getQuestion() + \" A: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                            + cards.get(index).getAnswer() + \"] has been deleted\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            cards.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns a card based on its index number."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index Index of card to retrieve."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return card Card corresponding to index."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the card list is empty or card index does not exist."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Card getCard(int index) throws EscException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // assuming that our question index starts from 1 and not 0."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card card;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            card \u003d cards.get(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *  Lists all the cards in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void listCards() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (cards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"You haven\u0027t added anything yet.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"Here is the list of questions.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                System.out.println(j + \". \" + cards.get(i).getQuestion());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns size of the cardlist."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.cards.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Removes a card without a return message. For EditCommand usage."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index index of card."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the card list is empty or card index does not exist."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void removeCardSilent(int index) throws EscException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            cards.remove(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Adds a card at the given index. For EditCommand usage."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param card the card to add."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param subject the given subject."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index index of the original card."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void addCardSilent(Card card, Subject subject, int index) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.add(index,card);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 84,
      "alexlim510": 14,
      "Jeremy733": 32,
      "kcubey": 14
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the AddCard command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class AddCardCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addcard\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To add card, type command:​addcard s/[SUBJECT INDEX] \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            + \"q/[QUESTION] a/[ANSWER]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameters for card creation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public AddCardCommand(int subjectIndex, Card card) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns card to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns index of subject."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Adds a card into the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        CardList cardList \u003d chosenSubject.getCardList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cardList.addCard(this.card, chosenSubject);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 52,
      "Jeremy733": 1
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assert false : \"This method is to be implemented by child AddCommand classes\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 13
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.events.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Command class for the AddEventCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addevent\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To add an upcoming event, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            + \"type command: addevent e/[DESCRIPTION] d/[DATE]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Initialises the parameters for the AddEvent command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds an event to the events list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subjectList.addEvent(this.event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 37
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddSubjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class AddSubjectCommand extends AddCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addsubject\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To add subject, type command:​ addsubject s/[SUBJECT NAME]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameters for subject creation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public AddSubjectCommand(String subjectName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectName \u003d subjectName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the subject name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public String getSubjectName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return this.subjectName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Adds a subject into the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void execute(SubjectList subjects) throws EscException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject newSubject \u003d new Subject(this.subjectName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjects.addSubject(newSubject);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 1,
      "alexlim510": 33,
      "Jeremy733": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Parent command class for the other commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public abstract void execute(SubjectList subjects) throws EscException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Check if it is an exit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return true or false depending on whether it is an exit command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 27
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the DeleteCard command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class DeleteCardCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletecard\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To delete card, type command: deletecard \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                                                + \"s/[SUBJECT INDEX] c/[CARD INDEX]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int cardIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public DeleteCardCommand(int subjectIndex, int cardIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.cardIndex \u003d cardIndex - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the index of the subject to be deleted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the index of the card to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getCardIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return cardIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Removes a card from the application. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        CardList cardList \u003d chosenSubject.getCardList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cardList.removeCard(this.cardIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 45,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the Delete command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /** Executes the command. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assert false : \"This method is to be implemented by child DeleteCommand classes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 17
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Command class for the DeleteEventCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class DeleteEventCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteevent\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To delete event, type command: deleteevent e/[EVENT INDEX]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private int eventIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public DeleteEventCommand(int eventIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.eventIndex \u003d eventIndex - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the index of the event to be deleted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public int getEventIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return eventIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /** Removes an event from the application. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subjectList.removeEvent(this.eventIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        //ui display"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 33
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteSubjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the DeleteSubjectCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class DeleteSubjectCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletesubject\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To delete subject, type command: deletesubject s/[SUBJECT INDEX]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public DeleteSubjectCommand(int subjectIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the index of the subject to be deleted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /** Removes a subject from the application. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList.removeSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 2,
      "alexlim510": 30
    }
  },
  {
    "path": "src/main/java/seedu/commands/EditCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class EditCardCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editcard\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To edit card, type command:​editcard s/[SUBJECT INDEX]  c/[CARD INDEX] \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            + \"q/[QUESTION] a/[ANSWER]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private int cardIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Initialises the parameters for card creation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public EditCardCommand(int subjectIndex, int cardIndex, Card card) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.cardIndex \u003d cardIndex - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Returns card to be added."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Returns index of subject."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Adds a card into the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        CardList cardList \u003d chosenSubject.getCardList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cardList.removeCardSilent(cardIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cardList.addCardSilent(card,chosenSubject,cardIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"The selected card has been edited\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"Q: \" + cardList.getCard(cardIndex).getQuestion() + \" / \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                            + \"A: \" + cardList.getCard(cardIndex).getQuestion());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 56,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Exit Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To exit, type command: exit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Lists the cards currently stored in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        UI.exitEsc();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 30,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Help Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To view help menu, type command: help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Displays the help menu."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        UI.printHelp();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 22,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the ListCard command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ListCardCommand extends ListCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listcard\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To list cards, type command: listcard s/[SUBJECT INDEX] \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameter for list card."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public ListCardCommand(int subjectIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the subject index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public int getSubjectIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return subjectIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Lists the cards currently stored in the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        chosenSubject.getCardList().listCards();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 40
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the List command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assert false : \"This method is to be implemented by child ListCommand classes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 19
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.events.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Command Class for the ListEvent command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class ListEventCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listevent\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To list cards, type command: listevents\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Lists all events currently stored in the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d subjectList.getEvents();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subjectList.listUpcoming(events);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 27
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListSubjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command Class for the ListSubject command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ListSubjectCommand extends ListCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listsubject\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To list subjects, type command: listsubject\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Lists the subjects currently stored in the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList.listSubjects(subjectList.getSubjects());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 1,
      "alexlim510": 22
    }
  },
  {
    "path": "src/main/java/seedu/commands/QuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.duke.Quiz;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the Quiz Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To quiz, type command:​quiz s/[SUBJECT INDEX] n/[NUMBER OF QUESTIONS]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private int numToQuiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public QuizCommand(int subjectIndex, int numToQuiz) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.numToQuiz \u003d numToQuiz;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Chooses a random card and displays it\u0027s question and answer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject chosenSubject \u003d subjectList.getSubject(this.subjectIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int numQuestions \u003d chosenSubject.getCardList().size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (numToQuiz \u003e numQuestions) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Insufficient stored questions for this subject.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Setting number of questions to all stored questions (\" + numQuestions + \" questions).\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            Quiz.quizQuestion(chosenSubject, numQuestions);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else if (numToQuiz \u003d\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            Quiz.quizQuestion(chosenSubject, numQuestions);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            Quiz.quizQuestion(chosenSubject, numToQuiz);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 15,
      "alexlim510": 28,
      "kcubey": 1
    }
  },
  {
    "path": "src/main/java/seedu/commands/ScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Command class for the ScoreCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To view score history of a subject, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            + \"type command: score s/[SUBJECT INDEX]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private int subjectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Initialises the parameters for score command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public ScoreCommand(int subjectIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        this.subjectIndex \u003d subjectIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * View all the scores attained for a subject."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Subject subject \u003d subjectList.getSubject(subjectIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subject.showScores();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 6,
      "alexlim510": 29
    }
  },
  {
    "path": "src/main/java/seedu/commands/ShowUpcomingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.events.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Command class for the ShowUpcomingCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class ShowUpcomingCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showupcoming\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To show upcoming events, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            + \"type command: showupcoming d/[NUMBER OF DAYS UPCOMING]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private int dateRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Initialises the parameters for showupcoming command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ShowUpcomingCommand(int dateRange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Show all upcoming events."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void execute(SubjectList subjectList) throws EscException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d subjectList.getEvents();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cEvent\u003e upcomingEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            LocalDate date \u003d event.getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            long period \u003d today.until(date, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (period \u003c\u003d dateRange \u0026\u0026 period \u003e\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                upcomingEvents.add(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Collections.sort(upcomingEvents);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subjectList.listUpcoming(upcomingEvents);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static UI ui \u003d new UI();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Reads the user\u0027s commands and executes them until the user issues the exit command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private void run() throws EscException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        subjectList \u003d new SubjectList(storage.loadObjects());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                c.execute(subjectList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                storage.saveSubs(subjectList.getSubjects(), subjectList.getEvents());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static void main(String[] args) throws EscException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //assert false : \"dummy to fail\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 17,
      "Jeremy733": 2,
      "kcubey": 14,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/Quiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.score.ScoreList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Generate a random number with a set upper limit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param upperRange Upper limit of random number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Random number generated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if card list of chosen subject is empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int generateRandomInt(int upperRange) throws EscException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (upperRange \u003c 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return random.nextInt(upperRange);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Retrieves a random card from the card list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param cardlist Card list where card is taken from."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return retrievedCard"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if card list of chosen subject is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static Card retrieveCard(CardList cardlist) throws EscException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int size \u003d cardlist.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card retrievedCard;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int randomInt \u003d generateRandomInt(size);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            // To check that the randomInt is smaller than the given size."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assert randomInt \u003c size : \"randomly generated index should be smaller than cardlist size\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            retrievedCard \u003d cardlist.getCard(randomInt);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return retrievedCard;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Outputs a random question, and outputs its answer after the user has entered an answer."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param subject Subject to be tested."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException when chosen subject has no questions."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void quizQuestion(Subject subject, int numToQuiz) throws EscException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        HashSet\u003cCard\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CardList cards \u003d subject.getCardList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (cards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"No questions for this subject.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ScoreList scores \u003d subject.getScoreList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int attempted \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double score \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        while (attempted \u003c numToQuiz) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                double obtainedScore \u003d quizNext(cards, set);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (obtainedScore \u003d\u003d -1.0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                score +\u003d obtainedScore;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                attempted++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double percentage \u003d score / attempted;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double percentageScore \u003d (double) Math.round(percentage * 10000) / 100;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        scores.add(percentageScore);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Quiz Finished!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"You Scored: \" + percentageScore + \"%\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Outputs a random question that hasn\u0027t been quizzed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param cards Stack of cards to quiz from."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param set Set of cards that has already been quizzed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Score obtained from question."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if card list of chosen subject is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static double quizNext(CardList cards, HashSet\u003cCard\u003e set) throws EscException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card questionCard \u003d retrieveCard(cards);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        while (set.contains(questionCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            questionCard \u003d retrieveCard(cards);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        set.add(questionCard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String question \u003d questionCard.getQuestion();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Question: \" + question);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String userAnswer \u003d ui.readAnswer();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (userAnswer.equals(\"exitquiz\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return -1.0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // To check that quiz terminates once user inputs the termination command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assert !userAnswer.equals(\"exitquiz\") : \"method should have terminated already\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String answer \u003d questionCard.getAnswer();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Correct Answer: \" + answer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double score \u003d markCorrectness();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Mark the correctness of the answer."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Score of the question."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if marking format is wrong."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static double markCorrectness() throws EscException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double score;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String check \u003d ui.checkCorrectness();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (check.equals(\"Y\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            score \u003d 1.0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Answer marked as correct.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else if (check.equals(\"N\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            score \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Answer marked as incorrect.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"Wrong input format.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 132,
      "alexlim510": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.events.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static Path filepath \u003d Paths.get(dir, \"data\", \"cards.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static String filepathStr  \u003d String.valueOf(filepath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static File saveFile \u003d new File(filepathStr);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static Path saveDir \u003d Paths.get(dir, \"data\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * For Unit testing ONLY, saveFile should not be accessed by user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @param altSaveFile the alternate File object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @throws EscException if file creation fails"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public Storage(File altSaveFile) throws EscException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        saveFile \u003d altSaveFile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Checks if the save file exists and creates a new save file if it does not exist."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @throws EscException if File is unable to be created"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static void ensureFileExists() throws EscException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                saveFile.createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                throw new EscException(\"File creation error\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assert saveFile.exists() : \"the save file should be created\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Loads any pre-existing cards \u0026 exams from the save file into an ArrayList to be initiated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @return ArrayList of pre-existing subject \u0026 exam list (if any) or blank lists"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public static ArrayList\u003cSubject\u003e loadObjects() throws EscException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList tempSub;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList tempEvent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList returnList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList\u003cSubject\u003e loadSubs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList\u003cEvent\u003e loadEvent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ensureFileExists();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            returnList.add(loadSubs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            returnList.add(loadEvent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                FileInputStream fileRead \u003d new FileInputStream(saveFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                ObjectInputStream objRead \u003d new ObjectInputStream(fileRead);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                tempSub \u003d (ArrayList) objRead.readObject();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                for (int i \u003d 0; i \u003c tempSub.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                    loadSubs.add((Subject) tempSub.get(i));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                tempEvent \u003d (ArrayList) objRead.readObject();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                for (int i \u003d 0; i \u003c tempEvent.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                    loadEvent.add((Event) tempEvent.get(i));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                objRead.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                returnList.add(loadSubs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                returnList.add(loadEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                throw new EscException(\"Load error\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        return returnList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Saves the current card list to the save file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @param currSub the current subject list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void saveSubs(ArrayList\u003cSubject\u003e currSub, ArrayList\u003cEvent\u003e currEvent) throws EscException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ensureFileExists();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            FileOutputStream fileWrite \u003d new FileOutputStream(saveFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ObjectOutputStream objWrite \u003d new ObjectOutputStream(fileWrite);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.writeObject(currSub);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.writeObject(currEvent);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.flush();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objWrite.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            throw new EscException(\"Save error \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 119
    }
  },
  {
    "path": "src/main/java/seedu/duke/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Prints the greeting message when ESC is started."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String greeting \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String logo \u003d \" ______  _____  _____\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|  ____|/ ____|/ ____|\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"| |__  | (___ | |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|  __|  \\\\___ \\\\| |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"| |____ ____) | |____\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                + \"|______|_____/ \\\\_____|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        greeting +\u003d \"Hello from\\n\" + logo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"______________________\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Reads the user command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @return User command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"Enter command: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        System.out.println(\"[Command entered: \" + userInput + \"]\"); //TODO remove if not necessary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Reads the user answer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return User answer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static String readAnswer() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Enter answer: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"[Answer entered: \" + userInput + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Requests the user to indicate if his answer was right or wrong."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return User marking"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static String checkCorrectness() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Please indicate if your answer is correct (Y/N):\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        userInput \u003d userInput.toUpperCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        while (!userInput.equals(\"Y\") \u0026\u0026 !userInput.equals(\"N\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Please enter only (Y/N):\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            userInput \u003d userInput.toUpperCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     *  Prints a list of commands used in the programme."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String helpMessage \u003d \"Here\u0027s a list of things you can do:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\taddsubject s/\u003cSUBJECTNAME\u003e                            Add a subject\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\tlistsubject                                           List all subjects\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                + \"\\tdeletesubject s/\u003cINDEX\u003e                               Delete a subject and \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                        + \"all its cards\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                + \"\\taddcard s/\u003cINDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e             Add a card into the \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                        + \"specified subject\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                + \"\\teditcard s/\u003cINDEX\u003e c/\u003cINDEX\u003e q/\u003cQUESTION\u003e a/\u003cANSWER\u003e  Edit an existing \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                        + \"card with new question and answer\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                + \"\\tlistcard s/\u003cINDEX\u003e                                    List all cards \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                        + \"in specified subject\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                + \"\\tdeletecard s/\u003cINDEX\u003e c/\u003cINDEX\u003e                        Delete the specified \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                        + \"card from the specified subject\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                + \"\\tquiz s/\u003cINDEX\u003e n/\u003cNUMBER\u003e                             Start a quiz of \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                        + \"the specified number of questions from\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                        + \" the specified subject\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                + \"\\tscore s/\u003cINDEX\u003e                                       View previous \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                        + \"scores of quizzes from specified \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                        + \"subject\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"\\taddevent e/\u003cDESCRIPTION\u003e d/\u003cDATE\u003e                     Add an event\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"\\tlistevent                                             List all events\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"\\tdeleteevent e/\u003cINDEX\u003e                                 Delete an event\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"\\tshowupcoming d/\u003cDAYS\u003e                                 Show upcoming events\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\thelp                                                  Displays the help page\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                + \"\\texit                                                  Exits the program\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //+ \"\\t\u003e View Answer: ​       answer [INDEX] e.g. answer 1\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(helpMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Exits the ESC program."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void exitEsc() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 33,
      "alexlim510": 14,
      "Jeremy733": 44,
      "kcubey": 23
    }
  },
  {
    "path": "src/main/java/seedu/events/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class Event implements Comparable\u003cEvent\u003e, Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private String topic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private LocalDate eventDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Event(String topic, LocalDate eventDate) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getTopic() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.topic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.eventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Custom comparable between two events. Sorted by date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param o Other event to compare against."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Integer depicting result of comparison."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.eventDate.compareTo(o.getDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.topic + \": \"  + this.eventDate.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 36,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/exception/EscException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": " * The general exception message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class EscException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public EscException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        super(\"An error has occurred! \\n\\t\" + message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kcubey": 10
    }
  },
  {
    "path": "src/main/java/seedu/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddSubjectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.commands.EditCardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteSubjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListSubjectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ScoreCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.QuizCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.commands.ShowUpcomingCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.commands.AddEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.commands.ListEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.events.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " * Contains methods to parse user inputs into sensible commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String QUESTION_ARG \u003d \" q/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String ANSWER_ARG \u003d \" a/\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String SUBJECT_ARG \u003d \" s/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static final String CARD_ARG \u003d \" c/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private static final String QUIZ_ARG \u003d \" n/\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static final String EVENT_ARG \u003d \" e/\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static final String DATE_ARG \u003d \" d/\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static final String INCORRECT_COMMAND \u003d \"Incorrect Command\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into commands."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return The command issued by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException An exception is issued if the command issued by the user is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public static Command parse(String userInput) throws EscException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String userInputTrimmed \u003d userInput.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] arguments \u003d userInputTrimmed.split(\" \",2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String command \u003d arguments[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case AddSubjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareAddSubject(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareAddCard(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            return prepareEditCard(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case DeleteSubjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareDeleteSubject(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareDeleteCard(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ListSubjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new ListSubjectCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ListCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareListCard(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case QuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareQuiz(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ScoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return prepareScore(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return prepareAddEvent(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return prepareDeleteEvent(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        case ShowUpcomingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return prepareShowUpcoming(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(INCORRECT_COMMAND + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the AddSubject command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return AddSubject Command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareAddSubject(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, AddSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], AddSubjectCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String subjectName \u003d arguments[1].replaceFirst(SUBJECT_ARG, \"\").trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (subjectName.trim().isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"A subject name is required.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the AddCard command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return AddCard Command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareAddCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], AddCardCommand.MESSAGE_USAGE, SUBJECT_ARG, QUESTION_ARG, ANSWER_ARG);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] cardArgs \u003d getQuestionAndAnswer(arguments[1],AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card cardToAdd \u003d new Card(cardArgs[0],cardArgs[1]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new AddCardCommand(subjectIndex, cardToAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private static Command prepareEditCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        checkNumberOfArguments(arguments, EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        checkArgumentPrefixes(arguments[1], EditCardCommand.MESSAGE_USAGE, SUBJECT_ARG,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                            CARD_ARG, QUESTION_ARG, ANSWER_ARG);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int cardIndex \u003d getCardIndex(arguments[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String[] cardArgs \u003d getQuestionAndAnswer(arguments[1],EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        Card cardToAdd \u003d new Card(cardArgs[0],cardArgs[1]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return new EditCardCommand(subjectIndex, cardIndex, cardToAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the DeleteSubject command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return DeleteSubject Command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareDeleteSubject(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, DeleteSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], DeleteSubjectCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the DeleteCard command."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return DeleteCard Command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareDeleteCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, DeleteCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], DeleteCardCommand.MESSAGE_USAGE, SUBJECT_ARG, CARD_ARG);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int cardIndex \u003d getCardIndex(arguments[1]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new DeleteCardCommand(subjectIndex, cardIndex);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the ListCard command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return ListCard Command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareListCard(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, ListCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], ListCardCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new ListCardCommand(subjectIndex);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the Quiz command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return Quiz Command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareQuiz(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, QuizCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkArgumentPrefixes(arguments[1], QuizCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(arguments[1]);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int numToQuiz \u003d getNumberToQuiz(arguments[1]);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new QuizCommand(subjectIndex, numToQuiz);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Parses the user input into arguments for the Quiz command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return Quiz Command."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static Command prepareScore(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkNumberOfArguments(arguments, ScoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        checkArgumentPrefixes(arguments[1], ScoreCommand.MESSAGE_USAGE, SUBJECT_ARG);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String[] trimmedArguments \u003d arguments[1].trim().split(\" \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (trimmedArguments.length \u003e 1) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"Too many inputs. \" + ScoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int subjectIndex \u003d getSubjectIndex(\" \" + trimmedArguments[0]);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return new ScoreCommand(subjectIndex);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses the user input into arguments for the AddEvent command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return AddEventDate Command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static Command prepareAddEvent(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkNumberOfArguments(arguments, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkArgumentPrefixes(arguments[1], AddEventCommand.MESSAGE_USAGE, DATE_ARG, EVENT_ARG);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String eventTopic \u003d getEventTopic(arguments[1]);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate eventDate \u003d getEventDate(arguments[1]);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Event event \u003d new Event(eventTopic, eventDate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses the user input into arguments for the DeleteEvent command."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return DeleteEvent Command."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static Command prepareDeleteEvent(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkNumberOfArguments(arguments, DeleteEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkArgumentPrefixes(arguments[1], DeleteEventCommand.MESSAGE_USAGE, EVENT_ARG);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int eventIndex \u003d getEventIndex(arguments[1]);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new DeleteEventCommand(eventIndex);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses the user input into arguments for the ShowUpcoming command."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return ShowUpcoming Command."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static Command prepareShowUpcoming(String[] arguments) throws EscException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkNumberOfArguments(arguments, ShowUpcomingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        arguments[1] \u003d \" \" + arguments[1];"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        checkArgumentPrefixes(arguments[1], ShowUpcomingCommand.MESSAGE_USAGE, DATE_ARG);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int dateRange \u003d getDateRange(arguments[1]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new ShowUpcomingCommand(dateRange);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the number of questions to quiz from the user input."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the number of questions to quiz."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the input number is a non-integer."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static int getNumberToQuiz(String argument) throws EscException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (!argument.contains(QUIZ_ARG)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int numToQuiz \u003d 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String num;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                num \u003d argument.split(QUIZ_ARG)[1].trim();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                numToQuiz \u003d Integer.parseInt(num.split(\" \")[0]);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new EscException(\"Number of questions to quiz has to be an integer.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new EscException(\"The number of questions to quiz is needed.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (numToQuiz \u003c\u003d 0) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new EscException(\"Number of questions to quiz has to be a positive integer.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else if (num.split(\" \").length \u003e 1) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new EscException(\"Too many inputs. \" + QuizCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return numToQuiz;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the subject index from the user input."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return the subject index integer."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the subject index is absent or non-integer."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static int getSubjectIndex(String argument) throws EscException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String argWithoutPrefixes \u003d argument.split(QUESTION_ARG)[0].split(CARD_ARG)[0].split(QUIZ_ARG)[0];"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String subjectIndexString \u003d argWithoutPrefixes.replace(SUBJECT_ARG,\"\").trim();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (subjectIndexString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return Integer.parseInt(subjectIndexString);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (NumberFormatException  e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the card index from the user input."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return the card index integer."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the card index is absent or non-integer."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static int getCardIndex(String argument) throws EscException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            String argWithoutPrefixes \u003d argument.split(CARD_ARG)[1];"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            int space \u003d argument.indexOf(\" \");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            String cardIndexString \u003d argWithoutPrefixes.replace(CARD_ARG,\"\").substring(0, space + 1).trim();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            return Integer.parseInt(cardIndexString);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(\"The card index has to be an integer.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The card index is required.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the event topic from the user input."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the event topic."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the event topic is absent."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static String getEventTopic(String argument) throws EscException {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String argWithoutPrefixes \u003d argument.split(DATE_ARG)[0];"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String topicString \u003d argWithoutPrefixes.replace(EVENT_ARG,\"\").trim();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (topicString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The event topic is required\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return topicString;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the event index from the user input."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the event index integer."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the event index is absent or non-integer."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static int getEventIndex(String argument) throws EscException {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String argWithoutPrefixes \u003d argument.split(EVENT_ARG)[1];"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String eventIndexString \u003d argWithoutPrefixes.replace(EVENT_ARG,\"\").trim();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (eventIndexString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The event index is required.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return Integer.parseInt(eventIndexString);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The event index has to be an integer.\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the event date from the user input."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the event date."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the event date format is wrong or absent."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static LocalDate getEventDate(String argument) throws EscException {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        DateTimeFormatter dateKey \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][d/M/yyyy][dd/MM/yy][d/M/yy]\""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"[dd-MM-yyyy][d-M-yyyy][dd-MM-yy][d-M-yy]\""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"[dd.MM.yyyy][d.M.yyyy][dd.MM.yy][d.M.yy]\""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + \"[dd-MMM-yyyy][d-MMM-yyyy][d-MMM-yy]\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate parsedDate;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String dateString \u003d argument.split(DATE_ARG)[1].trim();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            parsedDate \u003d LocalDate.parse(dateString, dateKey);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The event date is required.\");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"Wrong date format.\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the date range of upcoming events to show from the user input."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return the date range integer."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if the date range is absent or non-integer."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static int getDateRange(String argument) throws EscException {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String dateRangeString \u003d argument.replace(DATE_ARG,\"\").trim();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (dateRangeString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The date range is required\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return Integer.parseInt(dateRangeString);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (NumberFormatException  e) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The date range has to be an integer.\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Ensure that the number of arguments in the user input is valid."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the user input contains the wrong number of inputs."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static void checkNumberOfArguments(String[] arguments, String errorMessage) throws EscException {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (arguments.length \u003c 2) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Checks that the user input has the required prefixes."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if there are missing prefixes."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static void checkArgumentPrefixes(String argument, String errorMessage, String...prefixes)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throws EscException {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String p : prefixes) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            if (!argument.contains(p)) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * Returns the question and answer from the user input."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @return String array containing the question and the answer."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     * @throws EscException if the user input is missing the question or answer."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private static String[] getQuestionAndAnswer(String argument, String errorMessage) throws EscException {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String secondaryArgs \u003d argument.split(QUESTION_ARG,2)[1];"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String [] cardArgs \u003d secondaryArgs.split(ANSWER_ARG,2);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (cardArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cardArgs[0] \u003d cardArgs[0].trim();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        cardArgs[1] \u003d cardArgs[1].trim();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        if (cardArgs[0].isEmpty() || cardArgs[1].isEmpty()) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            throw new EscException(errorMessage);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        return cardArgs;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 187,
      "alexlim510": 253,
      "Jeremy733": 22,
      "kcubey": 6
    }
  },
  {
    "path": "src/main/java/seedu/score/ScoreList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.score;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Contains the scores for all quizzes taken."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "public class ScoreList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cDouble\u003e scores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds a score to the ScoreList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param score Score to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void add(double score) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.scores.add(score);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns the average of all stored scores."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return avgScore Average of all scores."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public double getAvg() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double totalScore \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (double score : scores) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            totalScore +\u003d score;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double avgScore \u003d totalScore / scores.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        double roundedAvg \u003d (double) Math.round(avgScore * 100) / 100;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return roundedAvg;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Prints out all the past score history for selected subject."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws EscException if there is not past test history for this subject."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void listScores() throws EscException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (scores.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"No test history yet.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Past test history:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (double score : scores) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            // To check that all scores are less than or equal to 100%"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assert score \u003c\u003d 100.0 : \"scores should be less than or equal to 100%\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(counter + \") \" + score + \"%\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.out.println(\"Average Score: \" + getAvg() + \"%\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 56,
      "kcubey": 2
    }
  },
  {
    "path": "src/main/java/seedu/subjects/Subject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.score.ScoreList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": " * Flashcard object used to store a question and its answer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class Subject implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private CardList cardList \u003d new CardList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ScoreList scoreList \u003d new ScoreList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public Subject(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    public CardList getCardList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return cardList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ScoreList getScoreList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.scoreList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Shows all the past score history for this subject."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void showScores() throws EscException  {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.scoreList.listScores();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 16,
      "alexlim510": 4,
      "Jeremy733": 20
    }
  },
  {
    "path": "src/main/java/seedu/subjects/SubjectList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.events.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.duke.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private ArrayList\u003cSubject\u003e subjects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    UI ui \u003d new UI();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public SubjectList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.subjects \u003d new ArrayList\u003cSubject\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * Constructor for loading SubjectList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     * @param returnObj Arraylist of subjects and exams."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public SubjectList(ArrayList returnObj) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        this.subjects \u003d (ArrayList\u003cSubject\u003e) returnObj.get(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        this.events \u003d (ArrayList\u003cEvent\u003e) returnObj.get(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public SubjectList(ArrayList\u003cSubject\u003e subjects, ArrayList\u003cEvent\u003e eventDates) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.events \u003d eventDates;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public ArrayList\u003cSubject\u003e getSubjects() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.subjects;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.events;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Adds a subject to the deck."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param subject Subject to be added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void addSubject(Subject subject) throws EscException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (checkSubjectDuplicate(subject) \u003d\u003d true) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"This subject already exists.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjectDuplicateRemind(subject);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.add(subject);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(subject.getSubject() + \" has been added.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            listSubjects(subjects);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     *Checks for duplicate subject."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param subject Subject to be checked."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public boolean checkSubjectDuplicate(Subject subject) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String name \u003d subject.getSubject().replace(\" \",\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (Subject oldSubject : subjects) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            if (name.toLowerCase().equals(oldSubject.getSubject().replace(\" \",\"\").toLowerCase())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return  false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "     *Checks for duplicate subject and reminds user of existing subjects."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param subject Subject to be checked."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void subjectDuplicateRemind(Subject subject) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        String name \u003d subject.getSubject().replace(\" \",\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (Subject oldSubject : subjects) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            if (name.toLowerCase().equals(oldSubject.getSubject().replace(\" \",\"\").toLowerCase())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                System.out.println(\"Do you mean {\" + oldSubject.getSubject() + \"}\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Removes a subject from the deck."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param index Index of subject to be removed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void removeSubject(int index) throws EscException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.print(subjects.get(index).getSubject() + \" has been deleted\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.remove(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            listSubjects(subjects);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Returns a card based on its index number."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param index Index of subject to retrieve."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @return subject Subject corresponding to index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public Subject getSubject(int index) throws EscException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        Subject subject;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            subject \u003d subjects.get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            throw new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * Lists all the subjects in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     * @param subjects A list of subjects to be displayed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public static void listSubjects(ArrayList\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        if (subjects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"You haven\u0027t added anything yet.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            System.out.println(\"Here is the list of subjects.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            for (int i \u003d 0; i \u003c subjects.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                System.out.println(j + \". \" + subjects.get(i).getSubject());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds an event to the deck."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param event Event to be added."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Removes an event from the deck."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param index Index of event to be removed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void removeEvent(int index) throws EscException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (this.events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The event list is empty.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            events.remove(index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new EscException(\"The event item does not exist.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Lists all upcoming events."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param events List of upcoming events."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void listUpcoming(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"No upcoming events.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Here is the list of upcoming events.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                System.out.println(j + \". \" + events.get(i).toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        return this.subjects.size();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 49,
      "alexlim510": 1,
      "Jeremy733": 116,
      "kcubey": 14
    }
  },
  {
    "path": "src/test/java/seedu/cards/CardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CardListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList cards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private SubjectList subjectList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void setUp() throws EscException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards \u003d new CardList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"Hypertext Markup Language\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject \u003d new Subject(\"Junit\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjectList.addSubject(subject);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCards() throws EscException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard2,subject);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.getCard(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void addCard_repeatedQuestion_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"This question has already been added.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card flashcard3 \u003d new Card(\"What does HTTP stand for?\", \"High Trippy Turning Pony\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.addCard(flashcard3,subject);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_indexOutOfRange_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int[] getIndexes \u003d {-1,2};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (int i : getIndexes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                cards.getCard(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void getCard_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard2,subject);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(cards.getCard(0), flashcard1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(cards.getCard(1), flashcard2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void addCard_CardSuccessfullyAdded() throws EscException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            cards.removeCard(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_indexOutOfRange_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int[] deleteIndexes \u003d {-1,1};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                cards.removeCard(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void removeCard_CardSuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cards.addCard(flashcard2,subject);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.removeCard(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertFalse(cards.getCards().contains(flashcard1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(1,cards.getCards().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        cards.removeCard(0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertFalse(cards.getCards().contains(flashcard2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertEquals(0,cards.getCards().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 116,
      "alexlim510": 2,
      "Jeremy733": 16
    }
  },
  {
    "path": "src/test/java/seedu/cards/CardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"HyperText Markup Language\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void getQuestion() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard1.getQuestion().equals(\"What does HTTP stand for?\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard2.getQuestion().equals(\"What does HTML stand for?\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void getAnswer() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard1.getAnswer().equals(\"HyperText Transfer Protocol\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(flashcard2.getAnswer().equals(\"HyperText Markup Language\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 30
    }
  },
  {
    "path": "src/test/java/seedu/commands/AddCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class AddCardCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private AddCardCommand addCardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void addCardCommand_noSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        EscException expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void addCardCommand_validCard_correctlyConstructed() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(subjectIndex,card);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(card.getQuestion(),addCardCommand.getCard().getQuestion());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(card.getAnswer(),addCardCommand.getCard().getAnswer());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        //System registered index \u003d user inputted index - 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex - 1,addCardCommand.getSubjectIndex());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_successfullyAdded() throws EscException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Card card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(\"Biology\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(subjectList.getSubject(subjectIndex - 1).getCardList().getCards().contains(card));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex,subjectList.getSubject(subjectIndex - 1).getCardList().getCards().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 54
    }
  },
  {
    "path": "src/test/java/seedu/commands/AddSubjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class AddSubjectCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private AddSubjectCommand addSubjectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName \u003d \"Test\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void addSubjectCommand_validSubject_correctlyConstructed() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectName,addSubjectCommand.getSubjectName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validSubject_successfullyAdded() throws EscException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        SubjectList subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Subject subject \u003d new Subject(subjectName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList.addSubject(subject);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectList.getSubject(subjectIndex - 1).getSubject(),subjectName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 32
    }
  },
  {
    "path": "src/test/java/seedu/commands/DeleteCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class DeleteCardCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private DeleteCardCommand deleteCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private SubjectList subjectList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        card \u003d new Card(\"What does HTTP stand for?\",\"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectName \u003d \"Biology\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(1,1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void execute_emptyCardList_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(1,1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_indexOutOfRange_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card item does not exist.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int[] deleteIndexes \u003d {0,2};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteCardCommand \u003d new DeleteCardCommand(1,i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void deleteCardCommand_validCard_CorrectlyConstructed() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int cardIndex \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(subjectIndex,cardIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex - 1,deleteCardCommand.getSubjectIndex());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(cardIndex - 1, deleteCardCommand.getCardIndex());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_SuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand \u003d new DeleteCardCommand(subjectIndex,1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(subjectIndex, card);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteCardCommand.execute(subjectList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertFalse(subjectList.getSubject(subjectIndex - 1).getCardList().getCards().contains(card));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(0,subjectList.getSubject(subjectIndex - 1).getCardList().getCards().size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 93,
      "Jeremy733": 1
    }
  },
  {
    "path": "src/test/java/seedu/commands/DeleteSubjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class DeleteSubjectCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private DeleteSubjectCommand deleteSubjectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private SubjectList subjectList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectList \u003d new SubjectList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        subjectName \u003d \"Biology\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand \u003d new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            deleteSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void execute_indexOutOfRange_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int[] deleteIndexes \u003d {0,2};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteSubjectCommand \u003d new DeleteSubjectCommand(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                deleteSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void deleteCardCommand_validSubjectIndex_CorrectlyConstructed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand \u003d new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjectIndex - 1,deleteSubjectCommand.getSubjectIndex());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void execute_validCard_SuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        int subjectIndex \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(subjectName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        addSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand \u003d new DeleteSubjectCommand(subjectIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        deleteSubjectCommand.execute(subjectList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(0,subjectList.getSubjects().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 68,
      "Jeremy733": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/QuizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.generateRandomInt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.retrieveCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static seedu.duke.Quiz.quizQuestion;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class QuizTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList emptyCardList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CardList filledCardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Card flashcard3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void setUp() throws EscException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        emptyCardList \u003d new CardList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        filledCardList \u003d new CardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard1 \u003d new Card(\"What does HTTP stand for?\", \"HyperText Transfer Protocol\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard2 \u003d new Card(\"What does HTML stand for?\", \"HyperText Markup Language\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        flashcard3 \u003d new Card(\"What does CSS stand for?\", \"Cascading Style Sheets\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject \u003d new Subject(\"Junit\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        filledCardList.addCard(flashcard1,subject);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        filledCardList.addCard(flashcard2,subject);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        filledCardList.addCard(flashcard3,subject);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void generateRandomInt_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            generateRandomInt(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void retrieveCard_emptyCardList_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        expectedException \u003d new EscException(\"The card list is empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            retrieveCard(emptyCardList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void retrieveCard_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Card card \u003d retrieveCard(filledCardList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        assertTrue(card.equals(flashcard1) || card.equals(flashcard2) || card.equals(flashcard3));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 62,
      "Jeremy733": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kcubey"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.cards.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.cards.CardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.Subject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import seedu.subjects.SubjectList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kcubey"
        },
        "content": "/* TODO"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    --\u003e List of things to test for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    1. test for if creating file works"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    2. test if loading from file works"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    3. test if saving to file works"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kcubey"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kcubey"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private CardList cardList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    private ByteArrayOutputStream byteOut;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private SubjectList subjectList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    File tempDir;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    void setUp() throws IOException, EscException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        cardList \u003d new CardList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Card newCard \u003d new Card(\"test question\", \"test answer\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject \u003d new Subject(\"Junit\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        cardList.addCard(newCard,subject);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //create the file data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        byteOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ObjectOutputStream objWriteToBytes \u003d new ObjectOutputStream(byteOut);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.writeObject(cardList.getCards());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.flush();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        objWriteToBytes.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    void testSaveCards(@TempDir Path tempDir) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Path tempPath \u003d tempDir.resolve(\"temp.txt\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //write to temp file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Files.write(tempPath, byteOut.toByteArray());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(Files.exists(tempPath), \"file exists\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        //Check bytes written are the same"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertEquals(Arrays.toString(byteOut.toByteArray()), Arrays.toString(Files.readAllBytes(tempPath)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void testLoadCards(@TempDir Path tempDir) throws EscException, ClassNotFoundException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Path tempPath \u003d tempDir.resolve(\"temp.txt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        Files.write(tempPath, byteOut.toByteArray());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(Files.exists(tempPath), \"file exists\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String filepathStr  \u003d String.valueOf(tempPath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        File tempFile \u003d new File(filepathStr);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList\u003cCard\u003e loadCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        ArrayList tempList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            FileInputStream fileRead \u003d new FileInputStream(tempFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            ObjectInputStream objRead \u003d new ObjectInputStream(fileRead);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            tempList \u003d (ArrayList) objRead.readObject();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            for (int i \u003d 0; i \u003c tempList.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kcubey"
        },
        "content": "                loadCards.add((Card) tempList.get(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            objRead.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            throw new EscException(\"Load error\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertEquals(loadCards.size(),cardList.getCards().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        for (int i \u003d 0; i \u003c loadCards.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            Card expectedCard \u003d cardList.getCard(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            Card actualCard \u003d loadCards.get(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            assertEquals(expectedCard.getQuestion(),actualCard.getQuestion());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            assertEquals(expectedCard.getAnswer(),actualCard.getAnswer());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kcubey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kcubey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 1,
      "alexlim510": 1,
      "kcubey": 103,
      "Jeremy733": 6
    }
  },
  {
    "path": "src/test/java/seedu/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddSubjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.AddCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.DeleteSubjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ListSubjectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ScoreCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.QuizCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_emptyQuery_exceptionThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String emptyQuery \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String resultMessage \u003d parser.INCORRECT_COMMAND + HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        EscException resultException \u003d new EscException(resultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(emptyQuery);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(resultException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listSubjectQuery_ListSubjectCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String listQuery \u003d \"listsubject\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(listQuery);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ListSubjectCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_helpQuery_HelpCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String helpQuery \u003d \"help\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(helpQuery);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_exitQuery_ExitCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String exitQuery \u003d \"exit\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(exitQuery);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addQueryWithNoArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addCardQueries \u003d {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard \"};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addCardQueries) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addCardQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addCardQueries \u003d {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard q/\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard a/\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/ q/\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/1 q/ a/\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/1 q/something a/\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addcard s/1 q/ a/something\"};"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addCardQueries) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addCardQueryWithNonInteger_exceptionThrown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addCardQuery \u003d \"addcard s/something q/something a/something\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(addCardQuery);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Query should have thrown an exception.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addCardQueryCorrectFormat_AddCardCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addCardQuery \u003d \"addcard s/1 q/What does HTTP stand for? a/HyperText Transfer Protocol\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(addCardQuery);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof AddCardCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addSubjectQueryWithNoArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(AddSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addSubjectQueries \u003d {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject \"};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addSubjectQueries) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addSubjectQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"A subject name is required.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] addSubjectQueries \u003d {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject s/\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"addsubject s/ \"};"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : addSubjectQueries) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Empty query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_addSubjectQueryCorrectFormat_AddCardCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String addSubjectQuery \u003d \"addsubject s/biology\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(addSubjectQuery);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof AddSubjectCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(DeleteCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] deleteCardQueries \u003d {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletecard\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletecard \"};"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : deleteCardQueries) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteCardQuery \u003d \"deletecard s/something c/1\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(deleteCardQuery);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryWithNonIntegerCard_exceptionThrown() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteCardQuery \u003d \"deletecard s/1 c/something\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The card index has to be an integer.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(deleteCardQuery);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteCardQueryCorrectFormat_DeleteCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteCardQuery \u003d \"deletecard s/1 c/1\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(deleteCardQuery);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof DeleteCardCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(DeleteSubjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] deleteSubjectQueries \u003d {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletesubject\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletesubject \"};"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : deleteSubjectQueries) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] deleteSubjectQueries \u003d {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"deletesubject s/\"};"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : deleteSubjectQueries) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteSubjectQuery \u003d \"deletesubject s/something\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(deleteSubjectQuery);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_deleteSubjectQuery_DeleteSubjectCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String deleteSubjectQuery \u003d \"deletesubject s/1\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(deleteSubjectQuery);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof DeleteSubjectCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(ListCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] listQueries \u003d {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"listcard\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"listcard \"};"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : listQueries) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] listQueries \u003d {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"listcard s/\"};"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : listQueries) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String listCardQuery \u003d \"listcard s/something\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(listCardQuery);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_listCardQuery_ListCardCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String listQuery \u003d \"listcard s/1\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(listQuery);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ListCardCommand);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(QuizCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] quizQueries \u003d {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"quiz\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"quiz \"};"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : quizQueries) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] quizQueries \u003d {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kcubey"
        },
        "content": "            \"quiz s/ n/1\"};"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : quizQueries) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String quizQuery \u003d \"quiz s/something n/1\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(quizQuery);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_quizQuery_QuizCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kcubey"
        },
        "content": "        String quizQuery \u003d \"quiz s/1 n/1\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(quizQuery);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof QuizCommand);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQueryWithInvalidArgs_exceptionThrown() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(ScoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] scoreQueries \u003d {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"score\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"score \"};"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : scoreQueries) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQueryWithoutSubjectIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index is required.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String[] scoreQueries \u003d {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            \"score s/\"};"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        for (String query : scoreQueries) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                parser.parse(query);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                fail(\"Invalid query should have thrown an exception.\\n\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "                assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQueryWithNonIntegerSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String scoreQuery \u003d \"score s/something\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        expectedException \u003d new EscException(\"The subject index has to be an integer.\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            parser.parse(scoreQuery);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            fail(\"Empty query should have thrown an exception.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "            assertEquals(expectedException.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alexlim510"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    void parse_scoreQuery_ScoreCommandReturned() throws Exception {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        String scoreQuery \u003d \"score s/1\";"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        Command returnedCommand \u003d parser.parse(scoreQuery);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertTrue(returnedCommand instanceof ScoreCommand);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 407,
      "kcubey": 3
    }
  },
  {
    "path": "src/test/java/seedu/subjects/SubjectListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kcubey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kcubey"
        },
        "content": "import seedu.exception.EscException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private SubjectList subjects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private EscException expectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects \u003d new SubjectList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject1 \u003d new Subject(\"TEST 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject2 \u003d new Subject(\"TEST 2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject3 \u003d new Subject(\"TEST1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject4 \u003d new Subject(\"    tEsT 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubjects() throws EscException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject3));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.getSubject(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_indexOutOfRange_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int[] getIndexes \u003d {-1,2};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (int i : getIndexes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                subjects.getSubject(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void getSubject_SuccessfullyExecuted() throws EscException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjects.getSubject(0), subject1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "        assertEquals(subjects.getSubject(1), subject2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void addSubject_SubjectSuccessfullyAdded() throws EscException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void addSubject_UnSubjectSuccessfullyAdded() throws EscException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject4);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_emptySubjectList_exceptionThrown() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject list is empty.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            subjects.removeSubject(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        } catch (EscException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_indexOutOfRange_exceptionThrown() throws EscException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        expectedException \u003d new EscException(\"The subject item does not exist.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        int[] deleteIndexes \u003d {-1,1};"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        for (int i : deleteIndexes) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                subjects.removeSubject(i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                fail(\"Out of range index should have thrown an exception\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            } catch (EscException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "                assertEquals(e.getMessage(),expectedException.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    void removeSubject_SubjectSuccessfullyDeleted() throws EscException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.addSubject(subject2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.removeSubject(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(1,subjects.getSubjects().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subjects.removeSubject(0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertFalse(subjects.getSubjects().contains(subject2));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertEquals(0,subjects.getSubjects().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 2,
      "Jeremy733": 128,
      "kcubey": 5
    }
  },
  {
    "path": "src/test/java/seedu/subjects/SubjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "package seedu.subjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "public class SubjectTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    private Subject subject2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject1 \u003d new Subject(\"Test 1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        subject2 \u003d new Subject(\"Test 2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    public void getSubject() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subject1.getSubject().equals(\"Test 1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "        assertTrue(subject2.getSubject().equals(\"Test 2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremy733"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremy733": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "addsubject s/biology"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexlim510"
        },
        "content": "addcard s/1 q/question a/answer"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kcubey"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "alexlim510": 2,
      "kcubey": 1
    }
  }
]
